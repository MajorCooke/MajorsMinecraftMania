Struct LastDamaged
{
	Actor i, s;
	int damage, dmg, flags;
	Name mod;
	double angle;
	bool used, secdmg;
}



//==============================================================================
//==============================================================================
// 
//==============================================================================
//==============================================================================

extend class MinecraftEnemy
{
	//--------------------------------------------------------------------------
	// A virtual for monsters to adjust various aspects for AI difficulty setting.
	//--------------------------------------------------------------------------
	private bool Inited, LookAllRound;
	virtual void AdjustDifficulty()
	{
		if (!Inited)
		{
			LookAllRound = irandom(0,1);
			Inited = true;
		}
		
		Switch (MCC_AIDifficulty)
		{
			Default:
			Case Dif_Easy:
				bLOOKALLAROUND = Default.bLOOKALLAROUND;
				break;
			Case Dif_Normal:
				bLOOKALLAROUND = (LookAllRound || Default.bLOOKALLAROUND);
				break;
			Case Dif_Hard:
				bLOOKALLAROUND = true;
				break;
		}
	}
	
	//--------------------------------------------------------------------------
	// TraceDistance
	//
	// Returns the distance to the edge of another actor.
	//--------------------------------------------------------------------------
	
	transient private GDDTracer Trc;
	bool CheckTrace(Actor mo, double dist = 0, double zz = -1, bool flor = true, bool wall = true, bool ceil = true)
	{
		double ret = TraceDistance(mo, dist, zz);
		return (ret >= 0 && ret <= dist);
	}
	double TraceDistance(Actor mo, double dist = 0, double zz = -1, bool flor = false, bool wall = true, bool ceil = false)
	{
		if (dist <= 0 || !Targetable(mo))	return -1;
		
		// Set the position so its flat if the other's feet is above our
		// own, but not our head.
		if (zz < 0.0)
			zz = Clamp(	mo.pos.z, 
						Max(pos.z, floorz + 1, mo.pos.z), 
						Min(pos.z + height, ceilingz, mo.pos.z));
		
		Vector3 mpos = Vec2OffsetZ(0,0,zz),
				tpos = mo.pos;
		
		Vector3 APR = level.Vec3Diff(mpos, tpos);
		
		if (!Trc)	Trc = new('GDDTracer');
		Trc.trg = mo;
		Trc.SetHittable(flor,wall,ceil);
		Trc.Trace(mpos, cursector, APR, dist + radius, 0);
		
		if (Trc.Results.HitType == TRACE_HitActor)
			return level.Vec3Diff(Trc.Results.HitPos, mpos).Length();
		return -1;
	}
	//--------------------------------------------------------------------------
	// "Respawns" the monster by clearing all inventory and effects, and other
	// stuff.
	virtual void Respawn()
	{
		if (health < 1 || bDORMANT)	return;
		
		Damagers.Clear();
		Array<Powerup> Powers; Powers.Clear();
		Array<Inventory> Items; Items.Clear();
		for (let probe = inv; probe; probe = probe.inv)
		{
			let power = Powerup(probe);
			if (power)	Powers.Push(power);
			else if (probe)	Items.Push(probe);
		}
		
		for (int i = 0; i < Powers.Size(); i++)
			if (Powers[i])	Powers[i].EndEffect();
		
		for (int i = 0; i < Items.Size(); i++)
			if (Items[i])	Items[i].Destroy();
		
		// Mitigate any telefragging by making them pass through actors.
		bTHRUACTORS = true;
		A_Respawn(RSF_TELEFRAG);
		Deactivate(null);
	}
	
	int CheckDamageTimer()
	{	return DamageTimer;	}

	// This is never called if the actor is dead.
	virtual void DamageReact(Actor inf, Actor src, int damage, int dmg, Name mod, int flags = 0, double angle = 0, bool secdmg = false)
	{
		
	}

	virtual void UpdateLimbs(bool interp = true)
	{
		for (int i = 0; i < Limb.Size(); i++)
		{
			if (Limb[i])
			{
				Vector3 NA = Angs;
				if (!(Limb[i] is 'MCBodyPartHead'))
					NA.Y -= Pitch;
				
				Switch (Limb[i].CopyFrames)
				{
					Case MCFrames_FromOwner:	
						Limb[i].Frame = Frame;	
						break;
					Case MCFrames_FromMaster:
					{
						if (Limb[i].Master)	
							Limb[i].Frame = Limb[i].Master.Frame; 
						break;
					}
					Default:
						break;
				}
				
				Limb[i].UpdatePosition(Limb[i].Master, (interp ? WARPF_INTERPOLATE : 0));
				Limb[i].UpdateScales(OverScale, Scale);
				Limb[i].SetNextAngles(NA);
				Limb[i].A_SetRenderStyle(alpha, CurStyle);
				Limb[i].Translation = Translation;
				Limb[i].bINVISIBLE = bINVISIBLE;
				Limb[i].bBRIGHT = bBRIGHT;
			}
		}
	}
	
	// The goal of this function is simply to call Super.DropItems and pass in the
	// source, inflictor and damagetype for the monsters to use. The base class
	// simply checks if a player did the killing. Naturally this can be overridden
	// as needed, such as the creeper and skeleton special drops.
	virtual protected bool DropItems(Actor src, Actor inf, Name mod)
	{
		for (int i = 0; i < Damagers.Size(); i++)
			if (Damagers[i] is 'PlayerPawn')	return true;
		return (src is 'PlayerPawn');
	}
	
	protected void DropItem(Class<Inventory> Cls, int Amount = -1, int Chance = 256)
	{
		if (!Event)	Event = MinecraftHandler.Fetch();
		if (Event)	Event.DropItem(self, Cls, Amount, Chance);
	}
	
	// Checks if the actor is immune to a damagetype.
	bool IsImmune(Name DmgType) const
	{	return (GetDamageFactor(DmgType, TELEFRAG_DAMAGE) < 1);	}
	
	//--------------------------------------------------------------------------
	// Sets the drown timer.
	// 
	// * maxtime
	//		How long the monster can go without drowning
	// * current
	//		How much air time they have before drowning
	void SetDrownTimer(int maxtime, int current = -1)
	{
		DrownTimerStart = maxtime;
		DrownTimer = (current > -1) ? current : maxtime;
	}
	
	//--------------------------------------------------------------------------
	// Applies a damagefactor for all things, including natural and inventory.
	int GetDamageFactor(Name type, int damage, bool secdmg = false)
	{
		if (damage < 1)	return damage;
		
		int dmg = damage;
		dmg = ApplyDamageFactor(type, dmg);
		
		if (dmg > 0)
			dmg = GetModifiedDamage(type, dmg, true);
		
		// For damage sectors, DamageSector is a global for reduction no matter
		// what, on top of the regular damage type.
		if (dmg > 0 && secdmg)
		{
			dmg = ApplyDamageFactor("DamageSector", dmg);
			if (dmg > 0)
				dmg = GetModifiedDamage("DamageSector", dmg, true);
		}
			
		return dmg;
	}
	
	//--------------------------------------------------------------------------
	// Initializes Limb array.
	protected void Init(int limbs)
	{
		Limb.Clear();
		if (limbs < 1)	return;
		Limb.Reserve(limbs);
		for (int i = 0; i < Limb.Size(); i++)
			Limb[i] = null;
	}
	
	//--------------------------------------------------------------------------
	// Called when dealing fall damage. Returns false if no damage was dealt
	// or if the actor is incapable of receiving fall damage.
	virtual bool DoFallDamage()
	{
		if (bNOGRAVITY || bFLOAT || GetGravity() <= 0.0 || waterlevel >= 3)
			return false;
			
		int dmg = Clamp(abs(PrevVel.z) - FallDmgVel, 0, TELEFRAG_DAMAGE - 1);
		if (dmg < 1)	return false;
	//	Console.Printf("Velocity: %d -- Damage: %d", PrevVel.Z, dmg);
		return (DamageMobj(null, null, dmg, 'Falling') > 0);
	}
	
	//--------------------------------------------------------------------------
	// Updates all things related to scale, including height and radius.
	protected void SetOverScale(double s)
	{
		OverScale = s;
		A_SetSize(Default.Radius * OverScale, Default.Height * OverScale);
		UpdateLimbs();
	}
	
	//--------------------------------------------------------------------------
	// Helper function simply to set limbs as well as 
	protected void SetTranslation(Name n)
	{
		A_SetTranslation(n);
		for (int i = 0; i < Limb.Size(); i++)
			if (Limb[i])	Limb[i].A_SetTranslation(n);
		PrevTrans = Translation;
	}
	
	//--------------------------------------------------------------------------
	// Causes all the limbs to turn into their gibbed variants and send them
	// flying all around based on velocity.
	protected void Gib(double VelLen)
	{
		Translation = Default.Translation;
		bBRIGHT = false;
		for (int i = 0; i < Limb.Size(); i++)
		{
			if (Limb[i])	
			{
				Limb[i].Translation = Translation;
				Limb[i].bBRIGHT = false;
				Limb[i].SpawnGib(VelLen);
			}
		}
	}
	
	// Returns the head actor, mainly for cosmetic head tilts for actors to
	// look at others properly. Bear in mind that if more than one head is present,
	// the one earliest on the list will be the one returned.
	private int HeadIndex;
	MCBodyPartHead GetHead() const
	{
		// Quicker lookup. 
		if (HeadIndex > -1 && HeadIndex < Limb.Size() &&
			Limb[HeadIndex] is 'MCBodyPartHead')
			return MCBodyPartHead(Limb[HeadIndex]);
			
		for (int i = 0; i < Limb.Size(); i++)
		{
			if (Limb[i] is 'MCBodyPartHead')
			{
				HeadIndex = i;
				return MCBodyPartHead(Limb[i]);
			}
		}
		
		HeadIndex = -1;
		return null;
	}
	
	protected virtual void DestroyLimbs()
	{
		for (int i = 0; i < Limb.Size(); i++)
		{
			if (Limb[i])	
			{
				Limb[i].Destroy();
				Limb[i] = null;
			}
		}
	}
	
	void CleanDamagers()
	{
		Array<Actor> Temp; Temp.Clear();
		for (int i = 0; i < Damagers.Size(); i++)
		{
			let mo = Damagers[i];
			if (mo && mo.health > 0)	Temp.Push(mo);
		}
		Damagers.Move(Temp);
	}
	
	//--------------------------------------------------------------------------
	// Customized looking algorithm.
	//
	// This takes into account the Goal pointer and the Tracer pointer.
	// 
	// Goal is used for avoiding damaging sectors whenever taking damage, except
	// if the caller already has a target/tracer.
	// 
	// Tracer takes top-most priority, used whenever the customized AlertMonsters 
	// function is called.
	//--------------------------------------------------------------------------
	
	
	protected virtual void CustomLook(bool close = false)
	{
		if (Passive)	return;
		
		if (!Relations)
		{
			A_LookEx(LOF_NOSEESOUND|LOF_NOSOUNDCHECK|LOF_NOJUMP, 0, MaxTargetRange);
		}
		else
		{
			Array<Actor> mon; mon.Clear();
			SearchActors(mon, (MaxTargetRange, MaxTargetRange), 360);
			
			Actor closest = null;
			double dist = (32767.0 ** 2.0);
			for (int i = 0; i < mon.Size(); i++)
			{
				Actor mo = mon[i];
				bool rel = CheckRelationTarget(mo);
				if (!rel)	continue;
				
				if (!close)	{	Target = mo;	return;		}
				else
				{
					double dis = Distance3DSquared(mo);
					if (!closest || dis < dist)
					{
						closest = mo;
						dis = dist;
					}
				}
			}
			if (closest)	
			{
				if (!LastEnemy && Target)	LastEnemy = Target;
				Target = LastHeard = closest;
			}
		}
	}
	
	protected void Look(bool time = false)
	{
		if (Passive)
		{
			if (Target && (Target is "PlayerPawn" || Target.Player))
				A_ClearTarget();
		}
		else if (!time || --LookTimer < 1)
		{
			if (time)	LookTimer = LookTimerDefault;
			
			if (Targetable(Tracer))	
				A_LookEx(LOF_NOSEESOUND|LOF_NOJUMP, 0, 32767);
			else
			{
				Tracer = null;
				CustomLook(true);
			}
			
			if (ValidateTarget(true))
			{
				if (!bAMBUSH || CheckSight(Target, CSFlags))
					SetState(ResolveState("See"));
			}
			else
			{
				if (Tracer == Target)	Tracer = null;
				ClearTarget();
			}
		}
	}
	
	protected void LookWander()
	{
		Vector3 PrePos = Pos;
		Look(true);
		A_Wander();
		if (!(PrePos ~== Pos))	
			DoStepSound();
	}
	
	virtual void SetPassive(bool on)	{	Passive = on;	}
	virtual void SetNeutral(bool on)	{	Neutral = on;	}
	private int ChaseTics;
	
	bool CheckFear(Actor mo)
	{
		if (!mo)	
		{
			mo == Target;
			if (!mo)	return false;
		}
		if (CheckRelationTarget(mo) == Rel_Afraid)
			return true;
		
		return (!bNOFEAR && (bFRIGHTENED || mo.bFRIGHTENING));
	}
	
	// 
	virtual void ChaseExtra() {}
	
	private int StepTics;
	void Chase(statelabel melee = "Melee", statelabel missile = "Missile", int flags = 0, double maxturn = 30.0, bool _3dmelee = false, double range = 0)
	{
		if (bKILLED)
			return;
			
		Vector3 prepos = pos;
		
		bool NotBottomMount = false;
	
		int newflags = CHF_NOPLAYACTIVE;
		
		// Get a target if invalid.
		if (!ValidateTarget(false, range, true))
		{
			if (!Goal)
			{
				Array<Actor> Temp; Temp.Clear();
				for (int i = 0; i < Damagers.Size(); i++)
					if (Damagers[i] && Damagers[i].Health > 0)
						Temp.Push(Damagers[i]);
				Damagers.Move(Temp);
				
				if (Tracer == Target)	Tracer = null;
				A_ClearTarget();
				SetState(ResolveState("Idle"));
				return;
			}
			else Target = Goal;
		}
		
		if (ChaseTics > 0)
			ChaseTics--;
		
		bool good = false;
		// Use regular A_Chase if cannot see.
		bool sight = CheckSight(Target, CSFlags);
		if (ChaseTics < 1 && (NotBottomMount || CheckSight(Target, CSFlags))) 
		{
			
			if (Target)
			{
				// Turning handled by the inventory item itself if mounted.
				if (NotBottomMount)
					good = true;
				else
				{
					HoldAngs = (Angle, Pitch, Roll);
					
					double ang = AngleTo(Target);
					bool fear = CheckFear(Target);
					if (fear)
					{
						ang += 180;
						melee = missile = null;
						
					}
					else	A_Face(Target, maxturn, 0, flags: FAF_MIDDLE);
					
					if (flags & CHF_DONTMOVE)
					{
						good = true;
					}
					else if (bFLOAT)
					{
						double c = cos(Pitch) * Speed;
						double s = -sin(Pitch) * Speed;
						
						Vector3 old = pos;
						Vector2 new = Vec2Angle(Speed, ang);
						
						SetZ(pos.z + s);
						if (TryMove(new, bDROPOFF))
							good = true;
						else 
						{
							SetOrigin(old, false);
							ChaseTics = Second;
						}
					}
					else //if (Vel.Z == 0.0)
					{
						Vector2 nmpos = Vec2Angle(speed, ang);
						if (OnGround && Vel.Z == 0.0 && TryMove(nmpos, bDROPOFF))
						{
							good = true;
							
							SetZ(floorz);
							
							if (VelPosLen <= speed)
								vel.XY = vel.XY * 0.8;
						}
						else if (OnGround)
							ChaseTics = Second;
							
						newflags |= CHF_DONTMOVE;
					}
					
				}
				
				
				
				// Move was good. Do the chase but without actually moving. 
				if (good)
					newflags = CHF_DONTMOVE|CHF_DONTTURN|CHF_NODIRECTIONTURN|CHF_NOPOSTATTACKTURN;
				else
				{
					Angle = HoldAngs.X;
					Pitch = HoldAngs.Y;
					Roll =	HoldAngs.Z;
				}
				
				if (Goal && Target == Goal)
				{
					if (CheckGoal(0, 'Idle'))
					{
						melee = null;
						missile = null;
					}
				}
			}
		}
		if (!good && (angle % 45 != 0.0))
			AlignMoveDir();
		
		if (missile != null && MislChance > -1)
		{
			MislChance = Min(MislChance, 1.0);
		}
		
		if (_3dmelee && !bJUSTATTACKED && Targetable(Target))
		{
			let s = ResolveState(melee);
			if (s)
			{
				if (CheckTrace(Target, MeleeRange))
				{
					bJUSTATTACKED = true;
					SetState(s);
					if (!(PrePos ~== Pos))
						DoStepSound();
					return;
				}
			}
		}
		
		A_Chase(melee, missile, flags|newflags);
		
		if (!(PrePos ~== Pos))
			DoStepSound();
	}
	
	void DoStepSound()
	{
		if (StepSound != "")
		{
			if (--StepTics < 1)
			{
				StepTics = StepSoundDelay;
				A_StartSound(StepSound, flags: CHANF_OVERLAP);
			}
		}
	}
	
	
	// Aligns the moveDir to the closest 45th degree. Otherwise it looks weird
	// when they go from moving at a custom angle to the normal chase.
	void AlignMoveDir()
	{
		double roundee = Normalize180(angle);
		if (roundee <= 0.0)	roundee += 360.0;
		double deg = roundee % 45.0;
		int DirAdd = (deg >= 22.5) ? 1 : 0;
		moveDir = uint((roundee / 45.0) + DirAdd) % 8;
		
		/*
		double NextAngle = MoveDir * 45;
		if (angle != NextAngle)
		{
			double Delta = deltaangle(angle, NextAngle);
			if (delta != 0.0)
			{
				double TurnAmount = 11.25; // 45 * 0.25
				if (abs(Delta) <= TurnAmount)
					angle = NextAngle;
				else
					angle += (Delta > 0) ? TurnAmount : -TurnAmount;
			}
		}
		*/
	}
	
	virtual bool DoMissile()
	{
		return false;
	}
	
	virtual bool DoMelee(int damage = -1)
	{
		if (AttackDelay > 0 || !Targetable(Target) || !CheckTrace(Target, MeleeRange))
			return false;
		
		if (damage < 0)	
		{
			damage = MeleeDamage;
			if (damage < 1)
				return false;
		}
		
		let armor = Target.FindInventory('BasicArmor',true);
		int armbefore = 0, armafter = 0;
		
		if (armor)	armbefore = Armor.Amount;
		
		int dmg = ((Target.bINVULNERABLE && !bFOILINVUL) || Target.bNODAMAGE) 
			? 0 : Target.DamageMobj(null, self, damage, "Melee");
			
		if (armor)	armafter = Armor.Amount;
		
		if (dmg > 0 || armafter != armbefore)
		{
			if (Target && !bNODAMAGETHRUST && !Target.bDONTTHRUST && 
				!(Target is 'MinecraftEnemy') && Target.Mass > 0)
			{
				double thrust = clamp((damage * 20.0) / Target.Mass, 0., 32);
				Target.Thrust(thrust, AngleTo(Target));
				Target.Vel.Z += 700 / Target.Mass;
			}
			AttackDelay = AttackDelayMax;
			SetMeleeAnimation();
			ValidateTarget();
		}
		
		return true;
	}
	
	virtual void SetMeleeAnimation()	{	}
	
	//==========================================================================
	// Goal Manipulation
	//==========================================================================
	
	enum EGoalStatus
	{
		GS_None = 0,
		GS_Chasing,
		GS_Reached
	};
	
	int CheckGoal(double dist = 0.0, StateLabel next = null)
	{
		if (dist <= 0.0)	dist = radius;
		if (Goal && Target == Goal)
		{
			bool InZ = (pos.z <= Goal.pos.Z + Goal.Height) &&
						(pos.z >= Goal.pos.z);
			if (InZ && Distance2DSquared(Goal) <= (dist ** 2))
			{
				SetOrigin(Goal.pos, true);
				RemoveGoal();
				State s = ResolveState(next);
				if (s)	SetState(s);
				return GS_Reached;
			}
			return GS_Chasing;
		}
		return GS_None;
	}
	
	// Just in case something fucks with the goal pointer prematurely...
	private Actor BackupGoal; 
	virtual void SetGoal(Vector3 gp, double ang = 0, bool relative = false)
	{
	//	Console.Printf("SetGoal called");
		if (ValidateTarget())	return;
		
		if (!Goal)	
		{
			if (!BackupGoal)
			{
				Goal = Spawn('MCGoal', gp);
			}
			else Goal = BackupGoal;
		}
		BackupGoal = Goal;
		
		if (relative)	Goal.Warp(Self, gp.x, gp.y, gp.z, ang, WARPF_NOCHECKPOSITION);
		else			Goal.SetOrigin(gp, false);
	}
	
	void RemoveGoal()
	{
		if (Goal is 'MCGoal' && !Goal.bDESTROYED)
			Goal.Destroy();
		if (BackupGoal && !BackupGoal.bDESTROYED)
			BackupGoal.Destroy();
			
		Goal = BackupGoal = null;
	}
	
	//==========================================================================
	// Despawn Handling
	//
	// If all players are outside of the 
	//==========================================================================
}