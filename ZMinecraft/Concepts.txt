class NextDamageTic
{
	private Array<Int> Damage;
	private Array<CVector3> Vel;
	private Array<Actor> inf, src;
	private Array<Name> mod;
	
	int i;
	int size;
	bool Collecting;
	
	static NextDamageTic Create();
	{
		let ndt = new('NextDamageTic');
		ndt.Clear();
		return ndt;
	}
	
	protected void Init()
	{
		i = size = 0;
		Clear();
	}
	
	void Clear()
	{
		Damage.Clear();
		Vel.Clear();
		inf.Clear();
		src.Clear();
		mod.Clear();
	}
	
	void Reset()
	{
		i = 0;
	}
	
	bool Next()
	{
		if (i >= size)	return false;
		else
		{
			i++;
			return true;
		}
	}
}

//==============================================================================

// ReplaceInfoManager
//
// Replacement handling storage area used to house information about who replaces
// what, their category, and tiers.

Class CPReplaceInfo
{
	// Replacement,				Replacee
	private Dictionary Replacement;	
	// Replacement,				<category flags>
	private Dictionary Category;
	// Replacement,				<# int>
	private Dictionary Tiers[MaxTiersInit];
	
	
	// Creates the info manager.
	static CPReplaceInfo Create()
	{
		let rep = new('CPReplaceInfo');
		if (rep)	rep.Init();
		return rep;
	}
	
	// Initializes the included dictionaries.
	protected void Init()
	{
		Replacement = Dictionary.Create();
		Category = Dictionary.Create();
		for (int i = 0; i < MaxTiers; i++)
			Tiers[i] = Dictionary.Create();
	}
	
	// Make sure the actors are valid.
	private bool ValidateActor(String Repment, String Repee)
	{
		Class<Actor> mon = Repee;
		Class<Actor> rep = Repment;
		if (!mon || !rep)
		{
			if (!mon && !rep)
				Console.Printf("%s & %s - bad actor(s)", Repee, Repment);
			else if (!mon)
				Console.Printf("%s | %s - bad replaceE", Repee, Repment);
			else
				Console.Printf("%s | %s - bad replaceMENT", Repee, Repment);
			
			return false;
		}
		return true;
	}
	
	// Adds a tiered actor, whether it's a monster, weapon, ammo, powerup or whatever.
	void AddTieredActor(String Repee, String Repment, int weight, int type, 
		int t1, int t2, int t3,	int t4, int t5, int t6, int t7, int t8)
	{	
		// If someone needs to add a weightless actor, use AddActor.
		if (weight + t1 + t2 + t3 + t4 + t5 + t6 + t7 + t8 < 1)
		{
			Console.Printf("%s - No spawn weight, skipping", Repment);
			return;
		}
		
		if (!AddActor(Repment, Repee))	return;
		
		Category.Insert(Repment, Max(type, CPT_REGULAR));
		Tiers[0].Insert(Repment, Max(0, weight));
		Tiers[1].Insert(Repment, Max(0, t1));
		Tiers[2].Insert(Repment, Max(0, t2));
		Tiers[3].Insert(Repment, Max(0, t3));
		Tiers[4].Insert(Repment, Max(0, t4));
		Tiers[5].Insert(Repment, Max(0, t5));
		Tiers[6].Insert(Repment, Max(0, t6));
		Tiers[7].Insert(Repment, Max(0, t7));
		Tiers[8].Insert(Repment, Max(0, t8));
	}
	
	bool AddActor(String Repment, String Repee)
	{
		if (!ValidateActor(Repment, Repee))	return false;
		
		// Force lower case to avoid case sensitivity mismatch.
		Repee = Repee.MakeLower();
		Repment = Repment.MakeLower();
		
		// No need to check for pre-existence since it will simply override it.
		Replacement.Insert(Repment, Repee);
		return true;
	}
	
	
	//==========================================================================
	// Getter Functions
	//==========================================================================
	
	//--------------------------------------------------------------------------
	// Get the weight of the tier if it exists. Returns -1 if it doesn't have any.
	CPTiers GetWeights(String Repment, int tier = 0)
	{
		if (tier < 0 || tier > MaxTiers)	
			return -1;
		
		
		String check = Tiers[tier].At(Repment);
		if (check.Length() < 1)	
			return -1;
		
		return Max(0,check.ToInt());
	}
	
	
	//--------------------------------------------------------------------------
	// Checks if a value exists and modifies the array of keys. Dynamic arrays
	// are passed by reference so modifying them will affect the variable where
	// it comes from.
	bool GetKeys(Dictionary d, String Val, Array<String> Keys)
	{
		if (!d || Val == '' || Val == 'None')	return false;
		
		DictionaryIterator i = DictionaryIterator.Create(d);
		bool good = false;
		Keys.Clear();
		while (i.Next())
		{
			if (i.Value() ~== Val) 
			{
				good = true;
				Keys.Push(i.Key());
			}
		}
		return good;
	}
}

//------------------------------------------------------------------------------
// A failed attempt at making a line finder.
//------------------------------------------------------------------------------

let LC = MC_Map.GetIntersectingLines(self, (2048, 2048));
			
			if (!LC)	return;
		//	Console.Printf("Lines made.");
		//	LC.SortDeltas();
			
			for (int i = 0; i < LC.Lines.Size(); i++)
			{
				Line l = LC.Lines[i].lin;
				// Make sure there's a sector in front and behind.
				if (!l)
				{
				//	Console.Printf("%d: No line. Skipping.", i);
					continue;
				}
				
				if ((l.flags & (Line.ML_BLOCKING|Line.ML_BLOCKMONSTERS)))
				{
				//	Console.Printf("%d: Blocking line. Skipping.", i);
					continue;
				}
				
				// No walls.
				if (!l.frontsector || !l.backsector)
				{
				//	Console.Printf("%d: Missing front or back sector. Skipping.", i);
					continue;
				}
				
				let f = l.frontsector;
				let b = l.backsector;
				
				if (f.DamageAmount > 0 && b.DamageAmount > 0)
				{
				//	Console.Printf("%d: Both sectors damaging. Skipping.", i);
					continue;
				}
				
				bool front = true;
				Sector s = b;
				if (f.DamageAmount < 1)
				{
					s = f;
					front = false;
				}
				
			
				Vector2 cpos = level.vec2offset(l.v1.p, l.v2.p) / 2.0;
				Vector2 offadd = cpos;// + Vec2Angle(1, VectorAngle(cpos.x, cpos.y) + (front ? 0 : 180));
			
				
			//	Console.Printf("%d %d -- %d %d", l.delta.x, l.delta.y, cpos.x, cpos.y);
				FCheckPosition tm;
				tm.thing = self;
				tm.pos = pos;
				
				bool thruactors = bTHRUACTORS;
				bTHRUACTORS = true;
				if (CheckPosition(offadd, false, tm))
				{
					//Console.Printf("1");
					SetGoal((offadd.x, offadd.y, tm.floorz));
					bTHRUACTORS = false;
					return;
				}
				else
				{
				//	Console.Printf("Attempt failed.");
					if (tm.CurSector != CurSector)
					{
						double tempstep = MaxStepHeight;
						if (tm.floorz > pos.z + MaxStepHeight && 
							(abs(pos.z - tm.floorz) > MaxStepHeight && 
							abs(pos.z - s.CenterFloor()) <= MaxStepHeight))
							
						{
							double tempstep = MaxStepHeight;
							MaxStepHeight += abs(tm.floorz - s.CenterFloor());
							bool good = (CheckPosition(offadd, false, tm));
							MaxStepHeight = tempstep;
							bTHRUACTORS = false;
							if (good)
							{
							//	Console.Printf("2");
								SetGoal((offadd.x, offadd.y, tm.floorz));
								return;
							}
							//else Console.Printf("-1");
						}
						//else Console.Printf("-4");						
						if (tm.floorz < pos.z - MaxDropoffHeight &&
							(abs(pos.z - tm.floorz) > MaxDropoffHeight && 
							abs(pos.z - s.CenterFloor()) <= MaxDropoffHeight))
						{
							double tempdrop = MaxDropoffHeight;
							MaxDropoffHeight += tm.floorz - s.CenterFloor();
							bTHRUACTORS = true;
							bool good = (CheckPosition(offadd, false, tm));
							bTHRUACTORS = false;
							MaxDropoffHeight = tempdrop;
							if (good)
							{
							//	Console.Printf("3");
								SetGoal((offadd.x, offadd.y, tm.floorz));
								return;
							}
							//else Console.Printf("-2");
						}
						//else Console.Printf("-5");
					}
				}
			}
			
			
			
			
			
			
			
			
			
// How this works:

// 1. Call the static function MCMountInfo.DoMount and supply the necessary 
// instructions. The function will attempt to establish a connection by checking
// for the inventory
/*
Class MCMount : Inventory
{
	MCMountInfo Info;
	
	override void OwnerDied()
	{
		if (Info && Owner)
		{
			Info.RemoveActor(Owner);
			Destroy();
			return;
		}
		Super.OwnerDied();
	}
}

Class MCMountObject play
{
	Actor Mo;
	Vector3 Offset;
	
	static MCMountObject CreateMountObject(Actor mo, Vector3 off)
	{
		if (!mo || mo.health < 1)
			return null;
			
		let mobj = new('MCMountObject');
		mobj.Mo = mo;
		mobj.Offset = off;
		return mobj;
	}
}

Class MCMountInfo : Thinker
{
	const CleanTimer = Second;
	
	private double TotalHeight; // Height of all combined actors.
	private int Timer;
	
	private Array<MCMountObject> Container;
//	private Array<Int> Flags;

	MCMountInfo CreateMountInfo()
	{
		let info = new('MCMountInfo');
		info.Init();
		return info;
	}
	
	protected void Init() 
	{
		Container.Clear();
	}
	
	override void Tick()
	{
		if (bDESTROYED)	return;
		
		if (++Timer >= CleanTimer)
		{
			Timer = 0;
			Refresh();
			
			int size = Infos.Size();
			if (size < 1)
			{
				Destroy();
				return;
			}
		}
	}
	
	protected void Refresh()
	{
		Timer = 0;
		
		Array<MCMountObject> temp; temp.Clear();
		int size = Container.Size();
		for (int i = 0; i < size; i++)
		{
			let con = Container[i];
			if (con && con.Mo)
			{
				if (con.Mo.Health > 0)
				{
					temp.Push(con);
					continue;
				}
				else RemoveActor(con.Mo, true);
			}
		}
		Container.Move(temp);
	}

	// Bottom-most actor (the one carrying the rest)
	Actor GetBottom() 	
	{	
		int size = Container.Size();
		if (size < 1)	return null;
		return Container[0].Mo;
	}
	
	// Top-most actor.
	Actor GetTop()
	{	
		int size = Container.Size();
		if (size < 1)	return null;
		return Container[size - 1].Mo;
	}
	
	static bool ValidateActor(Actor mo)
	{
		return (mo && mo.health > 0);
	}
	
	static MCMount GetMountToken(Actor mo)
	{
		if (!mo)	return null;
		return MCMount(mo.FindInventory('MCMount', true);
	}
	
	// Checks if an actor is already mounted on a chain.
	static MCMountInfo GetMountInfo(Actor mo)
	{
		if (!mo)	return null;
		let token = GetMountToken(mo);
		return (token) ? token.MountInfo : null;
	}
	
	//--------------------------------------------------------------------------
	// DoMount
	//
	// Attempts to set a rider atop a mount.
	//
	// Parameters:
	// 
	// *Rider
	//	The one to ride atop the Mount.
	//
	// *Mount
	//	The one to be ridden by the Rider.
	// 
	// *Offset
	//	The relative positional offsets (at least for XY).
	// 
	// *Flags
	//	-MTF_TOMOUNT: Moves the Rider to the Mount's chain.
	//	-MTF_TORIDER: Moves the Mount to the Rider's chain.
	//--------------------------------------------------------------------------
	
	static bool DoMount(Actor Rider, Actor Mount, Vector3 Offset, int flags = MTF_TOMOUNT)
	{
		if (!Rider || !Mount)	return false;
		
		// Check if the actor is already mounted elsewhere. This requires some
		// special handling in order to make sure it's properly set up. Flags
		// determine the chain to attach to.
		let rinfo = GetMountInfo(Rider);
		let minfo = GetMountInfo(Mount);
		
		bool ToMount = (flags & MTF_TOMOUNT);
		bool ToRider = (flags & MTF_TORIDER);
		
		// Remove them both from their chains and start a new one.
		if (ToMount && ToRider)
		{
			if (minfo)	Dismount(Mount, minfo);
			if (rinfo)	Dismount(Rider, rinfo);
			
			let info = CreateMountInfo();
			info.AddActor(Mount, (0,0,0));
			info.AddActor(Rider, Offset);
		}
		// Peel the rider off the current and stick it on top of the mount.
		else if (ToMount)
		{
			if (!minfo)	
			{
				minfo = CreateMountInfo();
				minfo.AddActor(Mount, (0,0,0));
			}
			if (rinfo != minfo)	Dismount(Rider, rinfo);
			minfo.AddActor(Rider, Offset, minfo.GetActorIndex(Mount) + 1);
		}
		// Take the mount away from their stack and stick'em under the rider.
		else if (ToRider)
		{
			if (!rinfo)
			{
				rinfo = CreateMountInfo();
				rinfo.AddActor(Rider, Offset);
			}
			if (rinfo != minfo)	Dismount(Mount, minfo);
			rinfo.AddActor(Mount, (0,0,0), Max(0, rinfo.GetActorIndex(Rider) - 1));
		}
		else if (!rinfo && !minfo)
		{				
			let info = CreateMountInfo();
			info.AddActor(Mount, (0,0,0));
			info.AddActor(Rider, Offset);
		}
		else return false;
		
		return true;
	}
	
	static bool Dismount(Actor mo, MCMountInfo info = null)
	{
		if (!mo)	return false;
		
		if (!info)		info = GetMountInfo(mo);
		return (info) ? info.RemoveActor(mo) : false;
	}
	
	//--------------------------------------------------------------------------
	// Gets the position of the actor in the array.
	int GetActorIndex(Actor mo)
	{
		if (!mo)	return -1;
		
		int size = Container.Size();
		if (size < 1)	return -1;
		
		for (int i = 0; i < size; i++)
		{
			if (Container[i].Mo == mo)
				return i;
		}
		
		return -1;
	}
	
	// Get the actor riding this actor.
	Actor GetRider(Actor mo)
	{
		if (!mo)	return null;
		
		int size = Container.Size();
		int pos = GetActorIndex(mo);
		if (pos < 0 || pos >= size - 1)	
			return null; // Actor not present here.
		
		return Container[pos + 1].Mo;
	}
	// Get the actor being ridden.
	Actor GetMount(Actor mo)
	{
		if (!mo)	return null;
		
		int size = Container.Size();
		int pos = GetActorIndex(mo);
		if (pos < 1 || pos >= size)	
			return null; // Actor not present here.
		
		return Container[pos - 1].Mo;
	}
	
	private void SetupActor(Actor mo)
	{
		mo.SetInventory('MCMount', 1);
		let inv = MCMount(mo.FindInventory('MCMount', true));
		if (inv)	inv.MountInfo = self;
	}
	
	protected bool AddActor(Actor mo, Vector3 Offset, int index = -1)
	{
		if (!ValidateActor(mo))	return false;
		
		Refresh();
		int size = Container.Size();
		int pos = GetActorIndex(mo);
		
		// Actor not found.
		if (pos < 0)
		{
			let con = MCMountObject.CreateMountObject(mo, Offset);
			SetupActor(mo);
			
			if (index < 0 || index >= size)
			{
				Container.Push(con);
			}
			else
			{
				Container.Insert(index, con);
			}
			return true;
		}
		// Actor is inside but wants to change spots.
		else if (index >= 0 && pos != index)
		{
			let con = Container[pos];
			
			index = max(0, min(index, size - 1));
			
			let temp = Container[index];
			Container[index] = Container[pos];
			Container[pos] = temp;
			return true;
		}
		return false;
	}
	
	protected bool RemoveActor(Actor mo, bool cleaning = false)
	{
		int pos = GetActorIndex(mo);
		if (pos > -1)
		{
			let token = GetMountToken(mo);
			if (token && token.MountInfo == self)	
				token.MountInfo = null;
			
			if (cleaning)
			{
				Container[pos] = null;
			}
			else
			{
				Container[pos].Destroy();
				Container.Delete(pos);
			}
			return true;
		}
		return false;
	}
}
*/









/*
	Array<MCClassRelation> ClassRelations;
	Array<MCActorRelation> ActorRelations;
	
	virtual protected void SetupRelations()	
	{
		ClearRelations();
	}
	
	int CheckRelation(Class<Actor> cls, Actor mo = null)
	{	
		if (cls)
		{
			int size = ClassRelations.Size();
			
			for (int i = 0; i < size; i++)
			{
				let rel = ClassRelations[i];
				if (rel && (cls == rel.ClassType || (rel.Parent && cls is rel.ClassType)))
					return rel.Status;
			}
		}
		if (mo)
		{
			int size = Relations.Size();
			
			for (int i = 0; i < size; i++)
			{
				let rel = Relations[i];
				if (rel && (cls == rel.Mo || (rel.Parent && mo is rel.Mo.GetClass())))
					return rel.Status;
			}
		}
		return 0;
	}
	
	void SetClassRelation(Class<Actor> mo, int status, bool parent = false, int priority = 0)
	{
		if (!mo)	return;
		
		int size = ClassRelations.Size();
		
		for (int i = 0; i < size; i++)
		{
			let rel = ClassRelations[i];
			if (rel && rel.ClassType == mo)
			{
				if (status == 0 || status >= Rel_Max)
				{
					rel.Destroy();
					ClassRelations.Delete(i);
					return;
				}
				rel.Update(mo, status, parent, priority);
				return;
			}
		}
		
		let rel = MCClassRelation.CreateRelation(mo, status, parent, priority);
		if (rel)	ClassRelations.Push(rel);
	}
	
	void SetActorRelation(Actor mo, int status, int priority = 0)
	{
		if (!mo)	return;
		
		int size = ActorRelations.Size();
		
		for (int i = 0; i < size; i++)
		{
			let rel = ActorRelations[i];
			if (rel && rel.mo == mo)
			{
				if (status == 0 || status >= Rel_Max)
				{
					rel.Destroy();
					ActorRelations.Delete(i);
					return;
				}
				rel.Update(mo, status, parent, priority);
				return;
			}
		}
		
		let rel = MCActorRelation.CreateRelation(mo, status, priority);
		if (rel)	ActorRelations.Push(rel);
	}
	
	void ClearRelations(bool actors = false)
	{
		if (actors)	
		{
			for (int i = 0; i < ActorRelations.Size(); i++)
			if (ActorRelations[i])	ActorRelations[i].Destroy();
				ActorRelations.Clear();
			ActorRelations.Clear();
		}
		else
		{
			for (int i = 0; i < ClassRelations.Size(); i++)
				if (ClassRelations[i])	ClassRelations[i].Destroy();
			ClassRelations.Clear();
		}
	}
	
	void CleanRelations(bool actors = true)
	{
		if (actors)
		{
			Array<MCActorRelation> Temp; Temp.Clear();
			for (int i = 0; i < ActorRelations.Size(); i++)
			{
				let rel = ActorRelations[i];
				if (rel && rel.mo && rel.mo.health > 0)
					Temp.Push(rel);
				else if (rel)	rel.Destroy();
			}
			ActorRelations.Move(Temp);
		}
		else
		{
			Array<MCClassRelation> Temp; Temp.Clear();
			for (int i = 0; i < ClassRelations.Size(); i++)
			{
				let rel = ClassRelations[i];
				if (rel && rel.ClassType)
					Temp.Push(rel);
				else if (rel)	rel.Destroy();
			}
			ClassRelations.Move(Temp);
		}
	}
	*/