/*
Minecraft Enemy
By Major Cooke

The idea behind minecraft enemies is to replicate everything from Minecraft if
possible. This means creeper explosions, spider climbing, skeletons using weapons
and a few other cool tricks.

NOTE: The monsters are always invisible, no matter what. Only the body parts are
drawn as external actors.
*/

Class MinecraftEnemy : MinecraftEntity
{
	//==========================================================================
	// Base overrides
	//==========================================================================
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		AdjustDifficulty();
		SetupRelations();
		AttackDamagers = true;
		PrevScale = Scale;
		PrevAngs = (Angle, Pitch, Roll);
		PrevPos = Pos;
		PrevTrans = Translation;
		PrevAlpha = Alpha;
		PrevStyle = GetRenderStyle();
		PrevVel = Vel;
		DrownTimer = DrownTimerStart;
		FallDmgVel = -abs(FallDmgVel);
		MaxChaseRange = Max(MaxChaseRange, MaxTargetRange);
		DmgInfo.Used = true;
		SetOverScale(OverScale);
		StepSoundDelay = Max(1, StepSoundDelay);
	}
	
	override bool Morph(Actor activator, class<PlayerPawn> playerclass, class<MorphedMonster> monsterclass, int duration, int style, class<Actor> morphflash, class<Actor>unmorphflash)
	{
		return false;
	}
	
	override bool MorphMonster (Class<Actor> spawntype, int duration, int style, Class<Actor> enter_flash, Class<Actor> exit_flash)
	{
		return false;
	}
	
	override void Activate(Actor activator)
	{
		if (bKILLED || bDESTROYED)	return;
		
		bINVISIBLE = false;
		for (int i = 0; i < Limb.Size(); i++)
			if (Limb[i])	Limb[i].Activate(activator);
		
		UpdateLimbs();
		A_SetShootable();
		A_ChangeLinkFlags(0);
		Super.Activate(activator);
	}
	
	override void Deactivate(Actor activator)
	{
		if (bKILLED || bDESTROYED)	return;
		
		bINVISIBLE = true;
		for (int i = 0; i < Limb.Size(); i++)
			if (Limb[i])	Limb[i].Deactivate(activator);
		
		A_UnsetShootable();
		A_ChangeLinkFlags(1);
		
		Super.Deactivate(activator);
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		return !(bDORMANT && other is 'MinecraftEnemy');
		
	}
	
	override bool CanResurrect(Actor other, bool passive)
	{	return false;	}
	private int Lifetime;
	private bool wasBright;
	override void Tick()
	{
		// Process nothing if destroyed.
		if (bDESTROYED)	return;
		
		// Destroy it if peaceful difficulty is activated, and the monster can
		// despawn on peaceful. Dead monsters will despawn on their own though.
		// Entities that won't despawn naturally are neutral/friendly ones like
		// iron golems, villagers, etc.
		
		if (!bKILLED &&
			(MCC_Peaceful && 
			(MCC_PeacefulBehavior <= CV_Despawn ||
			(MCC_PeacefulBehavior == CV_Minecraft && PeacefulDespawn > 0))))
		{
			Destroy();
			return;
		}
		
		Super.Tick();
		
		// Process nothing else if the actor died.
		if (IsFrozen() || bKILLED)
			return;
			
		if (!Target)	Pitch = 0;
		
		if (!bDORMANT)
		{
			if (Lifetime < 5)	Lifetime++;
			if (!DmgInfo.Used)
			{
				DmgInfo.used = true;
				DamageReact(DmgInfo.I, DmgInfo.S, DmgInfo.damage, DmgInfo.dmg, DmgInfo.mod, DmgInfo.flags, DmgInfo.angle, DmgInfo.secdmg);
			}
			//----------------------------------------------------------------------
			// Fall/Slime/Lava/Drowning damage handling.
			//----------------------------------------------------------------------
			wasOnGround = OnGround;
			OnGround = ((Pos.Z <= FloorZ || bONMOBJ));
			
			Sector sec = CurSector;
			if (BlockingFloor)	sec = BlockingFloor;
				
			if (MCC_EnvironmentDamage)
			{
				// if fall damage threshold is not 0 and
				// velocity is cancelled out and
				// the prior velocity descends below the threshold and
				// the sector doesn't cancel falling damage,
				// deal fall damage.
				if (MCC_FallDamage &&
					FallDmgVel != 0.0 && 
					Vel.Z >= 0.0 && PrevVel.Z <= FallDmgVel &&
					!(sec.Flags & Sector.SECF_NOFALLINGDAMAGE))
				{
					if (DoFallDamage())
					{
						SectorDamageTimer = 0;
						if (bKILLED)	return;
					}
				}
				
				// Follow regular Doom rules for damaging sectors. We must use 
				// GetZAt here since this actor could otherwise be standing on a
				// connected sector that's not actually touching a floor with
				// damage.
				if (MCC_SectorDamage && Pos.Z <= GetZAt(0))
				{
					int DmgAmt = sec.DamageAmount,
						DmgInt = sec.DamageInterval;
					
					if (DmgAmt && DmgInt > 0 && 
						++SectorDamageTimer >= DmgInt)
					{
						if (DmgAmt < 0)	GiveBody(DmgAmt);
						else			
						{
							DmgInfo.secdmg = true;
							DmgAmt = GetDamageFactor("DamageSector", DmgAmt);
							if (DmgAmt > 0)
								DamageMobj(null, null, DmgAmt, sec.DamageType, DMG_THRUSTLESS);
						}
						
						if (bKILLED)	return;
						
						SectorDamageTimer = 0;
					}
				}
			
				//------------------------------------------------------------------
				// Drowning
				//------------------------------------------------------------------
				if (MCC_Drowning && WaterLevel >= 3 && !bINVULNERABLE && !IsImmune("Drowning"))
				{
					if (DrownTimer > 0)	DrownTimer--;
					else
					{
						DrownDamage++;
						DrownTimer = Second - 1;
						DmgInfo.secdmg = true;
						DamageMobj(null, null, min(DrownDamage, TELEFRAG_DAMAGE - 1), "Drowning", DMG_NO_ARMOR);
						
						if (bKILLED)	return;
					}
				}
				else if (DrownTimer < DrownTimerStart)
				{
					DrownDamage = 0;
					DrownTimer += 3;
					DrownTimer = Min(DrownTimer, DrownTimerStart);
				}
			}
			//------------------------------------------------------------------
			// Play an active sound every 5-6 seconds.
			//------------------------------------------------------------------
			if (--ActiveSoundDelay < 1)
			{
				ActiveSoundDelay += (Second * 4) + irandom(0,Second * 2);
				if (ActiveSound != "")
					A_StartSound(ActiveSound, CHAN_VOICE, CHANF_OVERLAP);
			}
			//------------------------------------------------------------------
			//
			//------------------------------------------------------------------
			if (AttackDelay > 0)
				AttackDelay--;
			//------------------------------------------------------------------
			// Handle damage timer & translation changes.
			//------------------------------------------------------------------
			if (DamageTimer > 0)
			{
				if (--DamageTimer < 1)
				{
					Translation = TempTranslation;
					bBRIGHT = Default.bBRIGHT;
				}
				else bBRIGHT = true;
			}
		}
		
		//----------------------------------------------------------------------
		// Update the various properties to affect the various segments.
		// Adjust the scale as needed and call the functions.
		//----------------------------------------------------------------------
		Angs = (Angle, Pitch, Roll);		
		
		if (!bDORMANT && (!(vel ~== (0,0,0)) || !(Pos ~== PrevPos)))
		{
			PosLen = level.Vec3Diff(PrevPos, Pos).Length();
			VelLen = vel.Length();
			VelPosLen = VelLen + PosLen;
			
		}
		else VelLen = PosLen = VelPosLen = 0;
		
		CurStyle = GetRenderStyle();
		/*
		if ((LifeTime < 5) ||
			!(velposlen ~== 0) ||
			PrevAngs != Angs ||
			PrevAlpha != alpha || 
			PrevStyle != CurStyle || 
			PrevTrans != Translation)
		{
			
		}
		*/
		UpdateLimbs();
		
		PrevTrans = Translation;
		PrevScale = Scale;
		PrevAngs = Angs;
		PrevPos = Pos;
		PrevAlpha = Alpha;
		PrevStyle = CurStyle;
		PrevVel = Vel;
	}
	
	private LastDamaged DmgInfo;
	protected Array<Actor> Damagers;
	private uint TempTranslation;
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (bKILLED)	return 0;
	
		double prevz = Vel.Z;
		int prevhp = health;
		int dmg = Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		
		
		Actor i = inflictor, s = source;
		
		// Determining Pain
		// 
		
		bool painless = bNOPAIN || 
			((flags & DMG_NO_PAIN) || (i && i.bPAINLESS) || (!i && s && s.bPAINLESS));
			
		bool dopain = !painless && 
					((dmg > 0 || (damage > 0 && bALLOWPAIN)) || (
					(i && (i.bCAUSEPAIN || i.bFORCEPAIN)) || 
					(s && (s.bCAUSEPAIN || s.bFORCEPAIN))));
		
		if (dmg > 0 && s && Damagers.Find(s) >= Damagers.Size())
		{
			Damagers.Push(source);
		}
		
		if (MCC_Debug == 1 && s && !(s is 'PlayerPawn'))
		{
			Name src = "Null";
			Name inf = "Null";
			if (s)	src = s.GetClassName();
			if (i)	inf = i.GetClassName();
			Console.Printf("%d: %s from %s, %s", dmg, GetClassName(), src, inf);
		}
		
		
		// Obviously don't react if the monster died.
		if (!bKILLED)
		{
			if (Targetable(s, false))
			{
				int rel = CheckClassRelation(s.GetClass());
				if (rel <= Rel_None || rel == Rel_Neutral || rel == Rel_Hated)
				{
					SetActorRelation(s, Rel_Hated);
				}
			}
			
			// Capable of reacting to damage again?
			if (DamageTimer < 1)
			{
				
				// Is eligible for pain?
				if (dopain)
				{
					DamageTimer = 17;
					TempTranslation = Translation;
					bBRIGHT = true;
					
					SetTranslation("DamageRed");
					A_StartSound(PainSound, CHAN_VOICE, CHANF_OVERLAP);
					
					double ang = angle;
					
					// Bounce the actor if taking falling damage.
					if (damageType == 'Falling')
					{
						flags &= ~DMG_THRUSTLESS;
						flags |= DMG_USEANGLE;
						ang += 180;
					}
					
					// Disable thrusting if no inflictor/source, unless falling.
					if (!(flags & DMG_THRUSTLESS))
					{		
						if ((!i && !s) || (i && i.bNODAMAGETHRUST))
						{
							if (!(flags & DMG_USEANGLE))
								flags |= DMG_THRUSTLESS;
						}
					}
					
					// Let explosions do their own thrusting.
					if (!(flags & (DMG_THRUSTLESS|DMG_EXPLOSION)))
					{	
						if (!bNOGRAVITY && Gravity > 0.0)
						{
							Vector2 v = Vel.XY;
							if (prevz <= 1.0)
								Vel.Z += 7.0;
							
							OnGround = false;
							
							if (flags & DMG_USEANGLE)
								ang = angle;
							else if (s)	ang = AngleTo(s);
							else if (i)	ang = AngleTo(i);
							Thrust(-1, ang);
						}
					}
				}
				// Record the damage so the monster can do any special reactions.
				if (dmg > 0)
				{
					DmgInfo.i = inflictor;
					DmgInfo.s = source;
					DmgInfo.damage = damage;
					DmgInfo.dmg = dmg;
					DmgInfo.mod = DamageType;
					DmgInfo.flags = flags;
					DmgInfo.angle = angle;
					DmgInfo.used = false;
				}
			}
		}
		return dmg;
	}
	
	//private MC_LineContainer CurLines;
	//bool FromDmgSector;
	/*
	override bool CanCrossLine(Line crossing, int side, Vector3 Next)
	{
		if (!MCC_EnvironmentDamage || !MCC_SectorDamage || ValidateTarget())	return true;
	
		if (Next ~== pos)
			return true;
		
		Vector2 RH = (radius, height);
		
		let osec = MC_Map.GetIntersectingSectors(self, RH);
		if (!osec)	return true;
		int size = osec.Size();
		if (size < 1)	return true;
		
		// If we're standing in a damaging sector, allow getting out of it.
		for (int i = 0; i < size; i++)
		{
			Sector s = osec.Sectors[i].sec;
			if (s.DamageAmount > 0 && GetDamageFactor(s.DamageType, s.DamageAmount) > 0)
				return true;
		}
		
		// Now check if we're entering a damaging sector from a non-damaging sector.
		// If so, don't cross.
		let nsec = MC_Map.GetIntersectingSectors(self, RH, usepos: true, Next + Vel);
		if (!nsec)	return true;
		
		size = nsec.Size();
		if (size < 1) return true;
		
		for (int i = 0; i < size; i++)
		{
			Sector s = nsec.Sectors[i].sec;
			if (s.DamageAmount > 0 && GetDamageFactor(s.DamageType, s.DamageAmount) > 0)
				return false;
		}
		return true;
	}
	*/
	//--------------------------------------------------------------------------
	
	
	private bool appended;
	protected void PreDie(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		DeathPos = pos;
		
		// This is primarily to stop D(E)4D resources from dropping if never killed
		// by a player. Actors with NOINTERACTION never drop resources on death.
		// They drop by WorldThingDied so they can drop from any monster.
		// This is needed because otherwise, they would rain upgrades.
		
		// This is a temporary solution and a bit of a hack. Eventually, I'll
		// introduce something on DE4D's side and remove it later.
		
		Dismount();
		A_StopALlSounds();
		
		if (!appended && (dmgflags & DMG_EXPLOSION))
		{
			let src = MinecraftEnemy(source);
			if (src is 'MCCreeper' && src.Damagers.Size() > 0)
			{
				appended = true;
				Damagers.Append(src.Damagers);
			}
		}
		
		
		if (!(source is 'PlayerPawn'))
		{
			bool Drops = false;
			for (int i = 0; i < Damagers.Size(); i++)
			{
				if (Damagers[i] is 'PlayerPawn')
				{
					Drops = true;
					break;
				}
			}
			if (!Drops)
			{
				bNOINTERACTION = true;
				A_ChangeLinkFlags(1);
			}
		}
		
		A_NoBlocking(false);
		if (MCC_DropItems)
			DropItems(source, inflictor, MeansOfDeath);
	}
	
	protected void PostDie(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		if (Damagers.Size() > 0)
		{
			bNOINTERACTION = true;
		}
		// Boing!
		if (MeansOfDeath == 'Falling')
		{
			Vel.Z = abs(PrevVel.Z);
		}
		VelLen = Vel.Length();
		Gib(VelLen);
		SetOrigin(DeathPos, false);
		A_Stop();
		A_Scream();
	}
	
	private Vector3 DeathPos;
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		PreDie(source, inflictor, dmgflags, MeansOfDeath);
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
		PostDie(source, inflictor, dmgflags, MeansOfDeath);
	}
	
	override void OnDestroy()
	{
		Dismount();
		DestroyLimbs();
		RemoveGoal();
		Super.OnDestroy();
	}
		
	States
	{
	Spawn:
		TNT1 A 35;
	Idle:
		---- A 0 A_Jump(256, irandom(1, 4));
		---- AAAAAAAAAA 17 Look();
	IdleMove:
		---- A 0 
		{
			LookTimer = 0;
			return A_Jump(256, irandom(1, 35*2));
		}
		---- AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		---- AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		---- AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		---- AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		Goto Idle;
	Death:
		TNT1 A 35;
		Stop;
	}
}

Class MCGoal : MinecraftEntity
{
	Default
	{
		+NOGRAVITY
		+THRUACTORS
		+DONTTHRUST
		+NOTONAUTOMAP
		+DONTBLAST
	}
	override void OnDestroy()
	{
		A_SpawnItemEx('MCExplosion', flags: SXF_NOCHECKPOSITION);
		Super.OnDestroy();
	}
	
	States
	{
	Spawn:
		TNT1 A 8 A_SpawnItemEx('MCExplosionSmoke', ffrandom(0,3), 0, ffrandom(1,3), ffrandom(0,2), 0, ffrandom(0, 2), irandom(0,359), SXF_NOCHECKPOSITION);
		Wait;
	}
}

//------------------------------------------------------------------------------
// Subtypes
//------------------------------------------------------------------------------

Class MCUndead : MinecraftEnemy
{
	Default
	{
		MinecraftEnemy.MobType M_Undead;
		DamageFactor "Poison", 0.0;
	}
}

Class MCAnthropod : MinecraftEnemy
{
	Default
	{
		MinecraftEnemy.MobType M_Anthropod;
		DamageFactor "Poison", 0.0;
	}
}

Class MCBoss : MinecraftEnemy
{
	Default
	{
		+BOSS
		MinecraftEnemy.MobType M_Normal;
		DamageFactor "DamageSector", 0.0;
		DamageFactor "Poison", 0.0;
		DamageFactor "Wither", 0.0;
		DamageFactor "Drowning", 0.0;
		DamageFactor "Falling", 0.0;
	}
}

Class MCMobLineTracer : LineTracer
{
	
}