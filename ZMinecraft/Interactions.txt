Class MCClassRelation play
{
	Class<Actor> ClassType;
	int Status, Priority;
	bool Parent;
	
	static MCClassRelation CreateRelation(Class<Actor> who, int status, bool parent = false, int priority = 0)
	{
		if (!who)	return null;
		
		let r = new('MCClassRelation');
		r.Update(who, status, parent, priority);
		return r;
	}
	
	void Update(Class<Actor> who, int status, bool parent = false, int priority = 0)
	{
		if (!who)	return;
		
		self.ClassType = who;
		self.Status = status;
		self.Priority = priority;
		self.Parent = parent;
	}
}

Class MCActorRelation play
{
	Actor Mo;
	int Status, Priority;
	bool Parent;
	
	
	static MCActorRelation CreateRelation(Actor who, int status, int priority = 0)
	{
		if (!ValidateActor(who))	return null;
		
		let r = new('MCActorRelation');
		r.Update(who, status, priority);
		return r;
	}
	
	protected static bool ValidateActor(Actor mon)
	{
		return (mon && !mon.bKILLED);
	}
	
	bool Update(Actor who, int status, int priority = 0)
	{
		if (!ValidateActor(who))	return false;
		
		self.Mo = who;
		self.Status = status;
		self.Priority = priority;
		return true;
	}
}

Class MCRelationManager play
{
	private Actor Owner;
	bool OnlyListed;
	private Array<MCClassRelation> Classes;
	private Array<MCActorRelation> Actors;
	
	static MCRelationManager Create(Actor mo)
	{
		if (!mo || mo.bDESTROYED)	return null;
		let m = new('MCRelationManager');
		m.Init(mo);
		return m;
	}
	
	protected void Init(Actor mo)
	{
		Owner = mo;
		Clear();
	}
	
	Actor GetOwner() const { return Owner; }
	bool SetOwner(Actor mo) 
	{ 
		if (!mo)	return false;	
		Owner = mo;	return true; 
	}
	
	
	/*--------------------------------------------------------------------------
	Sets a relationship up with another actor type. If one is already established,
	modifies it instead.
	
	*who
		The class actor to have a custom relation with.
		
	*status
		The type of status to have. Can be one of the following.
		
		-Rel_None: Normal relationship. Not an active target but can infight if
			provoked. Will attack players by default unless friendly.
		-Rel_Neutral: Like none, but won't attack players set with this.
		-Rel_Hate: Attack on sight. Priority will take into account if this target
			is a higher threat.
		-Rel_Ignored: Doesn't retaliate when attacked.
		-Rel_Afraid: Runs away from this actor and doesn't attack anything else
			until it's out of range.
		
	*priority
		Only used by Rel_Hate status. When searching for enemies to target, 
		the higher priority targets will be searched for first.
	--------------------------------------------------------------------------*/
	void SetClassRelation(Class<Actor> who, int status, bool parent = false, int priority = 0)
	{
		if (!who) return;
		
		int size = Classes.Size();
		for (int i = 0; i < Classes.Size(); i++)
		{
			if (!Classes[i])	continue;
			if (Classes[i].ClassType == who)
			{
				Classes[i].Status = status;
				Classes[i].Parent = parent;
				Classes[i].Priority = priority;
				return;
			}
		}
		
		let rel = MCClassRelation.CreateRelation(who, status, parent, priority);
		if (rel)	Classes.Push(rel);
	}
	
	void RemoveClassRelation(Class<Actor> who)
	{
		for (int i = 0; i < Classes.Size(); i++)
		{
			if (Classes[i] && Classes[i].ClassType == who)
			{
				Classes[i].Destroy();
				Classes.Delete(i);
				return;
			}
		}
	}
	
	int FindClassRelation(Class<Actor> who) const
	{
		if (!who || Classes.Size() < 1)	return 0;
		
		for (int i = 0; i < Classes.Size(); i++)
		{
			let r = Classes[i];
			if (r && (r.ClassType == who || (r.Parent && who is r.ClassType)))
				return r.Status;
		}
		return 0;
	}
	
	// Cleans the array of any nullz (basically memory management).
	void CleanClasses()
	{
		int size = Classes.Size();
		if (size < 1)	return;
		
		Array<MCClassRelation> temp; temp.Clear();
		for (int i = 0; i < size; i++)
		{
			if (Classes[i])
			{
				if (Classes[i].ClassType)
					temp.Push(Classes[i]);
				else Classes[i].Destroy();
			}
		}
		Classes.Move(temp);
	}
	
	//--------------------------------------------------------------------------
	// Actor variant
	// 
	// The difference between this and classes is this sets for specific actors
	// instead of an entire blanket carpet.
	//--------------------------------------------------------------------------
	
	void SetActorRelation(Actor who, int status, int priority = 0)
	{
		if (!who) return;
		
		int size = Actors.Size();
		for (int i = 0; i < Actors.Size(); i++)
		{
			if (!Actors[i])	continue;
			if (Actors[i].mo == who)
			{
				Actors[i].Status = status;
				Actors[i].Priority = priority;
				return;
			}
		}
		
		let rel = MCActorRelation.CreateRelation(who, status, priority);
		if (rel)	Actors.Push(rel);
	}
	
	void RemoveActorRelation(Actor who) 
	{
		for (int i = 0; i < Actors.Size(); i++)
		{
			if (Actors[i] && Actors[i].mo == who)
			{
				Actors[i].Destroy();
				Actors.Delete(i);
				return;
			}
		}
	}
	
	int FindActorRelation(Actor who) const
	{
		if (!who || Actors.Size() < 1)	return 0;
		
		for (int i = 0; i < Actors.Size(); i++)
		{
			let r = Actors[i];
			if (r)
			{
				if (who == r.mo || (r.Parent && who is r.mo.GetClass()))
					return r.Status;
			}
		}
		return 0;
	}
	
	void CleanActors()
	{
		int size = Actors.Size();
		if (size < 1)	return;
		
		Array<MCActorRelation> temp; temp.Clear();
		for (int i = 0; i < size; i++)
		{
			if (Actors[i])
			{
				let mo = Actors[i].mo;
				if (mo && mo.health > 1)
					temp.Push(Actors[i]);
				else Actors[i].Destroy();
			}
		}
		
		Actors.Move(temp);
	}
	//==========================================================================
	// Both
	//==========================================================================
	
	//--------------------------------------------------------------------------
	// Checks if any recorded actors/classes have the status type.
	// At least one is needed to return true. Any at all.
	bool CheckStatusType(int status) const
	{
		if (status <= Rel_None || status > Rel_Max || 
			(Classes.Size() < 1 && Actors.Size() < 1))
			return false;
		
		// Just search for any type that has the desired status.
		int size = Actors.Size();
		for (int i = 0; i < size; i++)
		{
			let r = Actors[i];
			if (r && r.Mo && r.Status == status)
				return true;
		}
		
		size = Classes.Size();
		for (int i = 0; i < size; i++)
		{
			let r = Classes[i];
			if (r && r.ClassType && r.Status == status)
				return true;
		}
		return false;
	}
	
	//--------------------------------------------------------------------------
	// Fills array 'act' with any actors that have the matching 'status' type.
	void FindStatusActor(int status, out Array<MCActorRelation> act)
	{
		act.Clear();
		
		if (status < 1 || status >= Rel_Max)	return;
		
		int size = Actors.Size();
		for (int i = 0; i < size; i++)
		{
			let rel = Actors[i];
			if (rel && rel.Status == status && rel.mo)
				act.Push(rel);
		}
	}
	
	//--------------------------------------------------------------------------
	// Same as FindStatusActor but for classes.
	void FindStatusClass(int status, out Array<MCClassRelation> cls)
	{
		cls.Clear();
		
		if (status < 1 || status >= Rel_Max)	return;
		
		int size = Classes.Size();
		for (int i = 0; i < size; i++)
		{
			let rel = Classes[i];
			if (rel && rel.Status == status && rel.ClassType)
				cls.Push(rel);
		}
	}
	
	int Size(int whom = Res_Both) const
	{ 	
		Switch(whom)
		{
			Case Res_Actors:	return Actors.Size();
			Case Res_Classes:	return Classes.Size();
			Default: 			return Actors.Size() + Classes.Size();
		}
		return 0;
	}
	void Clear(int whom = Res_Both)
	{
		if (whom != Res_Classes)
		{
			for (int i = 0; i < Actors.Size(); i++)
				if (Actors[i])	Actors[i].Destroy();
			Actors.Clear(); 
		}
		if (whom != Res_Actors)
		{
			for (int i = 0; i < Classes.Size(); i++)
				if (Classes[i])	Classes[i].Destroy();
			Classes.Clear();
		}
	}
}







//==============================================================================
//==============================================================================
// Relationship functions
//==============================================================================
//==============================================================================

extend class MinecraftEnemy
{
	//==========================================================================
	// Relation stuff
	//
	// Used to determine aggressiveness, passiveness, and neutrality towards
	// others.
	//==========================================================================
	protected MCRelationManager Relations;
	protected bool OnlyListed, AttackDamagers;
	
	
	//--------------------------------------------------------------------------
	// If a relationship manager is needed, call this to perform appropriate
	// steps for setting up.
	virtual protected void SetupRelations(bool create = false)
	{	
		if (create)
		{
			if (Relations)	Relations.Clear();
			else Relations = MCRelationManager.Create(self);
		}
	}
	
	//--------------------------------------------------------------------------
	// Convenience functions for relationships.
	int CheckClassRelation(Class<Actor> mo) const
	{	return (!mo || !Relations) ? 0 : Relations.FindClassRelation(mo);	}
	
	int CheckActorRelation(Actor mo) const
	{	return (!mo || !Relations) ? 0 : Relations.FindActorRelation(mo);	}
	
	int CheckRelation(Actor mo, Class<Actor> cls = null) const
	{
		if (!Relations || (!mo && !cls))	return 0;
		
		if (mo && !cls)	cls = mo.GetClass();
		
		int AR = Relations.FindActorRelation(mo);
		if (AR >= Rel_None)	return AR;
		
		return Relations.FindClassRelation(cls);
	}
	
	void SetClassRelation(Class<Actor> mo, int status, bool parent = false, int priority = 0)
	{
		if (mo && Relations)
			Relations.SetClassRelation(mo, status, parent, priority);
	}
	
	void SetActorRelation(Actor mo, int status, int priority = 0)
	{
		if (mo && Relations)
			Relations.SetActorRelation(mo, status, priority);
	}
	
	void ClearRelations(int whom = Res_Both)
	{
		if (Relations) Relations.Clear(whom);
	}
	
	// No need for a CleanClasses because loading a saved game with missing
	// classes shouldn't ever be done.
	void CleanActors()
	{
		if (Relations) Relations.CleanActors();
	}
	
	bool CheckStatusType(int status) const
	{
		if (!Relations || status <= Rel_None || status >= Rel_Max)
			return false;
			
		return Relations.CheckStatusType(status);
	}
	
	//--------------------------------------------------------------------------
	// Searches for potential actors to target.
	// Takes an actor array and pushes viable actors into it that have a status.
	bool SearchActors(out Array<Actor> Acts, Vector2 RH, double fov = 90, 
		bool sight = true)
	{
		Acts.Clear();
		
		// 
		if (!CheckStatusType(Rel_Hated) && !CheckStatusType(Rel_Afraid))
			return false;
		
		let it = BlockThingsIterator.CreateFromPos(
			pos.x, pos.y, pos.z - RH.X, RH.Y + RH.X * 2, RH.X, false);
			
		Actor mo = null;
		
		while (it.Next())
		{
			mo = it.thing;
			if (!mo || !Targetable(mo))
				continue;
			
			if (sight && (!CheckSight(mo, CSFlags) ||
				(!bLOOKALLAROUND && fov < 360 && DeltaAngle(Angle, AngleTo(mo)) < fov)))
				continue;
			
			Acts.Push(mo);
		}
		return true;
	}
	
	//==========================================================================
	// Handles range and calls Targetable to make sure the target is valid.
	//
	// *clear
	//		If the target isn't valid, clears it if true.
	//
	// *range
	//		If > 0, overrides the chase range.
	
	// *chasing
	//		Only set to true when called by Chase, otherwise this can cause issues.
	// 
	// *relate
	//		If true, checks if targetable via relationships.
	// 
	// *TargetOnly
	//		If true, ignores Last<Heard/Enemy/LookActor> pointers.
	//==========================================================================
	private int OOSTimer; // Out of sight timer
	protected int OOSTimeOut;
	const LookTimerDefault = 17;
	
	protected bool ValidateTarget(bool clear = false, double range = 0, bool chasing = false, 
	bool relate = true, bool TargetOnly = false)
	{
	
		if (!Target)
		{
			if (Tracer)	Target = Tracer;
			else if (Goal)	Target = Goal;
			else return false;
		}
		
		if (Target == self)
		{
			ClearTarget();
			return false;
		}
		
		MaxChaseRange = Max(MaxChaseRange, MaxTargetRange);
		
		double ChaseRange = (range <= 0) ? MaxChaseRange : range;
		if (Tracer && Target == Tracer)		ChaseRange *= 2;
		else if ((Goal && Target == Goal))	return true;
		
		bool targetable = (Targetable(Target, relate));
		
		if (!TargetOnly && !targetable)
		{
			Actor temp[3] = { LastEnemy, LastHeard, LastLookActor };
			
			for (int i = 0; i < temp.Size(); i++)
			{
				targetable = (Targetable(temp[i], relate));
				if (targetable)
				{
					Target = temp[i];
					break;
				}
			}
		}
		
		// We have a target. If the actor's out of sight/range for more than
		// the timeout (5 seconds), clear the target.
		if (targetable)
		{
			bool sight = CheckSight(Target, CSFlags);
			if (Distance3DSquared(Target) > (ChaseRange ** 2) ||
				(chasing && !sight))
			{
				OOSTimer++;
				
				if (!chasing || OOSTimer >= OOSTimeOut)
				{
					targetable = false;
					OOSTimer = 0;
				}
			}
			else OOSTimer = 0;
		}
		
		if (!targetable)
		{
			if (clear)	
				ClearTarget();
			
			OOSTimer = 0;
		}
		return targetable;
	}
	
	//--------------------------------------------------------------------------
	// Handles filtering of applicable targets, including checking the 
	// relationship list.
	//--------------------------------------------------------------------------
	override bool OkayToSwitchTarget(Actor other)
	{
		// Keep the old target around just in case.
		Actor OldTarget = Target;
	//	Target = other;	
		bool ret = (Super.OkayToSwitchTarget(other) && Targetable(other));
	//	Target = OldTarget;
		if (ret)	OOSTimer = 0;
		return ret;
	}
	
	protected bool Afraid;
	virtual bool Targetable(Actor mo, bool relate = true) const
	{
		// Doesn't exist, is self or is passive.
		if (!mo || mo == self || passive)	
			return false;
		
		// The actor's a goal so yes, it is targetable.
		if (Goal && mo == Goal)
			return true;
		
		//  Dead, unshootable or not targetable.
		if (mo.bKILLED || !mo.bSHOOTABLE ||	mo.bNEVERTARGET || (mo.bNOTARGET && !bFRIENDLY) ||
			mo.bDORMANT)
			return false;
		
		// Peaceful mode disallows targeting players.
		if (MCC_Peaceful && mo is 'PlayerPawn')
			return false;
			
		// Don't target players that are (totally) frozen because this could fuck up
		// scripts badly and get them to kill a defenseless player.
		if ((mo.Player && (mo.Player.Cheats & (CF_NOTARGET|CF_FROZEN|CF_TOTALLYFROZEN))))
			return false;
		
		return (!relate || CheckRelationTarget(mo));
	}
	
	bool CheckRelationTarget(Actor mo) const
	{
		if (!mo)		return false;
		if (mo == Goal)	return true;
		
		if (Relations && Relations.Size() > 0)
		{
			int ret = CheckRelation(mo);
			
			Switch(ret)
			{
				// Afraid of the other
				Case Rel_Afraid:
				// Hates the actor, will pursue
				Case Rel_Hate:		return true;
				// Akin to having NEVERTARGET.
				Case Rel_Ignored:	return false;
				// 
				Case Rel_Neutral:
				Case Rel_None:
				{
					if (IsTeamMate(mo))
						return false;
					
					if (ret == Rel_Neutral)
						return CheckActorDamager(mo);
					if (ret <= Rel_None)
					{
						if (bFRIENDLY && !mo.bFRIENDLY)
							return true;
						else if (mo is 'PlayerPawn')	return true;
					}
				}
				Default:
					return CheckActorDamager(mo);
			}
			return false;
		}
		return true;
	}
	
	bool CheckActorDamager(Actor mo) const
	{	return mo && ((AttackDamagers && Damagers.Find(mo) < Damagers.Size()));	}
	
	protected void ClearTarget(Actor mo = null)
	{
		if (!mo)	
		{
			mo = Target;
			if (!mo)	return;
		}
		LastEnemy = null;
		if (Tracer == mo)
			Tracer = null;
		SetActorRelation(mo, Rel_None);
		A_ClearTarget();
	}
}

//==============================================================================
//==============================================================================
// (WIP) Mount/Rider Systems
//
// This handles all things dealing with mounting and riding others. 
// Currently a WIP and still in need of more work.
//==============================================================================
//==============================================================================

Class MCMountObject play
{
	Actor Mo;
	Vector3 Offset;
	
	static MCMountObject CreateMountObject(Actor mo, Vector3 off)
	{
		if (!mo || mo.health < 1)
			return null;
			
		let mobj = new('MCMountObject');
		mobj.Mo = mo;
		mobj.Offset = off;
		return mobj;
	}
}

Class MCMountInfo : Thinker
{
	const CleanTimer = 35;
	
	private double TotalHeight; // Height of all combined actors.
	private int Timer;
	
	private Array<MCMountObject> Container;
//	private Array<Int> Flags;

	static MCMountInfo CreateMountInfo()
	{
		let info = new('MCMountInfo');
		info.Init();
		return info;
	}
	
	protected void Init() 
	{
		Container.Clear();
	}
	
	override void Tick()
	{
		if (bDESTROYED)	return;
		
		if (++Timer >= CleanTimer)
		{
			Timer = 0;
			Refresh();
			
			int size = Container.Size();
			if (size < 1)
			{
				Destroy();
				return;
			}
		}
	}
	
	protected void Refresh()
	{
		Timer = 0;
		
		Array<MCMountObject> temp; temp.Clear();
		int size = Container.Size();
		for (int i = 0; i < size; i++)
		{
			let con = Container[i];
			if (con && con.Mo)
			{
				if (con.Mo.Health > 0)
				{
					temp.Push(con);
					continue;
				}
				else RemoveActor(con.Mo, true);
			}
		}
		Container.Move(temp);
	}

	// Bottom-most actor (the one carrying the rest)
	Actor GetBottom() 	
	{	
		int size = Container.Size();
		if (size < 1)	return null;
		return Container[0].Mo;
	}
	
	// Top-most actor.
	Actor GetTop()
	{	
		int size = Container.Size();
		if (size < 1)	return null;
		return Container[size - 1].Mo;
	}
	
	static bool ValidateActor(Actor mo)
	{
		return (mo && mo.health > 0);
	}
		
	// Checks if an actor is already mounted on a chain.
	static MCMountInfo GetMountInfo(Actor mo)
	{
		return null;
	}
	
	//--------------------------------------------------------------------------
	// DoMount
	//
	// Attempts to set a rider atop a mount.
	//
	// Parameters:
	// 
	// *Rider
	//	The one to ride atop the Mount.
	//
	// *Mount
	//	The one to be ridden by the Rider.
	// 
	// *Offset
	//	The relative positional offsets (at least for XY).
	// 
	// *Flags
	//	-MTF_TOMOUNT: Moves the Rider to the Mount's chain.
	//	-MTF_TORIDER: Moves the Mount to the Rider's chain.
	//--------------------------------------------------------------------------
	
	static bool DoMount(Actor Rider, Actor Mount, Vector3 Offset, int flags = MTF_TOMOUNT)
	{
		if (!Rider || !Mount)	return false;
		
		// Check if the actor is already mounted elsewhere. This requires some
		// special handling in order to make sure it's properly set up. Flags
		// determine the chain to attach to.
		let rinfo = GetMountInfo(Rider);
		let minfo = GetMountInfo(Mount);
		
		bool ToMount = (flags & MTF_TOMOUNT);
		bool ToRider = (flags & MTF_TORIDER);
		
		// Remove them both from their chains and start a new one.
		if (ToMount && ToRider)
		{
			if (minfo)	Dismount(Mount, minfo);
			if (rinfo)	Dismount(Rider, rinfo);
			
			let info = CreateMountInfo();
			info.AddActor(Mount, (0,0,0));
			info.AddActor(Rider, Offset);
		}
		// Peel the rider off the current and stick it on top of the mount.
		else if (ToMount)
		{
			if (!minfo)	
			{
				minfo = CreateMountInfo();
				minfo.AddActor(Mount, (0,0,0));
			}
			if (rinfo != minfo)	Dismount(Rider, rinfo);
			minfo.AddActor(Rider, Offset, minfo.GetActorIndex(Mount) + 1);
		}
		// Take the mount away from their stack and stick'em under the rider.
		else if (ToRider)
		{
			if (!rinfo)
			{
				rinfo = CreateMountInfo();
				rinfo.AddActor(Rider, Offset);
			}
			if (rinfo != minfo)	Dismount(Mount, minfo);
			rinfo.AddActor(Mount, (0,0,0), Max(0, rinfo.GetActorIndex(Rider) - 1));
		}
		/*
		else if (!GetMount(Rider) && !GetRider(Mount))
		{
			
			let info = CreateMountInfo();
			info.AddActor(Mount, (0,0,0));
			info.AddActor(Rider, Offset);
		}
		*/
		else return false;
		
		return true;
	}
	
	static bool Dismount(Actor mo, MCMountInfo info = null)
	{
		if (!mo)	return false;
		
		if (!info)		info = GetMountInfo(mo);
		return (info) ? info.RemoveActor(mo) : false;
	}
	
	//--------------------------------------------------------------------------
	// Gets the position of the actor in the array.
	int GetActorIndex(Actor mo)
	{
		if (!mo)	return -1;
		
		int size = Container.Size();
		if (size < 1)	return -1;
		
		for (int i = 0; i < size; i++)
		{
			if (Container[i].Mo == mo)
				return i;
		}
		
		return -1;
	}
	
	// Get the actor riding this actor.
	Actor GetRider(Actor mo)
	{
		if (!mo)	return null;
		
		int size = Container.Size();
		int pos = GetActorIndex(mo);
		if (pos < 0 || pos >= size - 1)	
			return null; // Actor not present here.
		
		return Container[pos + 1].Mo;
	}
	// Get the actor being ridden.
	Actor GetMount(Actor mo)
	{
		if (!mo)	return null;
		
		int size = Container.Size();
		int pos = GetActorIndex(mo);
		if (pos < 1 || pos >= size)	
			return null; // Actor not present here.
		
		return Container[pos - 1].Mo;
	}
	
	private void SetupActor(Actor mo)
	{
		/*
		mo.SetInventory('MCMount', 1);
		let inv = MCMount(mo.FindInventory('MCMount', true));
		if (inv)	inv.MountInfo = self;
		*/
	}
	
	protected bool AddActor(Actor mo, Vector3 Offset, int index = -1)
	{
		if (!ValidateActor(mo))	return false;
		
		Refresh();
		int size = Container.Size();
		int pos = GetActorIndex(mo);
		
		// Actor not found.
		if (pos < 0)
		{
			let con = MCMountObject.CreateMountObject(mo, Offset);
			SetupActor(mo);
			
			if (index < 0 || index >= size)
			{
				Container.Push(con);
			}
			else
			{
				Container.Insert(index, con);
			}
			return true;
		}
		// Actor is inside but wants to change spots.
		else if (index >= 0 && pos != index)
		{
			let con = Container[pos];
			
			index = max(0, min(index, size - 1));
			
			let temp = Container[index];
			Container[index] = Container[pos];
			Container[pos] = temp;
			return true;
		}
		return false;
	}
	
	protected bool RemoveActor(Actor mo, bool cleaning = false)
	{
		int pos = GetActorIndex(mo);
		if (pos > -1)
		{	
			if (cleaning)
			{
				Container[pos] = null;
			}
			else
			{
				Container[pos].Destroy();
				Container.Delete(pos);
			}
			return true;
		}
		return false;
	}
}

extend class MinecraftEntity
{
	protected bool NoRiders;
	
	bool MountActor(Actor mo, Vector3 off = (0,0,0), bool add = true)
	{
		return false;
	}
	
	void Dismount(bool reconnect = false, bool allriders = false, bool allmounts = false)
	{
		
	}
	
	void Disconnect(bool rider = false, bool mount = true, bool reconnect = false)
	{
		
	}
	
	
	virtual void SpawnRiders()
	{
	}
	
	
	void SpawnRider(Class<MinecraftEntity> cls, out double hoff, int chance = 256)
	{
		if (NoRiders || !cls || irandom(1,256) > chance)	return;
		
		let mo = MinecraftEntity(Spawn(cls, pos, ALLOW_REPLACE));
		if (mo)
		{
			mo.NoRiders = true;
			if (mo.MountActor(self, (0,0, hoff)))
				hoff = mo.Height;
		}
	}
	
	bool IsBottomMount()
	{
		return false;
	}
}