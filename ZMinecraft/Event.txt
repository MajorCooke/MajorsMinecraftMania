/*==============================================================================
Triple M Static Event Handler

Responsible for tracking certain things across maps.
==============================================================================*/

Class TM_EventStatic : StaticEventHandler
{
	private int MaxHealth, MaxArmor;
	/*
	override void OnRegister()
	{
		ParseJSON();
	}
	*/
	static TM_EventStatic Fetch()
	{	return TM_EventStatic(Find('TM_EventStatic'));	}	
	
	override void NewGame()
	{	MaxHealth = MaxArmor = 200;	}
	
	clearscope int GetMaxHealth() const { return Max(200, MaxHealth); }
	clearscope int GetMaxArmor() const { return Max(200, MaxArmor); }
	
	private BasicArmor Armors[MAXPLAYERS];
	override void WorldTick()
	{
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i] || !players[i].mo)	continue;
			let p = players[i];
			if (!p)	continue;
			let plr = players[i].mo;
			
			if (!plr.alternative)
			{
				if (TMV_Debug == 25)
				{
					if (plr.health > MaxHealth)
						Console.Printf("Updated health: %d -> %d", MaxHealth, plr.health);
				}
				MaxHealth = Max(200, MaxHealth, plr.health);
			}
			if (!Armors[i]) 
				Armors[i] = BasicArmor(plr.FindInventory('BasicArmor'));
			else
				MaxArmor = Max(MaxArmor, Armors[i].Amount);
		}
	}

	
}


//==============================================================================
// Triple M Event Handler
//==============================================================================

Class TM_Handler : EventHandler
{
	mixin TM_FastRNG;
	const DespawnTimer = Second * 5;
	const CleanTimer = Second * 10;
	enum ETimers
	{
		S_Spawn = 0,
		S_Clean,
		S_Despawn,
		S_Max
	};
	
	TM_AArray 	Monsters, Blocks,	Bridges;
	private TM_EventStatic SEvent;
	private int MobCount, EndermanCount, BlockCount, FireCount;
	private double DespawnDist;
	private int Timer[S_Max];
	private Array<TM_MountInfo> MountList;
	private Array<SkyViewpoint> skies;
	
	static TM_Handler Fetch()
	{
		return TM_Handler(Find("TM_Handler"));
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		int num = e.Player;
		let plr = PlayerPawn(players[num].mo);
		if (!plr)	return;
		
		if (e.Name == 'TM_TogglePeaceful')
		{
			Cvar p = Cvar.GetCvar("TMV_Peaceful");
			bool res = p.GetBool();
			if (p)	p.SetBool(!res);
			
			if (!res)			Console.Printf("Peaceful Mode On");
			else				Console.Printf("Peaceful Mode Off");
		}
		else if (e.Name == 'TM_ResetBans')
		{
			Console.Printf("Resetting Sector Restrictions");
			SetupBans();
		}
		else if (e.Name == 'TM_ToggleSpawning')
		{
			Cvar p = Cvar.GetCvar("TMV_Spawning");
			bool res = p.GetBool();
			if (p)	p.SetBool(!res);
			
			if (!res)			Console.Printf("Spawning On");
			else				Console.Printf("Spawning Off");
			return;
		}
		else if (e.Name == 'TM_Launch')
		{
			let it = ThinkerIterator.Create('TM_Monster', Thinker.STAT_DEFAULT);
			TM_Monster mo;
			while (mo = TM_Monster(it.Next()))
			{
				if (mo && !mo.bDORMANT && !mo.bNOGRAVITY && mo.Gravity > 0.0 && !mo.bKILLED)
					if (mo.vel.z < 100.0)
						mo.vel.z = 100.0;
			}
			return;
		}
		else if (e.Name == 'TM_NextMode' || e.Name == 'TM_NextSub')
		{
			let it = TM_Item(plr.InvSel);
			if (it)
			{
				Name nn = e.Name;
				Switch(nn)
				{
					Case 'TM_NextMode': it.CycleMode(e.args[0]);	return;
					Case 'TM_NextSub':	it.CycleSubMode(e.args[0]);	return;
				}
			}
			return;
		}
		else if (e.Name == 'TM_SpawnFire')
		{
			int type = e.Args[0];
			if (type < FIRE_Min || type > FIRE_Max)
			{
				Console.Printf("First argument must be [0, %d]", FIRE_Min, FIRE_Max);
				return;
			}
			let defs = GetDefaultByType("TM_Block_Fire");
			double dist = plr.Radius * 2 + defs.Radius * 2;
			Vector3 spos = plr.Vec3Angle(dist, plr.angle);
			
			SpawnFireBlock(plr, null, spos, (-1, -1), null, type, (e.Args[1] > 0));
		}
		else if (e.Name == 'TM_RemoveFire')
		{
			
			int type = e.Args[0];
			if (type < FIRE_Min || type > FIRE_Max)
			{
				Console.Printf("First argument must be [%d, %d]", FIRE_Min, FIRE_Max);
				return;
			}
			int count = 0;
			for (int i = 0; i < Blocks.Size(); i++)
			{
				let fire = TM_Block_Fire(Blocks.Actors[i]);
				if (fire && fire.GetType() == type)
				{
					fire.Destroy();
					count++;
				}
			}
			String typename = "Undefined";
			Switch(type)
			{
				Case FIRE_Normal:	typename = "normal"; break;
				Case FIRE_Void:		typename = "void"; break;
				Case FIRE_Soul:		typename = "soul"; break;
				Case FIRE_Hell:		typename = "hell"; break;
			}
			
			Console.Printf("%d %s fire blocks destroyed", count, typename);
			return;
		}
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		DoSetup();
	}
		
	override void WorldThingSpawned(WorldEvent e)
	{
		Actor mo = e.Thing;
		if (!mo || mo.bDESTROYED || mo.bMISSILE || (mo.bNOINTERACTION && !(mo is 'TM_Block')))
			return;
		
		
		if (mo is 'TM_Monster')	
		{
			let mon = TM_Monster(e.Thing);
			mon.Event = self;
			mon.SEvent = SEvent;
			Monsters.Push(mon);
			MobCount++;
			
			if (mon is 'TM_Enderman')
				EndermanCount++;
			return;
		}
		else if (mo is 'TM_Block')
		{
			let bl = TM_Block(e.Thing);
			bl.Event = self;
			bl.SEvent = SEvent;
			Blocks.Push(bl);
			BlockCount++;
			if (bl is 'TM_Block_Fire')
				FireCount++;
			return;
		}
		else if (mo is 'SkyViewpoint')	
		{
			let s = level.PointInSector(mo.pos.XY);
			BanConnectedSectors(s);
			BanSector(s); // In the event a map is manually controlled via MapCompat.txt
		}
		else if (mo is 'TM_FlyingItem')
		{
			let fl = TM_FlyingItem(mo);
			fl.Event = self;
			fl.SEvent = SEvent;
		}
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		let mo = TM_Entity(e.Thing);
		if (!mo)	return;
		
		if (mo is 'TM_Monster')	
		{
			MobCount--;
			Monsters.Delete(mo);
			if (mo is 'TM_Enderman')
				EndermanCount--;
		}
		else if (mo is 'TM_Block')
		{
			BlockCount--;
			if (mo is 'TM_Block_Fire')
				FireCount--;
			Blocks.Delete(mo);
		}
	}
	
	override void WorldThingDestroyed(WorldEvent e)
	{
		let mo = TM_Entity(e.Thing);
		if (mo && !mo.bKILLED)
		{
			if (mo is 'TM_Monster')
			{
				MobCount--;
				if (mo is 'TM_Enderman')
					EndermanCount--;
			}
			else if (mo is 'TM_Block')
			{				
				if (mo is 'TM_Block_Fire')
					FireCount--;
				BlockCount--;
			}
		}
	}
	
	private void HandleRandomSpawners(out Class<Actor> Cls)
	{
		if (!(Cls is 'RandomSpawner'))
			return;
		
		int RecursionCount = RandomSpawner.MAX_RANDOMSPAWNERS_RECURSION;
		while (Cls is 'RandomSpawner' && RecursionCount > 0)
		{
			let def = GetDefaultByType(Cls);
			if (def)
			{
				DropItem n = def.GetDropItems();
			}
		}
	}
	
	bool DropItem(Actor mo, Class<Actor> Cls, int Amount = -1, int Chance = 256)
	{
		if (!mo || !Cls || Chance < 1 || Amount == 0)	return false;
		
		if (Cls is 'TM_FlyingItem')
		{
			let check = TM_FlyingItem(mo.A_DropItem(Cls, -1, Chance));
			if (check && amount > 1)	check.Amount *= Amount;
			return true;
		}
		
		Array<Actor> drops;	drops.Clear();
		bool good = false;
		if (TMV_CombineItems || Amount < 1)
		{
			Actor check = null;
			check = mo.A_DropItem(Cls, -1, Chance);
			if (!check)
				return false;
			if (check is 'RandomSpawner')
				return true;
			if (check is 'Inventory')
			{	// TM_Items are always combined.
				let it = TM_Item(check);
				if (it)	
				{
					it.Amount *= Amount;
					return true;
				}
				drops.Push(check);
			}	
			
		}
		else
		{
			for (int i = 0; i < Amount; i++)
			{
				Actor check = mo.A_DropItem(Cls, -1, Chance);
				if (!check)	continue;
				else if (check is 'RandomSpawner')
				{
					good = true;
					continue;
				}
				else if (check is 'Inventory')
				{
					let it = TM_Item(check);
					if (it)	
					{
						it.Amount *= Amount;
						return true;
					}
					drops.Push(check);
				}
			}
		}
		
		if (drops.Size() < 1)	return good;
		
		for (int i = 0; i < drops.Size(); i++)
		{
			Inventory Item = Inventory(drops[i]);
			if (Item && !Item.bBIGPOWERUP && !(Item is 'Weapon'))
			{
				let DropTimer = TM_DropTimer.Create(Item);
				if (TMV_CombineItems && Amount > 0)
					Item.Amount *= Amount;
			}
		}
		return true;
	}
	
	private void DoSetup()
	{		
		SEvent = TM_EventStatic.Fetch();
		SetupAmmoService();
		SetupServices();
		SetupBans();
		MountList.Clear();
		Monsters = TM_AArray.Create();
		Blocks = TM_AArray.Create();
		StatusEffects = TM_AArray.Create();
		CreateSpawnList();
		Timer[S_Spawn] = Second;
		TMV_AIDifficulty_Prev = TMV_AIDifficulty;	
	}
	
	private int TMV_AIDifficulty_Prev;
	private bool once;
	override void WorldTick()
	{
		if (gamestate == GS_TITLELEVEL || 
			level.LevelName == 'TitleMap' || // in case someone goes "map titlemap" in console
			level.MapName == 'TitleMap' || 
			level.IsFrozen())
			return;
		
		if (!once)
		{
			once = true;
		//	DoSetup();
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i] && players[i].mo)
				{
					let mo = players[i].mo;
					if (mo) 
					{
						if (!mo.FindInventory('TM_PlayerProtection'))
							mo.GiveInventory('TM_PlayerProtection', 1);
					}
				}
			}
		}
		if (SEvent)
			SEvent.WorldTick();
		else
			SEvent = TM_EventStatic.Fetch();
		
		// If there's enderman around, check player LOS and trigger them if
		// staring at their heads.
		if (EndermanCount > 0 || FireCount > 0)
			DoEnderTrace();
		
		if (++Timer[S_Clean] >= CleanTimer)
		{
			Timer[S_Clean] = 0;
			Monsters.Clean();
			Blocks.Clean();
			StatusEffects.Clean();
			MobCount = 0;
			EndermanCount = 0;
			BlockCount = 0;
			
			int i = 0;
			for (i = 0; i < Monsters.Size(); i++)
			{
				let mo = TM_Monster(Monsters.Actors[i]);
				if (mo && !mo.bKILLED)
				{
					mo.CleanActors();
					mo.CleanDamagers();
					MobCount++;
					if (mo is 'TM_Enderman')
						EndermanCount++;
				}
			}
		}
		
		// Spawn monsters spherically around players.
		HandleMapSpawns();
	}
}


// Map specific event handlers. These do several things based on maps.
// 1. Shrinks the player radius if between [16, 20] to 15.
// 2. Teleports players to the nearest 
Class TM_MapEvent : EventHandler
{
	private Array<Inventory> Items;
	private Array<Actor> Spots;
	private int DmgOverride;
	
	static TM_MapEvent Fetch()
	{
		return TM_MapEvent(Find("TM_MapEvent"));
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		// Add Teleport Destination things to the array, but only if they don't
		// have any TIDs. This will serve as player teleports upon hitting
		// Hellfire Lava, which is used specifically in places where there's no
		// escape.
		let mo = e.Thing;
		
		let inv = Inventory(mo);
		if (inv)
		{
			Items.Push(inv);
			return;
		}
		
		if (mo is 'TeleportFog' || mo.GetReplacee(mo.GetClass()) is 'TeleportFog')
		{
			let plr = mo.Target;
			if (plr is "PlayerPawn" && !plr.bTHRUACTORS)
			{
				let it = BlockThingsIterator.Create(plr);
				while (it.Next())
				{
					let targ = it.thing;
					if (!targ || !targ.bShootable || targ == plr || targ.bNOTELEFRAG || 
						targ.bTHRUACTORS ||	(targ.bTHRUSPECIES && targ.species == plr.species))
						continue;
						
					if (TM_S7_Math.TestAABB(
						plr.pos, (plr.radius, plr.height),
						targ.pos, (targ.radius, targ.height)))
						targ.DamageMobj(plr, plr, Actor.TELEFRAG_DAMAGE, "Telefrag", DMG_THRUSTLESS);
				}
			}
		}
		
		if (mo is 'TeleportDest' && mo.TID == 0)
			Spots.Push(mo);
	}
	
	const CleanTrigger = Second * 5;
	private int Timer;
	private bool once;
	override void WorldTick()
	{
		if (++Timer >= CleanTrigger)
		{
			Timer = 0;
			Array<Inventory> temp; temp.Clear();
			for (int i = 0; i < Items.Size(); i++)
			{
				if (Items[i] && !Items[i].Owner && Items[i].bDROPPED)
					temp.Push(Items[i]);
			}
			Items.Move(temp);
		}
		Array<Inventory> Tele; Tele.Clear();
		for (int i = 0; i < Items.Size(); i++)
		{
			if (Items[i] && !Items[i].Owner && Items[i].WaterLevel > 2)
				if (playeringame[0] && players[0].mo && !players[0].mo.bKILLED)
					Items[i].SetOrigin(players[0].mo.pos, false);
		}
		
		
		
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i])
				continue;
				
			let mo = players[i].mo;
			if (!mo || mo.bKILLED)	continue;
			
			// Allow players to better fit into the blocks, akin to minecraft.
			// Player default radius is 16 so they won't fit without this change.
			if (mo.radius > 15 && mo.radius <= 20)
				mo.A_SetSize(15);
				
			if (mo.WaterLevel > 0 && Spots.Size() > 0)
			{
				int num = mo.floorterrain;
				int count = mo.CurSector.Get3DFloorCount();
				for (int j = 0; j < count; j++)
				{
					let XF = mo.CurSector.Get3DFloor(j);
					if (XF && (XF.flags & (F3DFloor.FF_EXISTS|F3DFloor.FF_SWIMMABLE)))
					{
						double botz = XF.bottom.ZAtPoint(mo.pos.XY);
						double topz = XF.top.ZAtPoint(mo.pos.XY);
						
						if (mo.pos.z > topz && mo.pos.z + mo.height < botz)
							continue;
						/*
						mo.floorterrain = XF.model.GetTerrain(Sector.ceiling);
						let ter = mo.GetTerrain();
						mo.floorterrain = num;
						*/
						let ter = XF.Model.GetFloorTerrain(Sector.ceiling);
						if (ter && ter.DamageAmount > 0 && ter.DamageMOD == 'HellFire')
						{
							Actor closest = null;
							double dist = 32767 ** 2;
							for (int k = 0; k < Spots.Size(); k++)
							{
								if (Spots[k])
								{
									double d = mo.Distance3DSquared(Spots[k]);
									if (d < dist)
									{
										closest = Spots[k];
										dist = d;
									}
								}
							}
							if (closest)
							{
								let inv = TM_PlayerProtection(mo.FindInventory('TM_PlayerProtection'));
								if (inv)	inv.InvulTimer += Second;
								mo.Teleport(closest.pos, mo.angle, TELF_DESTFOG);
								return;
							}
						}
					}
				}
			}
		}
	}
}