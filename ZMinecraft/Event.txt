//

Class MCZombieSpawner : RandomSpawner
{
	Default
	{
		DropItem "MCZombie",		255, 10;
	//	DropItem "MCHusk",			255, 4;
	//	DropItem "MCDrowned",		255, 1;
	}
}

Class MCSkeletonSpawner : RandomSpawner
{
	Default
	{
		DropItem "MCSkeleton",			255, 10;
	//	DropItem "MCStraySkeleton",		255,  5;
	//	DropItem "MCWitherSkeleton",	255,  1;
	}
}

Class MinecraftHandler : EventHandler
{
	mixin TM_FastRNG;
	const DespawnTimer = Second * 5;
	const CleanTimer = Second * 10;
	enum ETimers
	{
		S_Spawn = 0,
		S_Clean,
		S_Despawn,
		S_Max
	};
	
	private int MobCount, EndermanCount;
	private double DespawnDist;
	private int Timer[S_Max];
	private Array<MCMountInfo> MountList;
	AArray SmokeCount;
	AArray Monsters;
	
	
	
	
	static MinecraftHandler Fetch()
	{
		return MinecraftHandler(Find("MinecraftHandler"));
	}
	
	
	/*
	override void WorldLineActivated(WorldEvent e)
	{
		Line l = e.ActivatedLine;
		// Floor_*TxTy - changes texture before/after movement and gets the special.
		
		Sector f = l.frontsector;
		Sector b = l.backsector;
		
		Switch(l.special)
		{
			Case 239:
			Case 241:		
			{
				if (l.Args[0] == 0)
				{
					if (f && f.DamageAmount > 0)
						DamageSectors.AddSector(b);
				}
				else
				{
					let it = level.CreateSectorTagIterator(l.Args[0]);
					int id = it.Next();
					while (id > -1)
					{
						DamageSectors.AddSector(level.Sectors[id]);
						id = it.Next();
					}
				}
				break;
			}
			Default:
				break;
		}
	}
	*/
	
	override void OnRegister()
	{
		if (!level || level.LevelName == 'TitleMap')
		{
			Destroy();
			return;
		}
		Super.OnRegister();
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		MountList.Clear();
		Monsters = AArray.Create();
		CreateSpawnList();
		InitQueues();
		Timer[S_Spawn] = Second;
		MCC_AIDifficulty_Prev = MCC_AIDifficulty;
		
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		let mo = MinecraftEnemy(e.Thing);
		if (mo)	
		{
			mo.Event = self;
			mo.StartHealth *= Max(0.5, MCC_HealthMul);
			mo.Health *= Max(0.5, MCC_HealthMul);;
			Monsters.Push(mo);
			MobCount++;
			
			if (mo is 'MCEnderman')
				EndermanCount++;
		}
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		let mo = MinecraftEnemy(e.Thing);
		if (mo)	
		{
			MobCount--;
			Monsters.Delete(mo);
			
			if (mo is 'MCEnderman')
				EndermanCount--;
		}
	}
	
	override void WorldThingDestroyed(WorldEvent e)
	{
		let mo = MinecraftEnemy(e.Thing);
		if (mo && !mo.bKILLED) 
		{
			MobCount--;
			if (mo is 'MCEnderman')
				EndermanCount--;
		}
	}
	
	override void WorldThingDamaged(WorldEvent e)
	{
		let src = MinecraftEnemy(e.DamageSource);
		if (src)
		{
			let mo = e.Thing;
			if (mo && mo is 'PlayerPawn' && !mo.FindInventory("MCImmunityFrames"))
			{
				mo.A_GiveInventory('MCImmunityFrames',1);
				if (!(mo is 'MinecraftEnemy'))
					mo.A_StartSound("Minecraft/Hit", 9, CHANF_OVERLAP);
			}
		}
	}
	
	bool DropItem(Actor mo, Class<Inventory> Cls, int Amount = -1, int Chance = 256)
	{
		if (!mo || !Cls || Chance < 1 || Amount == 0)	return false;
		
		Array<Actor> drops;	drops.Clear();
		bool good = false;
		if (MCC_CombineItems || Amount < 1)
		{
			Actor check = null;
			check = mo.A_DropItem(Cls, -1, Chance);
			if (!check)
				return false;
			if (check is 'RandomSpawner')
				return true;
			if (check is 'Inventory')
				drops.Push(check);
		}
		else
		{
			for (int i = 0; i < Amount; i++)
			{
				Actor check = mo.A_DropItem(Cls, -1, Chance);
				if (!check)	continue;
				else if (check is 'RandomSpawner')
				{
					good = true;
					continue;
				}
				else if (check && check is 'Inventory')
				{
					drops.Push(check);
				}
			}
		}
		
		if (drops.Size() < 1)	return good;
		
		for (int i = 0; i < drops.Size(); i++)
		{
			Inventory Item = Inventory(drops[i]);
			if (Item && !Item.bBIGPOWERUP && !(Item is 'Weapon'))
			{
				let DropTimer = MCDropTimer.Create(Item);
				if (MCC_CombineItems && Amount > 0)
					Item.Amount *= Amount;
			}
		}
		return true;
	}
	
	private int MCC_AIDifficulty_Prev;
	override void WorldTick()
	{
		if (level.LevelName == 'TitleMap' || level.MapName == 'TitleMap' || level.IsFrozen())
			return;
		
		if (MobCount > 0 && ++Timer[S_Despawn] >= DespawnTimer)
		{
			Timer[S_Despawn] = 0;
			for (int i = 0; i < Monsters.Size(); i++)
			{
				let mo = MinecraftEnemy(Monsters.Actors[i]);
				if (!mo || (mo.Target && mo.Targetable(mo.Target)))	continue;
				
				double  dmin = mo.DespawnRangeMin,
						dmax = mo.DespawnRangeMax;
				
				if (mo.A_CheckRange(mo.DespawnRangeMin, "Null", true))
				{
					
					double closest = dmax ** 2;
					for (int i = 0; i < MAXPLAYERS; i++)
					{
						if (!playeringame[i])	continue;
						let plr = players[i].mo;	
						if (!plr || plr.bKILLED)	continue;
						
						closest = min(mo.Distance2DSquared(plr), closest);
					}
					
					if (closest < dmin)
						continue;
					else if (closest >= dmax)
						mo.Destroy();
					else
					{
						double scalar = MC_Functions.GetFalloff(dmin, dmax, closest);
						int chance = int(round(1000.0 * scalar));
						if (irandom(1, 1000) <= chance)
							mo.Destroy();
					}
				}
			}
		}
		
		// If there's enderman around, check player LOS and trigger them if
		// staring at their heads.
		if (EndermanCount > 0)
			DoEnderTrace();
		
		if (++Timer[S_Clean] >= CleanTimer)
		{
			Timer[S_Clean] = 0;
			Monsters.Clean();
			/*
			SpawnQueue.Clean();
			SpawnQueuePriority.Clean();
			ClsQueue.Clean();
			ClsQueuePriority.Clean();
			*/
			MobCount = 0;
			EndermanCount = 0;
			for (int i = 0; i < Monsters.Size(); i++)
			{
				let mo = MinecraftEnemy(Monsters.Actors[i]);
				if (mo && mo.health > 0)
				{
					mo.CleanActors();
					mo.CleanDamagers();
					MobCount++;
					if (mo is 'MCEnderman')
						EndermanCount++;
				}
			}
		}
		
		// Spawn monsters spherically around players.
		HandleMapSpawns();
	}
}

