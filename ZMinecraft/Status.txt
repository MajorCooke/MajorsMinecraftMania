//==============================================================================
// 
// Status Effects
// 
//==============================================================================

enum EStatusEffect
{	
	SE_Speed = 1,
	SE_Slow,			
	SE_Strength,		// Increased damage output
	SE_Weakness,		// Reduced damage output 
	SE_Regen,
	SE_Poison,			// Damages all but the last hit point.
	SE_PoisonFatal,		// Will kill.
	SE_Wither,			// Inflicted by wither (skeletons)
	SE_Blind,			// Darkens vision
	SE_Luck,			// Increased item drops
	SE_WaterBreathe,	// Immune to drowning
	SE_Resist,			// Damage reduction/immunity
	SE_FireResist,		// Explicitly for different fires
	SE_OnFire,			// On fire. For simplicity's sake.
}

Class TM_StatusEffect : Powerup abstract
{
	mixin TM_FastRNG;
	mixin TM_Functions;
	mixin TM_Event;
	meta bool Ailment, Clearable;
	Actor source; // The one who gave the effect
	protected bool Processed;
	meta int Type, Cap;
	protected int Potency;
	bool Particles, StartTrigger;
	
	Property Ailment: Ailment;
	Property Clearable: Clearable;
	Property Type: Type;
	Property Cap: Cap;
	Property Particles: Particles;
	Property StartTrigger: StartTrigger;
	
	Default
	{
		TM_StatusEffect.Particles true;
		TM_StatusEffect.Cap 5;
		TM_StatusEffect.StartTrigger true;
		Inventory.ForbiddenTo "TM_Boss";
	}
	
	int GetPotency() const { return Potency; }
	
	private int PDelay;
	override void DoEffect()
	{
		Processed = false;
		Super.DoEffect();
		Amount = EffectTics;
		if (Particles && TMV_SFX > 0 && Owner && !Owner.IsFrozen() && --PDelay < 1)
		{
			PDelay = (TMV_SFX > 1) ? irandom(20, 50) : irandom(10, 25);
			Actor a; bool b;
			[b, a] = Owner.A_SpawnItemEx("TM_PotionParticle", 
				ffrandom(radius * 0.5, radius), 0, ffrandom(0, height * 0.5),
				0,0,0,ffrandom(0,359),SXF_NOCHECKPOSITION);
				
			// Can't use SXF_TRANSFERTRANSLATION here since that'll just come
			// from the owner instead of the item.
			if (a && b)
				a.Translation = Translation;	
		}	
	}
	
	void ModifyProperties(Actor src, int duration, int potent, bool add, bool force)
	{
		if (force)
		{
			source = src;
			EffectTics = Amount = Max(0, duration);
			int o = Potency;
			Potency = potent;
		}
		else
		{
			if (!source)	source = src;
		
			Potency = Max(Potency, potent);
			
			if (duration != 0)
			{
				EffectTics = (add) ? Max(0, EffectTics + duration) : duration;
				Amount = EffectTics;
			}
		}
		
		Potency = Clamp(Potency, 1, Cap);
		if (EffectTics > 0)
			Modified();
	}
	
	virtual void Modified() {}
	
}

Class TM_StatusEffectDmg : TM_StatusEffect abstract
{}

Class TM_StatusEffectInterval : TM_StatusEffect
{	
	private int Delay, Timer;
	
	virtual void Trigger()	{}
	
	int GetTimer() { return Timer; }
	int GetDelay() { return Delay; }
	
	protected bool ShouldStartTrigger(int trig)
	{
		return (trig > 0 || (trig < 0 && StartTrigger));
	}
	// Timer ticks down, Delay is what timer becomes after hitting 0.
	void SetDelay(int time, int trig = -1)
	{
		Delay = Max(1, time);
		if (ShouldStartTrigger(trig))	Trigger();
	}
	
	void SetTimer(int time, int trig = -1)
	{
		Timer = Max(1, Time);
		if (ShouldStartTrigger(trig))	Trigger();
	}
	
	void SetTimeDelay(int time, int del, int trig = -1)
	{
		Timer = Max(1, time);
		Delay = Max(1, del);
		if (ShouldStartTrigger(trig))	Trigger();
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
		if (--Timer < 1)
		{
			Timer = Delay;
			Trigger();
		}
	}
}

// -10 HP per trigger. 
// Potency levels < 5 affect how often to damage.
// Potency levels >= 5 affect how much damage to give every ~0.5 seconds.
Class TM_PoisonEffect : TM_StatusEffectInterval
{
	Default
	{
		Inventory.ForbiddenTo "TM_Boss", "TM_Undead", "TM_Spider", "TM_SpiderCave";
		TM_StatusEffect.Ailment true;
	}
	private int Dmg;
	
	
	override void Modified()
	{
		if (Potency < 5)
		{
			Switch (Potency)
			{
				Case 1:	{	Dmg = 10;	SetDelay(50);	break;	}
				Case 2:	{	Dmg = 10;	SetDelay(35);	break;	}
				Case 3:	{	Dmg = 10;	SetDelay(27);	break;	}
				Case 4:	{	Dmg = 10;	SetDelay(18);	break;	}
			}
		}
		else
		{
			SetDelay(18);
			Dmg = min((Potency - 3) * 10, TELEFRAG_DAMAGE - 1);
		}
	}

	override void Trigger()
	{
		if (Owner && Owner.Health > 1)
		{
			bool bud = Owner.bBUDDHA;
			Owner.bBUDDHA = true;
			Owner.DamageMobj(self, source, Dmg, 'Poison', DMG_THRUSTLESS);
			Owner.bBUDDHA = bud;
		}
	}
}

Class TM_WitherEffect : TM_StatusEffectInterval
{
	Default
	{
		Inventory.ForbiddenTo "TM_Boss", "TM_SkeletonWither";
		TM_StatusEffect.Ailment true;
	}
	private int Dmg;
	override void Modified()
	{
		if (Potency < 5)
		{
			Switch (Potency)
			{
				Case 1:	{	Dmg = 10;	SetDelay(70);	break;	}
				Case 2:	{	Dmg = 10;	SetDelay(35);	break;	}
				Case 3:	{	Dmg = 10;	SetDelay(27);	break;	}
				Case 4:	{	Dmg = 10;	SetDelay(18);	break;	}
			}
		}
		else
		{
			SetDelay(18);
			Dmg = min((Potency - 3) * 10, TELEFRAG_DAMAGE - 1);
		}
	}
	
	override void Trigger()
	{
		if (Owner && !Owner.bKILLED)
			Owner.DamageMobj(self, source, Dmg, 'Wither', DMG_THRUSTLESS);
	}
}

// -10% damage output per level
Class TM_WeaknessEffect : TM_StatusEffectDmg
{
	Default
	{
		TM_StatusEffect.Cap 9;
		TM_StatusEffect.Ailment true;
	}
	override void ModifyDamage(int damage, Name dmgType, out int newdamage, bool passive, Actor i, Actor s, int flags)
	{
		if (!passive && damage > 0 && Potency > 0)
		{
			newdamage = int(double(damage - (damage * Potency * 0.1)));
		}
	}
}


// +15% damage output per level
Class TM_StrengthEffect : TM_StatusEffectDmg
{
	override void ModifyDamage(int damage, Name dmgType, out int newdamage, bool passive, Actor i, Actor s, int flags)
	{
		if (!passive && damage > 0 && Potency > 0)
		{
			newdamage = int(double(damage + (damage * Potency * 0.15)));
		}
	}
}
// +1 health per potency
Class TM_RegenerationEffect : TM_StatusEffectInterval
{
	Default
	{
		Inventory.ForbiddenTo "TM_Boss", "TM_Undead";
	}

	private int MaxHP;
		
	override void Trigger()
	{
		if (Owner && !Owner.bKILLED && !(Owner is 'TM_Undead'))
		{
			if (owner is 'PlayerPawn')
				MaxHP = Max(200, MaxHP, Owner.Health, GetMaxHealth(true));
			else
				MaxHP = GetMaxHealth(true);
				
			Owner.GiveBody(Potency, MaxHP);
		}
	}
}

Class TM_InstantHealthEffect : TM_StatusEffectInterval
{
	override void Trigger()
	{
		if (!Owner)	return;
		
		
	}
}

// +20% speed per level.
Class TM_SpeedEffect : TM_StatusEffect
{
	override void Modified()
	{
		Speed = Max(0, 1.0 + Potency * 0.2);
	}
}
// -15% speed per level.
Class TM_SlownessEffect : TM_StatusEffect
{
	Default
	{
		TM_StatusEffect.Ailment true;
	}
	override void Modified()
	{
		Speed = Max(0, 1.0 - Potency * 0.15);
	}
}


// +20% damage resistance per level.
Class TM_ResistanceEffect : TM_StatusEffectDmg
{
	override void DoEffect()
	{
		if (Owner is 'PlayerPawn')	Owner.bLAXTELEFRAGDMG = true;
		Super.DoEffect();
	}
	
	override void EndEffect()
	{
		if (Owner is 'PlayerPawn')	Owner.bLAXTELEFRAGDMG = Owner.Default.bLAXTELEFRAGDMG;
		Super.EndEffect();
	}

	override void ModifyDamage(int damage, Name mod, out int newdamage, bool passive, Actor i, Actor s, int flags)
	{
		if (!passive || 
			mod == 'Void' ||
			damage < 1)	
			return;
		
		if (Potency > 4)
			return;
		
		damage = int(double(damage * (1.0 - Potency * 0.2)));
		newdamage = Max(0, damage);
	}
}

// Immunity to fire and slime damage.
Class TM_FireResistanceEffect : TM_StatusEffectDmg
{
	const HFDamage = 5;
	override void ModifyDamage(int damage, Name mod, out int newdamage, bool passive, Actor i, Actor s, int flags)
	{
		if (!passive)	return;
		
		if (!Owner || !Owner.CurSector || (Owner.CurSector.Flags & Sector.SECF_ENDLEVEL))
			return;
		
		Switch (mod)
		{
			Case 'Fire':
			Case 'Lava':
			Case 'Slime':
			Case 'Hellslime':
			{	
				newdamage = -1;
				return;
			}
			Case 'SoulFire':
			{
				if (Potency > 1)
				{
					newdamage = -1;
					return;
				}
				break;
			}
			Case 'HellFire':
			{
				if (Potency > 2)
				{
					if (damage > HFDamage)
					{
						newdamage = HFDamage;
						return;
					}	
				}
				break;
			}
		}
		newdamage = damage;
	}
}

Class TM_OnFireEffect : TM_StatusEffectInterval
{
	Default
	{
		TM_StatusEffect.Cap 3;
		TM_StatusEffect.Ailment true;
		TM_StatusEffect.Clearable false; // Not treated as an actual status effect.
		TM_StatusEffect.Particles false;
		TM_StatusEffect.StartTrigger true;
		DamageType "Fire";
		DeathType "Normal";
	}
	
	private Actor Flame;
	private int Dmg, Flags;
	
	override void InitEffect()
	{
		Super.InitEffect();
		if (Owner)
		{	
			Flame = Actor.Spawn('TM_ActorFlame', Owner.Pos, ALLOW_REPLACE);
			
			if (Flame)
			{
				Flame.Scale = ( // Based on image dimensions.
					Owner.Radius * 2 / 64,
					Owner.Height * 1.2 / 64);
			}
		}
	}
	// Does not include Hellfire. That's instant death without invulnerability.
	private int PrevPot;
	override void Modified()
	{
		bool doTrig = (PrevPot != Potency);
		Potency = Max(PrevPot, Potency);
		
		if (TMV_Debug == 23)
			Console.Printf("Potency: %d", type);
		
		Switch(Potency)
		{
			Case FIRE_Normal: 
			{
				DamageType = "Fire";
				Dmg = 10;
				if (Flame) Flame.SetState(Flame.ResolveState("Normal"));
				SetDelay(35, doTrig); break;
			}
			Case FIRE_Void:
			{
				DamageType = "Ice";
				Dmg = 2;
				if (Flame) Flame.SetState(Flame.ResolveState("Void"));
				SetDelay(18, doTrig); break;
			}
			Case FIRE_Soul: 
			{
				DamageType = "Soul";
				Dmg = 10;
				if (Flame) Flame.SetState(Flame.ResolveState("Soul"));
				SetDelay(18, doTrig); break;
			}
			Case FIRE_Hell: // Deals no damage, it's just the block that does so.
			{
				Dmg = 0;
				EffectTics = 2;
				break;
			}
		}
		if (GetTimer() > 18)
			SetTimer(18, 1);
	}
	
	
	
	override void OnDestroy()
	{
		if (Flame)	Flame.Destroy();
		Super.OnDestroy();
	}
	
	private void Extinguish()
	{
		if (bDESTROYED) return;
		if (Owner) Owner.A_StartSound("Minecraft/Fizz", 12345, CHANF_OVERLAP);
		Destroy();
	}
	
	private bool InLiquid, WasLiquid;
	override void DoEffect()
	{
		if (bDESTROYED)	return;
		
		if (!Owner || Owner.bKILLED || !TM_Global.Flammable(Owner, DamageType))
		{	Destroy();	return;	}

		// TO DO: Make Minecraft Lava ignite and not extinguish.
		if (Potency != FIRE_Hell)
		{
			WasLiquid = InLiquid;
			InLiquid = ((Owner.pos.z <= Owner.floorz && Owner.GetFloorTerrain().isLiquid) ||
						(Owner.Waterlevel > 0));
						
			Switch (Potency)
			{
				Case FIRE_Normal:		
				{	
					if (InLiquid)
					{	Extinguish(); return; }
					break;
				}
				Case FIRE_Soul:
				{
					if (InLiquid && --EffectTics < 1)  
					{
						Extinguish(); 
						return;
					}
					break;
				}
				Case FIRE_Void:
				{
					if (InLiquid) EffectTics++;
					break;
				}
			}
			if (Owner.IsFrozen())	return;
		}
		
		Super.DoEffect();
		
		PrevPot = Max(Potency, PrevPot);
		
		if (Owner && Flame && !Flame.bDESTROYED)
		{
			Flame.SetOrigin(Owner.Pos, false);
			Flame.Prev = Owner.Prev;
			
			Flame.bINVISIBLE = (Owner == players[consoleplayer].camera &&
				!(Owner.Player.Cheats & CF_CHASECAM));
		}
	}
	
	override void Trigger()
	{
		if (Owner && Potency != FIRE_Hell)
		{
			int DD = Dmg;
			if (InLiquid && Potency == FIRE_Void)
				DD *= 2;
			Owner.DamageMobj(self, source, DD, DamageType, DMG_THRUSTLESS);
		}
	}
}

//==============================================================================
//==============================================================================


extend Class TM_Handler
{
	private TM_AArray StatusEffects; // For RenderUnderlay

	bool GiveStatus(Actor target, Actor source, Class<TM_StatusEffect> cls, 
		int duration, int potency = 1, bool force = false, 
		int timer = -1, int delay = -1,	bool trigger = false, bool add = false)
	{
		if (!Target || Target.bKILLED || !cls || 
			!(Target.bSHOOTABLE || Target.bVULNERABLE))	return false;
		
		let inv = TM_StatusEffect(Target.FindInventory(cls));
		if (!inv)
		{
			force = true;
			inv = TM_StatusEffect(Actor.Spawn(cls));
			if (!inv)	return false;
			
			inv.bDROPPED = true;
			inv.ClearCounters();
			if (!inv.CallTryPickup(target))
			{
				inv.Destroy();
				return false;
			}
			if (Target.Player)
				StatusEffects.Push(inv);
				
			inv.Event = self;
		}
		
		inv.ModifyProperties(source, duration, potency, add, force);
		
		if (timer > -1 || delay > -1)
		{
			let inter = TM_StatusEffectInterval(inv);
			if (inter)
			{
				if (timer > -1)	inter.SetTimer(timer);
				if (delay > -1)	inter.SetDelay(delay);
				if (trigger)	
				{
					inter.startTrigger = false;
					inter.Trigger();
				}
			}
		}
		return true;
	}
	
	void ClearEffects(Actor mo, bool ailonly = false, bool force = false)
	{
		if (!mo || mo.bKILLED)	return;
		
		for (let probe = mo.Inv; probe; probe = probe.Inv)
		{
			let ef = TM_StatusEffect(probe);
			if (ef && (ef.Clearable || force) && (!ailonly || ef.Ailment))
				ef.EffectTics = 0;
		}
	}
	
	override void RenderUnderlay(RenderEvent e)
	{
		Actor mo = e.Camera;
		if (!mo || StatusEffects.Size() < 1)	return;
		
		// Find any fire effects active and see if they match the camera. This 
		// should theoretically be cheaper than trying to go through a player's 
		// inventory.
		TM_OnFireEffect FireEffect = null;
		for (int i = 0; i < StatusEffects.Size(); i++)
		{
			FireEffect = TM_OnFireEffect(StatusEffects.Actors[i]);
			if (FireEffect && FireEffect.Owner == mo && !FireEffect.bDESTROYED)
				break;
				
			FireEffect = null;
		}
		if (!FireEffect)	return;
		
		String tex = "TMFire01";
		
		Switch(FireEffect.GetPotency())
		{
			Case FIRE_Void:	tex = "TMFirv01";	break;
			Case FIRE_Soul:	tex = "TMFirs01";	break;
			Case FIRE_Hell:	tex = "TMFirh01";	break;
		}
		
		
		
		let id = TexMan.CheckForTexture(tex);
		if (!id)	return;
		Vector2 s = TexMan.GetScaledSize(id);
		double ratio = Screen.GetAspectRatio();
		double nx = s.x;
		s.x /= ratio;
		nx -= s.x;
		
		double w = Screen.GetWidth();
		double h = Screen.GetHeight();
		
		Screen.ClearClipRect();
	//	Screen.
		
		Screen.DrawTexture(id, true, -nx * 0.5, 0,
		//	DTA_ScaleX, Screen.GetAspectRatio();
			DTA_VirtualWidthF, s.x,
			DTA_VirtualHeightF, s.y,
		//	DTA_SrcX, sh.x,
			DTA_SrcY, (-s.y * 0.45),
			DTA_CenterOffset, true,
			DTA_TopLeft, true
		);
	}
}