
#include "ZMinecraft/Blocks/TNT.txt"
#include "ZMinecraft/Blocks/Fire.txt"
#include "ZMinecraft/Blocks/Spawner.txt"


extend class TM_Handler
{
	TM_Block CheckBlockAt(Vector3 pos, bool fixed = false, TM_Block caller = null)
	{
		if (!fixed)
			pos = TM_Global.AdjustBlockPos(pos);
		for (int i = 0; i < Blocks.Actors.Size(); i++)
		{
			let bl = TM_Block(Blocks.Actors[i]);
			if (bl && bl != caller)
			{
				// Intentionally -1 to avoid getting neighbors.
				Vector2 size = (BlockRadius - 1, BlockHeight - 1);
				if (pos ~== bl.pos ||
					TM_S7_Math.TestAABB(pos, size, bl.pos, size))
					return bl;
			}
		}
		return null;
	}
	
	
}

// The main block class itself. Contains the default stuff needed for this to
// behave properly in GZDoom.
// When it comes to mining and damage, everything is done by DamageMobj.
Class TM_Block : TM_Entity abstract
{
	const LightID = "BlockLight";
	enum TM_EBlock
	{
		// Flammable levels
		FLF_None = 0,		// Cannot be ignited or damaged.
		FLF_Ignitable,		// Ignitable, not damageable by fire
		FLF_Flammable,		// Can be burned
		
		INF_Creative = 			1 << 1,		// Requires Creative damagetype to break
		INF_Unbreakable =		1 << 2,		// Used with ^ - acts like Buddha.
		INF_Indestructible = 	1 << 3,		// Cannot be broken at all. No exceptions.
		
	};
	private TM_Block_Breaking brk;
	private Vector3 BrkOff, RealPos;
	private int 	DmgDelay, Tenth;
	private bool 	Preview;
	private int		BlockFlags;
	
	/*
	private Actor src, inf;
	private int flg;
	private Name dtype;
	*/
	flagdef NonSolid:	BlockFlags, 0;
	
	protected TM_Block Sides[Side_SMax];
	
	protected bool	FireSpread;
	
	int 			LR, LG, LB, LRad1, LRad2, LFlags, LType;
	double			LHoriz, LVert, LDepth;
	protected bool	LEnabled;
	meta int 		Flammable;
	protected int 	RepairRate, RepairDelay,
					InvulType,
					RealHP, RealStartHP;
	
	bool 			ShowDamage;
	
	// Light properties
	Property GLRGB:			LR, LG, LB;		// Color
	Property GLRadius:		LRad1, LRad2;	// Radius
	Property GLFlags:		LFlags;			// DynamicLight flags
	Property GLType:		LType;
	Property GLPos:			LHoriz, LVert, LDepth;
	Property GLEnabled:		LEnabled; // Light enabled upon spawning? Default: false
	
	// Show the cracking surface effect.
	Property ShowDamage:	ShowDamage;
	
	// Determines if the block can take fire damage, or even be ignited.
	// I.e. glass is not flammable at all.
	Property Flammable:		Flammable;
	
	// How much the block will heal over time when not mined/damaged, after delay.
	// If repair rate < 0, will be fully repaired after delay.
	Property Repair: 		RepairRate, RepairDelay;
	
	// Invulnerability type, preventing damage. Can only be one thing.
	Property InvulType: 	InvulType;
	
	
	// Block faces
	
	Default
	{
		TM_Block.GLRGB 0, 0, 0;
		TM_Block.GLRadius 64, 64;
	//	TM_Block.GLFlags DynamicLight.LF_ATTENUATE|DynamicLight.LF_ADDITIVE;
		TM_Block.GLFlags DynamicLight.LF_ATTENUATE;
		TM_Block.GLType DynamicLight.PointLight;
		TM_Block.GLPos 0, BlockHeight * 0.5, 0;
		TM_Block.GLEnabled false;
		TM_Block.ShowDamage true;
		TM_Block.InvulType 0;
		TM_Block.Repair -1, 1;	// Just like Minecraft, instantly repairs fully.
		TM_Block.Flammable FLF_Ignitable;
		+NOBLOCKMONST
		+SOLID
		+SHOOTABLE
		+ACTLIKEBRIDGE
		+NOGRAVITY
		+NOBLOOD
		+DONTTHRUST
		+DONTBLAST
		+DONTMORPH
		+NOICEDEATH
		+DONTGIB
		+NOTELEPORT
		+NOTELESTOMP
		+CANNOTPUSH
		+NOFORWARDFALL
		+DONTFALL
		Radius BlockRadius;
		Height BlockHeight;
		Species "Block";
		PainChance 0;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SetPos(Pos);
		StartHealth = Health = RealHP = RealStartHP = Default.Health;
		Tenth = RealStartHP / 10;
		
		if (!Preview)
			GatherNeighbors();
			
		if (LEnabled)
			SetLight(true);
	}
		
	override void Tick()
	{
		if (bKILLED || IsFrozen())
		{
			Super.Tick();
			return;
		}
		Health = RealHP;
		Angle = Angles.X;
		Pitch = Angles.Y;
		Roll = Angles.Z;
		Vel = (0,0,0);
		Super.Tick();
		
		if (!bNOINTERACTION)
		{
			/*
			if (!(Pos.Z ~== RealPos.Z))
				SetZ(RealPos.Z);
			*/
			UpdateBreakFX();
		}
		
	//	if (RealHP < 1)
	//		Die(src, inf, flg, dtype);
	}
	
	
	
	override bool Morph(Actor a, Class<PlayerPawn> pc, Class<MorphedMonster> m, int d,
		int s, class<Actor> mf, class<Actor> uf)
	{	return false;	}
	
	int GetRealHP() const	{	return RealHP;	}
	
	
	override int DamageMobj(Actor i, Actor s, int damage, Name mod, int flags, double angle)
	{
		if (RealHP < 1)
			return -1;
		// Absolutely cannot be damaged. Used during special events such as
		// Herobrine's fights.
		
		if (InvulType == INF_Indestructible)
		{
			DmgDelay = 0;
			RealHP = RealStartHP;
			return -1;
		}
		
		// Do nothing if already broken, no damage, telefragged or from inventory.
		if (bKILLED || damage < 1 || mod == 'Telefrag' ||
			(i is 'Inventory') || (!bSHOOTABLE && !bVULNERABLE))
			return -1;
		
		// Creative blocks (i.e. Bedrock) can only be destroyed by creative or
		// forced damage types.
		bool CreativeDamage = (mod == 'Creative' || 
			((flags & DMG_FORCED) && damage >= RealHP));
			
		if (InvulType == INF_Creative && !CreativeDamage)
			return -1;
		
		// Now we deal the damage after all rejections.
		int dmg = damage;
		
		if (!(flags & DMG_FORCED))
		{
			if (CreativeDamage) // Instant break.
				dmg = RealHP;
			else
			{
				dmg = TakeSpecialDamage(i, s, dmg, mod);
				if (dmg < 1)	return -1;
				
				if (mod == 'Explosion')
					mod = 'Normal';
				
				if (!(flags & DMG_NO_FACTOR))
				{
					dmg = ApplyDamageFactor(mod, dmg);
					if (dmg < 1)	return -1;
					
					if (flags & DMG_EXPLOSION)
					{
						dmg = ApplyDamageFactor("Explosion", dmg);
						if (dmg < 1)	return -1;
					}
				}
				Actor damager = s;
				if (!s && i && i.Target)		
					damager = i.Target;
				
				if (!(flags & DMG_NO_ENHANCE) && damager)
				{
					// Don't allow powerups to trigger special effects.
					for (let probe = damager.Inv; probe; probe = probe.Inv)
					{
						let pd = PowerDamage(probe);
						if (pd)	dmg = ApplyDamageFactors(pd.GetClass(), mod, dmg, dmg);
					}
				}
				if (dmg < 1)	return -1;
			}
		}
		DamageTypeReceived = mod;
		DmgDelay = RepairDelay;
		RealHP -= dmg;
		Health = RealHP;
		
		if (RealHP < 1)
			Die(s, i, flags, mod);
		/*
		{
			src = s;
			inf = i;
			flg = flags;
			dtype = mod;
		}
		*/
		return -1; // Don't ever trigger WorldThingDamaged.
	}
	
	override void Die(Actor s, Actor i, int flags, name mod)
	{
		if (bKILLEd)	return;
		if (InvulType == INF_Indestructible && RealHP > 0)
			return;
		
		bNOINTERACTION = bKILLED = true;
		SetLight(false);
		A_ChangeLinkFlags(1, 1);
		A_UnsetShootable();
		A_StartSound(DeathSound, flags: CHANF_OVERLAP);
		Super.Die(s, i, flags, mod);
		
	}
	
	
	
	override void OnDestroy()
	{
		if (brk)
			brk.Destroy();
		SetLight(false);
		Super.OnDestroy();
	}
	
	//--------------------------------------------------------------------------
	// Custom functions
	//--------------------------------------------------------------------------
	
	void SetLight(bool on)
	{
		LR = Clamp(LR, 0, 255);
		LG = Clamp(LG, 0, 255);
		LB = Clamp(LB, 0, 255);
		LRad1 = Max(0, LRad1);
		LRad2 = Max(0, LRad2);
		if (!bKILLED && !Preview && on && (LR + LG + LB > 0) && (LRad1 + LRad2) > 0)
		{		
			Color col = Color(255, LR, LG, LB);
			A_AttachLight(LightID, LType, col, LRad1, LRad2, LFlags, (LHoriz, LVert, LDepth));
		}
		else 
		{
			A_RemoveLight(LightID);
		}
		LEnabled = on;
	}
	
	protected Vector3 Angles;
	
	virtual void SetAngles(Vector3 Ang)
	{
		Angles = TM_Global.SnapVector3Uniform(Ang,90); // Needs to be non-floor.
		Angle = Angles.X;
		Pitch = Angles.Y;
		Roll = Angles.Z;
	}
	
	void Face(Actor mo)
	{
		if (!mo)	return;
		A_Face(mo, 0, 0, 0, 0, FAF_MIDDLE);
		SetAngles((Angle, Pitch, Roll));
	}
	Vector3 GetRealPos() const { return RealPos; }
	void SetPos(Vector3 np, bool nosnap = false)
	{
		if (nosnap)	RealPos = np;
		else		RealPos = TM_Global.AdjustBlockPos(np);
		SetOrigin(RealPos, false);
		if (pos.z < floorz)	floorz = pos.z;
		BrkOff = Pos + (0, 0, Height * 0.5);
		if (brk)	brk.SetOrigin(BrkOff, false);
		PosChanged();
	}
	
	virtual void PosChanged()
	{
	}
	
	private void UpdateBreakFX()
	{
		if (bKILLED)	return;
		if (RealHP < RealStartHP)
		{
			// Repair the block over time, if non-zero. Negative numbers means
			// fully repairing it instantly.
			if (RepairRate != 0)
			{
				if (DmgDelay > 1)	DmgDelay--;
				else if (RepairRate < 0)
					RealHP = RealStartHP;
				else if (RepairRate > 0)
					RealHP = Min(RealHP + RepairRate, RealStartHP);
			}
			
			if (ShowDamage)
			{
				if (!brk)
					brk = TM_Block_Breaking(Spawn('TM_Block_Breaking', pos + (0,0,height / 2), ALLOW_REPLACE));
				
				if (brk)
					brk.Frame = int(floor((RealStartHP - RealHP) / Tenth));
			}
		}
		else if (brk)
			brk.Destroy();
	}
	
	void SetInvulType(int type)
	{
		type = clamp(type, 0, INF_Indestructible);
		if (bKILLED)
			return;
			
		InvulType = type;
		
		bINVULNERABLE = InvulType; //For mods that have name tags.
	}
	
	void SetRepair(int delay, int rate)
	{
		RepairDelay = delay;
		RepairRate = rate;
	}
	
	virtual void DropItems(name mod = '', int dmgflags = 0)	{}
	
	void SetPreview(bool on)
	{
		Preview = on;
		if (on)
		{
			SetLight(false);
			bNOINTERACTION = true;
			A_UnsetShootable();
			A_ChangeLinkFlags(1);
			A_SetRenderStyle(Default.Alpha * 0.5, STYLE_Add);
			bBRIGHT = true;
			ClearNeighbors();
		}
		else
		{
			bNOINTERACTION = false;
			A_ChangeLinkFlags(0);
			A_SetShootable();
			A_SetRenderStyle(Default.Alpha, STYLE_Normal);
			bBRIGHT = Default.bBRIGHT;
			GatherNeighbors();
		}
	}
	bool IsPreview() const	{	return Preview;	}
	
	
	//--------------------------------------------------------------------------
	// Gets all nearby neighboring blocks and records them.
	// Spread indicates to neighbors they should get theirs too, but they won't
	// trigger further spreads.
	void GatherNeighbors()
	{
		if (bDESTROYED)	return;
		ClearNeighbors();		
		GetEvent();
		for (int i = 0; i < Event.Blocks.Size(); i++)
		{
			TM_Block mo = TM_Block(Event.Blocks.Actors[i]);
			if (!mo || mo.bKILLED || mo == self || mo.IsPreview())	continue;
			
			// Don't process any that aren't direct neighbors.
			Vector3 mpos = mo.pos;
			
			// At least one needs to be lined up.
			if ((mpos.x ~== pos.x) ||
				(mpos.y ~== pos.y) ||
				(mpos.z ~== pos.z))
			{
				// Not surrounding it.
				Vector3 diff = (level.vec3diff(mo.pos, pos));
				if (diff.X >= BlockHeight + 1 ||
					diff.Y >= BlockHeight + 1 ||
					diff.Z >= BlockHeight + 1)
					continue;
						
				if (mpos.z ~== pos.z)
				{
					// Horizontal neighbor
					double ang = TM_S7_Math.GetAnglesTo(level, pos, mpos);
					double absang = abs(ang);
					
					int s = Side_East;
					if (absang >= 180)		s = Side_West;
					else if (absang >= 90)	s = (TM_GlobalMaths.Sign(ang) ? Side_North : Side_South);
					
					SetNeighbor(s, mo, true);
				}
				else 
				{
					// Vertical neighbor
					int s = (mpos.z > pos.z) ? Side_Top : Side_Bottom;
					SetNeighbor(s, mo, true);
				}
			}
		}
	}
	
	TM_Block GetNeighbor(int side)
	{
		return Sides[side];
	}
	
	static int OppositeSide(int side)
	{
		Switch(side)
		{
			Case Side_North:	return Side_South;
			Case Side_South:	return Side_North;
			Case Side_East:		return Side_West;
			Case Side_West:		return Side_East;
			Case Side_Top:		return Side_Bottom;
			Case Side_Bottom:	return Side_Top;
			Case Side_Front:	return Side_Back;
			Case Side_Back:		return Side_Front;
			Case Side_Left:		return Side_Right;
			Case Side_Right:	return Side_Left;
		}
		return Side_None;
	}
	
	protected void SetNeighbor(int side, TM_Block mo, bool update = true)
	{
		if (side <= Side_None || side >= Side_Max)
			return;
			
		Sides[side] = mo;
		
		if (update && mo)
		{
			mo.SetNeighbor(OppositeSide(side), self, false);
		}
	}
	
	void ClearNeighbors()
	{
		for (int i = 0; i < Sides.Size(); i++)
		{
			if (Sides[i])	Sides[i].ClearNeighbor(self);
			Sides[i] = null;
		}
	}
	
	void ClearNeighbor(TM_Block block)
	{
		if (!block)	return;
		
		for (int i = 0; i < Sides.Size(); i++)
		{
			if (Sides[i] == block)	
			{
				Sides[i] = null;
				return;
			}
		}
	}
	
	States
	{
	Spawn:
		ASDF A -1;
		Stop;
	Death:
		TNT1 A 1 A_SetShootable();
		TNT1 A 10 A_UnsetShootable();
		Stop;
	}
}

Class TM_BlockHitList
{
	TM_Block mo;
	Vector3 HitPos, HitVector;
}

Class TM_BlockTracer : LineTracer
{
	Array<TM_BlockHitList> blocklist;
	Array<Actor> Ignore;
	Vector3 Start;
	override ETraceStatus TraceCallback() 
	{
		switch (Results.HitType) 
		{
			case TRACE_HitFloor:
			case TRACE_HitCeiling:
			case TRACE_HitNone:
				return TRACE_Stop;
			case TRACE_HitActor:
			{
				let mo = TM_Block(Results.HitActor);
				
				if (!mo || Ignore.Find(mo) < Ignore.Size())
					return TRACE_Skip;
					
				
					
				if (mo && !mo.IsPreview())
				{
					let hit = new('TM_BlockHitList');
					hit.mo = mo;
					hit.HitPos = Results.HitPos;
					hit.HitVector = Results.HitVector;				
					blocklist.Push(hit);					
				}
				return TRACE_Skip;
				
				
		//		return (blocklist.Size() > Max(0, Wanted)) ? TRACE_Stop : TRACE_Skip;
			}
			case TRACE_HitWall:
			{
				if (Results.Tier == TIER_Upper || Results.Tier == TIER_Lower) 
					return TRACE_Stop;

				let hl = Results.HitLine;
				int hf = hl.flags;
				
				if (hf & (Line.ML_BLOCKING | Line.ML_BLOCKEVERYTHING | Line.ML_BLOCKHITSCAN))
					return TRACE_Stop;
				
				if (Results.Tier == TIER_Middle && (hf & Line.ML_BLOCKING) && (hf & Line.ML_TWOSIDED))
					return TRACE_Skip;
				
			}
		}
		return TRACE_Skip;
	}
}
// The block crumbling effect, known as destroy_stage_#. 
Class TM_Block_Breaking : Actor
{
	Default
	{
		+NOINTERACTION
		+NOBLOCKMAP
		+NOTONAUTOMAP
		Scale 1.01;
	}
	States
	{
	Spawn:
		ASDF A -1;
		Stop;
	}
}

Class TM_TileEntity : TM_Block
{
	
}

Class TM_TileInfo
{
	Array<Name> Tag;
	Array<Name> Data;
}

// This class is used to be purely decorative, used to reduce the amount of 3D
// floors are needed for the maps.
Class TM_Block_Decor : TM_Block
{
	/*
	enum ETMBlockDecorFrames
	{
		Netherrack = 0,
		NetherBrick,
		SoulSand,
		SoulSoil,
		BlackStone,
		BlackStoneBrick,
		BlackStonePolished,
		Basalt,
		BasaltPolished
	};
	*/
	Default
	{
		//$Category "Triple M/Blocks/Decor"
		//$IgnoreRenderstyle
		//$NotAngled
		Height 32;
		Radius 16;
		+NOTONAUTOMAP
		+NOINTERACTION
		+NOBLOCKMAP
		+NEVERTARGET
		+NONSHOOTABLE
		-SHOOTABLE
		Tag "Decorative Block Set 1";
	}
	
	override void Tick()
	{
		Actor.Tick();
	}
	
	override void PostBeginPlay()
	{
		Actor.PostBeginPlay();
	}
	
	States
	{
	Spawn:
		ASDF A -1;
		Stop;
	}
}

Class TM_Block_Stone : TM_Block
{
	
}

Class TM_Block_Netherrack : TM_Block {}
Class TM_Block_SoulSand : TM_Block {}
Class TM_Block_SoulSoil : TM_Block {}





Class TM_Block_Decor_Netherrack : TM_Block_Decor				{ Default { Tag "Netherrack";	}}
Class TM_Block_Decor_NetherBrick : TM_Block_Decor				{ Default { Tag "Nether Brick";	}}
Class TM_Block_Decor_SoulSand : TM_Block_Decor				{ Default { Tag "Soul Sand";	}}
Class TM_Block_Decor_SoulSoil : TM_Block_Decor				{ Default { Tag "Soul Soil";	}}
Class TM_Block_Decor_BlackStone : TM_Block_Decor				{ Default { Tag "Blackstone";	}}
Class TM_Block_Decor_BlackStoneBrick : TM_Block_Decor			{ Default { Tag "Blackstone Brick";	}}
Class TM_Block_Decor_BlackStoneBrickCracked : TM_Block_Decor	{ Default { Tag "Cracked Blackstone Brick";	}}
Class TM_Block_Decor_BlackStoneChiseled : TM_Block_Decor		{ Default { Tag "Chiseled Blackstone";	}}
Class TM_Block_Decor_BlackStonePolished : TM_Block_Decor		{ Default { Tag "Polished Blackstone";	}}
Class TM_Block_Decor_Basalt : TM_Block_Decor					{ Default { Tag "Basalt";	}}
Class TM_Block_Decor_BasaltPolished : TM_Block_Decor			{ Default { Tag "Polished Basalt"; }}