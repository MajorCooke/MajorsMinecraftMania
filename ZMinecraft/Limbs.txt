//==============================================================================
//==============================================================================
// Body parts
//==============================================================================
//==============================================================================

// NOTICE: Each limb that can 'swing' needs a radius and height defined in order 
// to properly scale the swaying. Use the measurement tool and measure from the
// bottom of the limb to the pivot point. By 'swing', it's effectively the legs
// moving forward and backwards while the monster moves.

//------------------------------------------------------------------------------
// LimbSway
// 
// Performs idle swaying, adding onto the current limb's APR (Angle/Pitch/Roll)
//------------------------------------------------------------------------------

Struct LimbSway play
{
	Vector3 SineOff, // Keeps the current sine as it's updated.
			SineDist,
			SineSpeed;
			
	void Init(Vector3 SO, Vector3 SD, Vector3 SS)
	{
		SineOff = (abs(SO.X) % 360, abs(SO.Y) % 360, abs(SO.Z) % 360);
		SineDist = (abs(SD.X), abs(SD.Y), abs(SD.Z));
		SineSpeed = (abs(SS.X), abs(SS.Y), abs(SS.Z));
	}
			
	Vector3 NextSway()
	{
		// Advance the sine wave.
		SineOff.X = (SineOff.X + SineWavePerSecond * SineSpeed.X) % 360.0;
		SineOff.Y = (SineOff.Y + SineWavePerSecond * SineSpeed.Y) % 360.0;
		SineOff.Z = (SineOff.Z + SineWavePerSecond * SineSpeed.Z) % 360.0;
		
		return (Sin(SineOff.X) * SineDist.X, Sin(SineOff.Y) * SineDist.Y, Sin(SineOff.Z) * SineDist.Z);
	}
}

//------------------------------------------------------------------------------
// LimbSwing
// 
// Does active movement for limbs like legs.
//------------------------------------------------------------------------------
Struct LimbSwing play
{
	const GainCap = 8.0;
	double SwingAmp, VelTheta, Scale, VelSpring, CurSpring, AngleCap;
	
	void Init(double off, double s, double amp = 1.0)	
	{	
		VelTheta = abs(off % 360);
		Scale = s;
		SwingAmp = 1.0;
		VelSpring = 0;
	}
	
	double NextSwing(double VelPosLen, bool cosine = false, double off = 0, bool donext = true)
	{
		if (Scale ~== 0.0 || SwingAmp ~== 0.0)	return 0;
		
		// TO DO: Fix this. Make it so it looks more like a leg walking the 
		// distanceit can go based on velocity/position offsets. It's currently 
		// not moving correctly with the speed of enemy movements.
		
	//	VelAng = MC_kSpring.FancySpringAngles(CurAng, NextAng + MainAng, VelAng, 0.25, 0.1);
		
		VelSpring = MC_kSpring.DampedSpringDouble(CurSpring, VelPosLen, VelSpring, 0.25, 0.1);
		CurSpring += VelSpring;
		
		if (CurSpring ~== 0.0)	return CurSpring;
		
		double len = SwingAmp * (1.0 / Scale);
		
		double mag = Clamp((CurSpring * len), 0, SineWavePerSecond * 4);
		if (donext)
			VelTheta = (VelTheta + mag) % 360;
		double ret = 0;
		if (cosine)	ret = Cos(VelTheta) * Clamp(CurSpring * 10, 0, AngleCap);
		else		ret = Sin(VelTheta) * Clamp(CurSpring * 10, 0, AngleCap);
		
	//	Console.Printf("%.1f %.1f %.1f %.1f, %.1f", VelSpring, CurSpring, Len, Mag, Ret);
		
		return ret;
	}
}

Class MCBodyPart : MinecraftEntity
{
	const StepWait = 8;

	private bool DestroyMe;
	private int StepDelay;
	protected bool ForceIdleSway;
	protected int CurAction;
	protected double OverScale;
	protected MCBodyPartAttachment Attachment;
	protected Vector3 // For the angles, X = Angle, Y = Pitch, Z = Roll
		
		PosOff,		// Position Offsets
		RelOff,		// Relative position offsets (takes angles into account)
		AngOff,		// Secondary angle offsets (reset every tic to (0,0,0)
		SwingAngDir,		// How much to influence the APR as a scalar.
		CurAng,		// The current angle, pitch and roll.
		MainAng,	// Primary angle offsets (not reset)
		NextAng,	// For spring dampening. Target angles to reach.
		VelAng, 	// Current velocity of transition to NextAng.
		AttachPos;	// Attachment Position
		
		
	protected MC_QuatTurner Turner;
	protected Class<MCBodyPartGib> Gib;
	
	bool	CopyInvis;
	int		CopyFrames;
	double	OffX, OffY, OffZ,
			ROfX, ROfY, ROfZ,
			AttX, AttY, AttZ,
			AOffX, AOffY, AOffZ,
			VelSineOffset,
			SOX, SOY, SOZ, 
			SDX, SDY, SDZ, 
			SSX, SSY, SSZ,
			ADX, ADY, ADZ,
			SwingAmp,
			SwingAngleCap,
			StepVolume;
	Sound	StepSound;
	
	LimbSway Sway;
	LimbSwing Swing;
	MinecraftEnemy Owner;
	
	Property StepSound: StepSound;
	Property StepVolume: StepVolume;
	
	// Should this copy the master's sprite frame?
	Property CopyFrames: CopyFrames;
	// Force idle swaying motion regardless of cvar?
	Property ForceIdleSway: ForceIdleSway;
	Property CurAction : CurAction;			// See Constants.txt
	// Offset of the limb's sine wave when in motion. I.e. making one leg go back
	// while the other goes forward.
	Property CopyInvis: CopyInvis;
	Property SineOffset: SOX, SOY, SOZ;
	// 
	Property SineDistance: SDX, SDY, SDZ;
	Property SineSpeed: SSX, SSY, SSZ;
	Property VelSineOffset: VelSineOffset;
	Property Offsets: OffX, OffY, OffZ;
	Property RelOffsets: ROfX, ROfY, ROfZ;
	Property AttachOffset: AttX, AttY, AttZ;
	Property AngleOffset: AOffX, AOffY, AOffZ;
	// Used for adjusting the angle/pitch/roll of the limb. This is a scalar.
	// X = Angle, Y = Pitch, Z = Roll.
	Property SwingAngleDir: ADX, ADY, ADZ;
	Property SwingAmp: SwingAmp;
	Property SwingAngleCap: SwingAngleCap;
	Property Gib: Gib;
	
	Default
	{
		MCBodyPart.CopyInvis true;
		MCBodyPart.SwingAngleDir 0, 1, 0;
		MCBodyPart.ForceIdleSway false;
		MCBodyPart.SwingAngleCap 80;
		MCBodyPart.SwingAmp SineWavePerSecond * 0.3;
		MCBodyPart.StepVolume 1.0;
		Radius 4;
		Height 8;
		+NOINTERACTION
		+NOBLOCKMAP
		+NOTRIGGER
		+NOTONAUTOMAP
		+SEEINVISIBLE
	}
	
	override void Activate(Actor activator)
	{
		if (bKILLED || Destroyed() || !Master || !bDORMANT)	return;
		if (Attachment)	Attachment.Activate(activator);
		doSpring = false;
		UpdatePosition(Master);
		NextAng.X = Master.Angle;
		UpdateAngles(NextAng + MainAng);
		ClearInterpolation();
		bINVISIBLE = false;
		bDONTINTERPOLATE = false;
		bDORMANT = false;
	}
	
	override void Deactivate(Actor activator)
	{
		if (bKILLED || Destroyed() || !Master)	return;
		if (Attachment)	Attachment.Deactivate(activator);
		bINVISIBLE = true;
		bDONTINTERPOLATE = true;
		bDORMANT = true;
	}
	
	override void Tick()
	{
		if (!Master || IsFrozen() || bDESTROYED || bDORMANT)	
		{
			Super.Tick();
			return;
		}
		
		if (DestroyMe)
		{
			bINVISIBLE = true;
			Destroy();
			return;
		}
		
		DoPreMotion();
		Super.Tick();
		DoMotion();
		
		Translation = Owner.Translation;
		if (!Default.bBRIGHT)	bBRIGHT = Owner.bBRIGHT;
		
		if (CopyInvis)
			bINVISIBLE = (Master && Master.bINVISIBLE);
		if (!bKILLED)
		{
			if (Attachment)
			{
				Attachment.bBRIGHT = bBRIGHT;
				Attachment.bINVISIBLE = bINVISIBLE;
			}
		}
	}
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		Sway.Init((SOX,SOY,SOZ), (SDX, SDY, SDZ), (SSX, SSY, SSZ));
		Swing.Init(VelSineOffset, OverScale, SwingAmp);
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		Turner = MC_QuatTurner.Create();
		
		Swing.SwingAmp = SwingAmp;
		NextAng = (Angle, Pitch, Roll);
		CurAng = NextAng + MainAng;
		SwingAngDir = (ADX, ADY, ADZ);
		
		if (Master)
			bINVISIBLE = Master.bINVISIBLE;
	}
	
	override void OnDestroy()
	{
		if (Attachment)
			Attachment.Destroy();
		Super.OnDestroy();
	}
	
	//--------------------------------------------------------------------------
	// Custom functions
	//--------------------------------------------------------------------------
	MCBodyPart SetAttachment(Class<MCBodyPartAttachment> cls)
	{
		if (!cls)	return null;
		
		if (Attachment)
			Attachment.Destroy();
			
		Attachment = MCBodyPartAttachment(Spawn(cls, pos, ALLOW_REPLACE));
		if (Attachment)
		{
			Attachment.Owner = Owner;
			Attachment.Master = self;
			Attachment.UpdateScales(OverScale, Scale);
			Attachment.UpdateAngles(NextAng);
			Attachment.UpdatePosition(self);
		}
		return Attachment;
	}
		
	// Offsets are relative, a la A_SpawnItemEx/A_Warp.
	void SpawnGib(double VelPosLen, Vector3 Ofs = (0,0,0))
	{
		if (bKILLED || Destroyed())	return;
		bKILLED = true;
		
		// I've named all the gibs after the same with the "gib" affix after
		// so this will suffice, but the Gib property can still be overridden
		// for customization sake.
		
		if (!Gib)	
		{
			String gname = GetClassName().."Gib";
			Gib = gname;
			
			if (!Gib)	
			{
				DestroyMe = true;
				return;
			}
		}
		
		let g = MCBodyPartGib(Spawn(Gib, pos, ALLOW_REPLACE));
		if (g)
		{
			g.Warp(self, 
				(Ofs.X + g.OffX) * cos(pitch), 
				(Ofs.Y + g.OffY), 
				(Ofs.Z + g.OffZ) * -sin(pitch), 
				0, WARPF_NOCHECKPOSITION);
			g.Angle = Angle;
			g.Pitch = Pitch;
			g.Roll = Roll;
			g.Scale = Scale;
			g.Frame = Frame;
			
			bINVISIBLE = true;
			
			// Apply a random velocity in the event there's little speed.
			g.Vel3DFromAngle(ffrandom(3.0,6.0), irandom(0,359), irandom(-90, 45));
			if (Owner) g.Vel += Owner.Vel;
		}
		
		if (Attachment)	Attachment.SpawnGib(VelPosLen, Ofs);
		DestroyMe = true;
	}
	bool Destroyed() { return bDESTROYED || DestroyMe;	}
	
	
	
	
	void SetPosOffsets(Vector3 Off, bool interp = true)
	{
		if (Destroyed())	return;
		PosOff = Off;
		OffX = Off.X;
		OffY = Off.Y;
		OffZ = Off.Z;
		UpdateScales(OverScale, Scale);
		UpdatePosition(Master, interp);
	}
	virtual void UpdatePosition(Actor who, bool interp = true)
	{
		if (!Owner || Destroyed())	return;
		
		if (!who)	
		{
			who = Master;
			if (!who)	who = Owner;
			if (!who)	return;
		}
		
		Vector3 NP = MC_Map.GetWarpPos(level, Master.Pos, PosOff, CurAng.X);
		NP.Z = Owner.Pos.Z + PosOff.Z;
		Vector3 px, py, pz, origin;
		[px, py, pz] = MC_CoordUtil.GetAxes(CurAng.Y,CurAng.X,CurAng.Z);
		origin = NP; + (RelOff.x * px + RelOff.Y * py + RelOff.Z * pz);
		
		if (!(origin ~== pos))
			SetOrigin(origin, interp);
		
		if (Attachment)
		{
			[px, py, pz] = MC_CoordUtil.GetAxes(
				CurAng.Y + AngOff.Y, 
				CurAng.X + AngOff.X, 
				CurAng.Z + AngOff.Z);
			origin = pos + AttachPos.X * px + AttachPos.Y * py + AttachPos.Z * pz;
			if (!(origin ~== Attachment.Pos))
				Attachment.SetOrigin(origin, interp);
		}
		
	}
	
	// Updates the scale of all vectors based on scale so their limbs grow
	// or shrink with their height changes accordingly.
	virtual void UpdateScales(double OverScale, Vector2 Scale)
	{
		if (Destroyed())	return;
		
		bool NoResize = (self.Overscale ~== Overscale && self.Scale ~== Scale);
		
		self.OverScale = OverScale;
		Scale = Scale * OverScale;
		self.Scale = Scale;
		PosOff.XY = (OffX, OffY) * Scale.X;
		PosOff.Z  = OffZ * Scale.Y;
		RelOff.XY = (ROfX, ROfY) * Scale.X;
		RelOff.Z  = ROfZ * Scale.Y;
		AttachPos.XY = (AttX, AttY) * Scale.X;
		AttachPos.Z  = AttZ * Scale.Y;
		Swing.Scale = OverScale;
		
		if (!NoResize)
			A_SetSize(Default.Radius * Scale.X, Default.Height * Scale.Y);
		
		if (Attachment)	Attachment.UpdateScales(OverScale, Scale);
	}
	
	virtual void UpdateAngles(Vector3 Next, int turnflags = 0)
	{
		if (!Master || Destroyed())	return;
		Next = Next + AngOff;
		if (StepDelay < 1 && StepSound != "" && self is 'MCBodyPartLeg')
		{
			if (pitch < 0.0 && pitch + Next.Y >= 0.0)
			{
				StepDelay = StepWait;
				A_StartSound(StepSound, CHAN_BODY, CHANF_OVERLAP, StepVolume);
			}
		}
		
		A_SetAngle(Next.X, turnflags);
		A_SetPitch(Next.Y, turnflags);
		A_SetRoll(Next.Z, turnflags);
		
		if (Attachment)	
		{
			Attachment.UpdateAngles(Next, turnflags);
		}
	}
	
	virtual void SetNextAngles(Vector3 Next)	{	NextAng = Next;	}
	
	void SetAngles(double ang = 0.0, double pit = 0.0, double rol = 0.0, bool ofs = false, bool snap = true)
	{
		if (Destroyed())	return;
		if (ofs)	AngOff = (ang, pit, rol);
		else		MainAng = (ang, pit, rol);
		doSpring = !snap;
	}
	
	void SetAction(int act)
	{
		CurAction = act;
	}
	
	virtual void SetSwingGain(double amt) 	{	Swing.SwingAmp = amt;	}
	
	void SetAttachPos(Vector3 APR, bool snap = true)	
	{	
		AttachPos.XY = APR.XY * Scale.X;
		AttachPos.Z = APR.Z * Scale.Y;
		PostAngSet(snap);
	}
	
	void SetYaw(double ang, bool snap = true)			{	MainAng.X = ang;	PostAngSet(snap);	}
	void SetPitch(double pit, bool snap = true)			{	MainAng.Y = pit;	PostAngSet(snap);	}
	void SetRoll(double rol, bool snap = true)			{	MainAng.Z = rol;	PostAngSet(snap);	}
	
	void SetYawOffset(double ang, bool snap = true, bool persist = false)		{	AngOff.X = ang; if (persist) AOffX = ang;	PostAngSet(snap);	}
	void SetPitchOffset(double pit, bool snap = true, bool persist = false)		{	AngOff.Y = pit;	if (persist) AOffY = pit;	PostAngSet(snap);	}
	void SetRollOffset(double rol, bool snap = true, bool persist = false)		{	AngOff.Z = rol;	if (persist) AOffZ = rol;	PostAngSet(snap);	}
	
	void SetPersistantAPROffset(Vector3 APR, bool snap = true)
	{
		AOffX = APR.X;
		AOffY = APR.Y;
		AOffZ = APR.Z;
		PostAngSet(snap);
	}
	
	void PostAngSet(bool snap)
	{
		VelAng = (0,0,0);
		doSpring = !snap;
	}
	
	// Primarily used for the arms/legs if needed. Also, didn't want to create
	// another subclass for limbs. If 'swinging' is false, it'll modify the sway
	// based on if it's used or not. Arms and legs have their own predetermined
	// functional overrides.
	virtual void SetSineOffset(Vector3 off, bool swinging = false){}
	virtual void SetSineDistance(Vector3 dist, bool swinging = false) {}
	virtual void SetSineSpeed(Vector3 speed, bool swinging = false) {}
	
	bool SetAnimation(StateLabel next)
	{
		if (Destroyed() || next == null)	return false;
		
		State s = ResolveState(next);
		if (s)	SetState(s);
		return (s != null);
	}
	
	// Motion handling virtual.
	virtual void DoPreMotion()	
	{
		if (Destroyed())	return;
		if (StepDelay > 0)	StepDelay--;
		// Counteract the MainAng and AngOff. We don't want it part of the
		// calculations or it won't work correctly.
		CurAng = (Angle, Pitch, Roll) - AngOff;
		AngOff = (0,0,0);
	}
	protected bool doSpring;
	virtual void DoMotion()		
	{
		if (Destroyed() || !Owner)	return;
		if (CurAction > 0 && !Owner.bDORMANT)
		{
			if ((MCC_IdleSway || ForceIdleSway) && (CurAction & E_Sway))
			{
				AngOff = Turner.GetTurn((0,0,0), Sway.NextSway());
			}
			if (CurAction & E_Swing)
			{
				Swing.AngleCap = SwingAngleCap;
				double NS = Swing.NextSwing(Owner.VelPosLen, true);
				double NC = Swing.NextSwing(Owner.VelPosLen, donext: false);
				AngOff.X += NS * SwingAngDir.X;
				AngOff.Y += NC * SwingAngDir.Y;				
				AngOff.Z += NS * SwingAngDir.Z;
			}
		}
		if (!doSpring || Owner.bDORMANT)
		{
			CurAng = NextAng + MainAng;
			doSpring = true;
		}
		else
		{
			VelAng = MC_kSpring.FancySpringAngles(CurAng, NextAng + MainAng, VelAng, 0.25, 0.1);
			CurAng += VelAng;
		}
		
		DoMotionAdjustments();
		UpdateAngles(CurAng, SPF_INTERPOLATE);
		
	}
	
	virtual void DoMotionAdjustments()
	{
		AngOff += (AOffX, AOffY, AOffZ);
	}
	
	Vector3, Vector3, Vector3 GetAngles()
	{
		return CurAng, VelAng, NextAng;
	}
	
	void CopyAngles(MCBodyPart limb)
	{
		if (!limb)	return;
		
		[CurAng, VelAng, NextAng] = limb.GetAngles(); 
	}
	
	States
	{
	Spawn:
		ASDF A -1;
		Stop;
	}
}

//------------------------------------------------------------------------------
// Head
//
// 
//------------------------------------------------------------------------------

Class MCBodyPartHead : MCBodyPart 
{
	meta bool NoAim;
	Property NoAim: NoAim;
	Default
	{
		MCbodyPartHead.NoAim false;
		Radius 1.6;
		Height 1.6;
	}

	MinecraftEnemy Trg;
	MCBodyPartHead TargetHead;
	override void DoMotion()
	{
		if (!Owner)	return;
		
		if (NoAim)
		{
			Super.DoMotion();
			return;
		}
		
		int flag = FAF_TOP;
		double zof = 0;
		
		// If the enemy is a player, look at the camera.
		Target = (Owner.Target != Owner.Goal) ? Owner.Target : null;
		
		if (Target is 'PlayerPawn')
		{
			flag = FAF_BOTTOM;
			if (Target.Player)
				zof = Target.Player.ViewZ - Target.Pos.Z;
			
			else
				zof = 0.8;
		}
		// Look at the other fellow's head.
		else if (Target is 'MinecraftEnemy')
		{
			Trg = MinecraftEnemy(Target);
			if (Trg)
			{
				TargetHead = Trg.GetHead();
				if (TargetHead)
				{
					Target = TargetHead;
					flag = FAF_MIDDLE;
				}
			}
		}
		else
		{
			flag = FAF_BOTTOM;
			zof = 0.75;
		}
		
		if (Target && ((Target == TargetHead) || (Target.Health > 0)))
		{
			Angle = Owner.Angle;
			Pitch = 0;
			
			if (bNOFEAR || (!Owner.bFRIGHTENED && !Target.bFRIGHTENING))
			{
				A_Face(Target, 90, 45, 0, 0, flag, zof);
				NextAng = (Angle, Pitch, Roll);
				Angle = CurAng.X;
				Pitch = CurAng.Y;
				Roll =	CurAng.Z;
			}
		}
		Super.DoMotion();
	}
}

Class MCBodyPartBody : MCBodyPart
{
}

Class MCBodyPartArm : MCBodyPart
{	
	Default
	{
		MCBodyPart.CurAction E_Sway;
		MCBodyPart.SineOffset 0, 0, 0;			// Starting offset
		MCBodyPart.SineDistance 1, 2, 0;		// Wave Size
		MCBodyPart.SineSpeed 0.1, 0.2, 0;		// Waves Per Second
		MCBodyPart.AttachOffset 0, 0, -1.6;
	}
	
	override void SetSineOffset(Vector3 off, bool swinging)	
	{	
		if (swinging)	Swing.VelTheta = off.x;
		else			Sway.SineOff = off;	
	}
	override void SetSineDistance(Vector3 dist, bool swing) {	Sway.SineDist = (abs(dist.x), abs(dist.y), abs(dist.z));	}
	override void SetSineSpeed(Vector3 sped, bool swing) 	{	Sway.SineSpeed = sped;	}
	
	States
	{
	ZombieMelee:
		---- A 8 SetPitch(-160, false);
		---- A -1 SetPitch(-90, false);
		Goto Spawn;
	}
}

Class MCBodyPartLeg : MCBodyPart
{
	Default
	{
		MCBodyPart.CurAction E_Swing;
		MCBodyPart.VelSineOffset 0;
	}
	
	override void SetSineOffset(Vector3 off, bool swinging)	
	{	Swing.VelTheta = off.x;	}
}

//==============================================================================
// Gibbed Parts
//==============================================================================

Class MCBodyPartGib : MinecraftEntity abstract
{
	const FadeTime = 1.0 / 35.0;
	const TimeCap = 90.0;
	const Timing = TimeCap / 17.5;
	
	double OffX, OffY, OffZ;
	
	Vector3 Turning; // X = Angle, Y = Pitch, Z = Roll
	
	private Vector2 HoldAng;
	private int LifeTime;
	private double Timer, StartPitch, VelPosLen;
	protected double EndPitch, EndRoll;
	private bool DualSideRoll, DualSidePitch;
	
	Property DualSideRoll: DualSideRoll;
	Property DualSidePitch: DualSidePitch;
	Property Offsets: OffX, OffY, OffZ;
	Property LifeTime: LifeTime;
	Property EndPitch: EndPitch;
	Property EndRoll: EndRoll;
	Default
	{
		MCBodyPartGib.Offsets 0, 0, 0;
		MCBodyPartGib.LifeTime 350;
		MCBodyPartGib.EndPitch -90;
		MCBodyPartGib.EndRoll 0;
		Projectile;
		+THRUACTORS
		+CANBOUNCEWATER
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		+BOUNCEAUTOOFFFLOORONLY
		+NOTRIGGER
		-NOGRAVITY
		+CANNOTPUSH
		+DONTSPLASH
		BounceType "Doom";
		BounceFactor 0.4;
		WallBounceFactor 0.8;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		VelPosLen = vel.Length();
		double velo = min(VelPosLen * 0.2, 20.0);
		Turning = (
			ffrandom(-2.0, 2.0) * velo,
			ffrandom(-2.0, 2.0) * velo,
			ffrandom(-2.0, 2.0) * velo);
	}
	
	void Turn()
	{
		if (!(Turning ~== (0,0,0)))
		{
			A_SetAngle(Angle + Turning.X, SPF_INTERPOLATE);
			A_SetPitch(Pitch + Turning.Y, SPF_INTERPOLATE);
			A_SetRoll(Roll + Turning.Z, SPF_INTERPOLATE);
		}
	}
	
	void ResetDirection()
	{
		if (Timer ~== 0.0)
		{
			HoldAng = (Pitch, Roll);
		//	if (DualSidePitch)	
		}
		Timer += Timing;
		double sn = abs(cos(90 + Timer));
		
		Vector2 between = MC_VectorUtil.LerpUnclampedVec2(HoldAng, (EndPitch, EndRoll), sn);
		A_SetPitch(between.X, SPF_INTERPOLATE);
		A_SetRoll(between.Y, SPF_INTERPOLATE);
	}
	
	override void Tick()
	{
		if (IsFrozen())	return;
		
		Super.Tick();
		
		// Counteract gravity when underwater.
		if (!bNOINTERACTION && WaterLevel > 1)
			Vel.Z += (Gravity * 0.5);
		
		if ((bKILLED && MCC_ShortGibLives) || --LifeTime < 1)
			A_FadeOut(FadeTime);
	}
	
	States
	{
	Spawn:
		ASDF A 0;
		---- A 1 Turn();
		Wait;
	Death:
		---- AAAAAAAAAAAAAAAAA 1
		{
			bNOINTERACTION = true;
			bMOVEWITHSECTOR = true;
			A_Stop();
			ResetDirection();
		}
		---- A -1 { bKILLED = true; }
		Stop;
	}
}