extend class TM_MapEvent
{
	bool SetSpawnList(out TM_SpawnList list)
	{
		if (!list)	return false;
		
		return false;
	}
}

extend class TM_Handler
{
	// The primary spawn list.
	private void CreateSpawnList()
	{
		SpawnList = TM_SpawnList.Create();
		
		let ev = TM_MapEvent.Fetch();
		if (ev && ev.SetSpawnList(SpawnList))
			return;
		
		// Parameters are as follows:
		// Actor name, easy, normal, hard, dimension, and group.
		SpawnList.Add('TM_Zombie',			300, 300, 300);
		SpawnList.Add('TM_Skeleton',		300, 300, 300);
		SpawnList.Add('TM_ZombieBaby',		025, 050, 150, cv: "TMV_ZombieBaby");
		SpawnList.Add('TM_Spider',			075, 100, 125);
		SpawnList.Add('TM_Creeper',			075, 150, 250);
		SpawnList.Add('TM_Ziglin',			010, 075, 150,	Dim_Hell);
		SpawnList.Add('TM_SkeletonWither',	010, 030, 050,	Dim_Hell);
		SpawnList.Add('TM_Blaze',			010, 020, 030,	Dim_Hell);
		SpawnList.Add('TM_Enderman',		010, 020, 025,	Dim_Overworld|Dim_Hell|Dim_End,	'Big');
		SpawnList.Add('TM_Ghast',			001, 005, 010,	Dim_Hell,	'Big');
		
		
	}
	private TM_SpawnList SpawnList;
	private int MaxMobs;
	
	//==========================================================================
	// Performs the countdown to attempt spawning monsters.
	// 
	// If peaceful mode is enabled or monster spawning disabled, forces the
	// timer to 1 second and holds it there until monsters are allowed to spawn.
	// Also is responsible for ensuring players have damage reduction against
	// specific types for balance.
	//==========================================================================
	private bool WasPeaceful;
	private void HandleMapSpawns()
	{
		// Monsters self despawn, but that code is in the monsters themselves.
		if (!TMV_Spawning || (TMV_Peaceful && TMV_PeacefulBehavior <= CV_Stay))
		{
		
			Timer[S_Spawn] = 35;			
		}
		else if (--Timer[S_Spawn] < 1)
		{
			if (Timer[S_Spawn] == 0)
			{
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (!playeringame[i] || !players[i].mo)	continue;
					let plr = players[i].mo;
					if (plr && !plr.FindInventory('TM_PlayerProtection'))
						plr.A_GiveInventory('TM_PlayerProtection',1);
				}
			}
			if (SpawnList && SpawnList.NoSpawns)
				Timer[S_Spawn] = 35;
			else
				TriggerMapSpawns();
		}
		WasPeaceful = TMV_Peaceful;
		
		if (TMV_AIDifficulty_Prev != TMV_AIDifficulty)
		{
			TMV_AIDifficulty_Prev = TMV_AIDifficulty;
			for (int i = 0; i < Monsters.Size(); i++)
			{
				let mo = TM_Monster(Monsters.Actors[i]);
				if (mo && !mo.bKILLED && !mo.bDESTROYED)
					mo.AdjustDifficulty();
			}
		}
	}
	
	//==========================================================================
	// Handles the clock for spawning monsters and queued monsters.
	//==========================================================================
	private void TriggerMapSpawns()
	{
		int ret = -1;
		
		int reset = Max(35,
			Minute * TMV_SpawnDelayMinute + 
			Second * TMV_SpawnDelaySecond + 
			Second * irandom(0,TMV_SpawnDelayRandom));
		
		MaxMobs = int(round(TMV_Spawns * TMV_SpawnMul));
		
		if (MobCount < MaxMobs)
		{
			PrepareSpawnNormal();
		}
		else 
		{
			if (MoCue)	
			{
				MoCue.Destroy();
				MoCue = null;
			}
			SpawnFails = 0;
			ret = reset;
		}
		
		Timer[S_Spawn] = ret;
	}
	//==========================================================================
	// Attempts a normal map spawn via timer, and prepares it for creation.
	// Only attempts to create 10 monsters at a time in order to keep a lid on
	// performance issues.
	//==========================================================================
	
	private TM_Monster MoCue;
	private int SpawnFails;
	private void PrepareSpawnNormal()
	{	
		if (!SpawnList)	CreateSpawnList();
				
		// Go through the specified class queue and try to spawn as many of the
		// monsters as possible, setting them all as dormant.
		if (!MoCue)
		{
			Class<Actor> cls = SpawnList.PickRandom();
			
		//	SpawnList.FilterSpawns(cls);
			
			MoCue = TM_Monster(Actor.Spawn(cls, (0,0,0), ALLOW_REPLACE));
			if (MoCue)
			{
				MoCue.bNODROPOFF = true;
				MoCue.Deactivate(null);
			}
			else return;
		}
		
		
		//----------------------------------------------------------------------
		// Now try to position them one at a time for activating.
		
		if (MoCue)
		{
			AttemptMonsterPlacement();
			if (MoCue && ++SpawnFails >= 10)
			{
				MoCue.Destroy();
				MoCue = null;
			}
		}
	}	
	
	bool CheckSectorDamage(Sector ss)
	{
		if (!ss || !MoCue)	return false;
		
		if (MoCue.CanEnvironmentDamage() && MoCue.CanSectorDamage())
		{
			// Damaging Sectors
			if (ss.DamageAmount > 0 && !MoCue.IsImmune(ss.DamageType))
				return true;
			
			// Terrain definition
			let ter = ss.GetFloorTerrain(sector.ceiling);
			if (!ter || Ter.DamageAmount < 1 || MoCue.IsImmune(ter.DamageMOD))	
				ter = ss.GetFloorTerrain(sector.floor);
			if (ter && ter.DamageAmount > 0 && !MoCue.IsImmune(ter.DamageMOD))
				return true;
			
		}
		return false;
	}
	/*
	void GetZPositions(out Array<double> spawnZ, out Array<TM_XFloor> XSwim, Vector3 curPos, Vector3 newPos)
	{
		spawnZ.Clear();
		Vector2 curPos = newPos.xy;
		Sector s = level.pointInSector(curPos);
		while (s.Portals[Sector.floor])
		{
			SectorPortal info = level.SectorPortals[s.Portals[Sector.floor]];
			Sector newSec = info.mDestination;
			if (!newSec)
				break;
			
			curPos += info.mDisplacement;
			s = newSec;
		}

		spawnZ.Push(s.floorPlane.ZAtPoint(curPos));
		do
		{
			for (uint i = 0; i < s.Get3DFloorCount(); ++i)
			{
				F3DFloor ff = s.Get3DFloor(i);
				if (!(ff.flags & F3DFloor.FF_EXISTS))
					continue;
				
				double tz = ff.top.ZAtPoint(curPos.xy);
				double bz = ff.bot.ZAtPoint(curPos.xy);
				
				if (ff.flags & F3DFloor.FF_SWIMMABLE)
				{
					
				}
				
				spawnZ.Push(tz);
			}
			
			if (!s.Portals[Sector.ceiling])
				break;
			
			SectorPortal info = level.SectorPortals[s.Portals[Sector.ceiling]];
			Sector newSec = info.mDestination;
			if (!newSec)
				break;
			
			curPos += info.mDisplacement;
			s = newSec;
		} while (true);
	}
	*/
	
	const _AngleInc = 30;
	const _Div = 360 / _AngleInc;
	void AttemptMonsterPlacement()
	{
		// Not exactly player aware but honestly, GZDoom isn't in a state of
		// multiplayer friendly at the moment so just get the closest player and
		// spawn around them. When the time comes, I'll refactor this.
		bool envirodmg = MoCue.CanEnvironmentDamage();
		bool drowndmg = MoCue.CanDrown();
		bool secdmg = MoCue.CanSectorDamage();
		
		
		
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i] || !players[i].mo)	continue;
			Actor plr = players[i].mo;
			if (!plr)	
			{
				if (TMV_Debug == 24)	Console.Printf("-1");
				continue;
			}
				
			
			double ang = irandom(0,_Div) * _AngleInc;
			
			int j = random(0,_AngleInc);
			
			for (int k = 0; k < _AngleInc; k++)
			{
				j = (j + 1) % _AngleInc;
				ang = irandom(0, _AngleInc) * j;
				int dist = irandom(MoCue.SpawnRangeMin, MoCue.SpawnRangeMax);
				Vector3 next; next.XY = plr.Vec2Angle(dist, ang);
				TM_Global.SnapVector2(next.XY, (32, 32), (16, 16));
				
				next.Z = MoCue.GetZAt(next.X, next.Y, ang, GZF_ABSOLUTEPOS|GZF_ABSOLUTEANG|GZF_NO3DFLOOR);
				
				
				if (!level.IsPointInLevel(next))
				{
					if (TMV_Debug == 24)	Console.Printf("-2");
					continue;
				}
				
				// Don't spawn in sectors blocking player respawns.
				// Don't allow spawning inside skyboxes.
				Sector s = Level.PointInSector(next.XY);
				if (!s || (s.Flags & Sector.SECF_NORESPAWN) || IsSectorBanned(s.Index()) ||
					s.GetUDMFInt("user_nospawn") > 0)
				{
					if (TMV_Debug == 24)	
					{
						if (s.Flags & Sector.SECF_NORESPAWN)
							Console.Printf("-3");
						else if (IsSectorBanned(s.Index()))
							Console.Printf("-4");
						else if (s.GetUDMFInt("user_nospawn") > 0)
							Console.Printf("-5");
					}
					continue;
				}
				
				bool TryGood = false;
				int xcount = s.Get3DFloorCount();
				// 3D floors are present in this sector. Iterate through them and
				// try to find good Z positions for trying.
				if (xcount > 0)
				{
					Array<double> TryZ; TryZ.Clear();
					
					double fz = s.LowestFloorAt(next.XY);
					double tz = s.HighestCeilingAt(next.XY);
					double cz = tz;
					
					
					TryZ.Push(fz);
					
					// Won't fit regardless of 3d floors, so skip it.
					if (abs(tz - fz) < MoCue.Height)
						continue;
						
					Array<TM_XFloor> XSwim; XSwim.Clear();
					
					if (envirodmg && 
						(drowndmg || secdmg))
					{					
						for (int m = 0; m < xcount; m++)
						{
							let xf = s.Get3DFloor(m);
							if (xf && xf.Flags & (F3DFloor.FF_EXISTS|F3DFloor.FF_SWIMMABLE))
							{
								let txf = TM_XFloor.NewXFloorPtr(xf, m);
								
								if (txf && txf.Swimmable)	
								{
									XSwim.Push(txf);
								}
							}
						}
					}
					/*
					double headz = MoCue.Height * 0.5;
					double headtop = headz;
					let head = MoCue.GetHead();
					if (head) 
					{
						headz = head.Pos.Z - MoCue.Pos.Z;
						headtop = headz + head.Height * 0.75;
					//	headoff = level.Vec3Diff(MoCue.Pos, 
					}
					*/
					bool liq = false;
					do
					{
						
						Sector ss; F3DFloor xf;
						[cz, ss, xf] = s.NextLowestFloorAt(next.X, next.Y, cz - 1, FFCF_3DRESTRICT);
						
						if (xf)	ss = xf.model;
												
						
						// This array only contains contents if the mob can take
						// damage from drowning or sectors. Better than calling
						// TryMove and SetZ a bunch of times. 
						for (int m = 0; m < XSwim.Size(); m++)
						{
							ss = XSwim[m].XSector;
							if (!ss)	continue;
							
							double topz = ss.ceilingplane.ZAtPoint(next.XY);
							double botz = ss.floorplane.ZAtPoint(next.XY);
							// Damaging sector.
							
							//if (Top < botz || pos.Z > topz)
							
							if (cz + MoCue.Height < botz || cz > topz)
								continue;
							
							if (CheckSectorDamage(ss))
							{
								liq = true;
								break;
							}
							
						}
						
						// Standing in a liquid sector that can harm it, so skip it.
						if (liq)	break;
						
						TryZ.Push(cz + 1);
					} 
					while(cz > fz)
					
					if (liq) continue;
					
					// Go through and remove all Z positions that are outside
					// the range of ZMin and ZMax.
					if (s.GetUDMFInt("user_LimitZ") > 1)
					{
						int zmin = s.GetUDMFInt("user_ZMin");
						int zmax = s.GetUDMFInt("user_ZMax");
						
						Array<double> temp; temp.Clear();
						for (int i = 0; i < TryZ.Size(); i++)
						{
							double try = TryZ[i];
							if (try >= zmin && try <= zmax)
								temp.Push(try);
						}
						TryZ.Move(temp);
					}
					
					TM_Global.SetPos(MoCue, next, false);
					
					while (TryZ.Size() > 0)
					{
						int rng = irandom(0, TryZ.Size() - 1);
						Vector3 to = (next.XY, TryZ[rng]);
						
						if (level.Vec3Diff(to, plr.pos).Length() > MoCue.SpawnRangeMax)
						{	TryZ.Delete(rng);	continue;	}
						
						MoCue.SetZ(to.Z);
						MoCue.FindFloorCeiling();
						MoCue.UpdateWaterLevel(false);
						
						if (MoCue.WaterLevel < 3 || !MoCue.CanDrown())
							TryGood = MoCue.TryMove(to.XY, true);
						
						// Found a good spot. Prepare it for activation.
						if (TryGood)	break;
						
						// Not a good spot so delete the attempt.
						TryZ.Delete(rng);
					}
					
				}
				else
				{
					if (CheckSectorDamage(s))
						continue;
					
					// Outside of spawn range from players.
					if (level.Vec3Diff(next, plr.pos).Length() > MoCue.SpawnRangeMax)
						continue;
					
					// Found a good spot, now check its position.
					TM_Global.SetPos(MoCue, next, false);
					
					
					if (MoCue.bSPAWNFLOAT)
						next.Z = ffrandom(MoCue.FloorZ, MoCue.CeilingZ - MoCue.Height);
					else
						next.Z = MoCue.FloorZ;
					MoCue.SetZ(next.Z);
					TryGood = MoCue.TryMove(MoCue.Pos.XY, false);
				}
				
				if (TryGood)
				{
					MoCue.ClearInterpolation();
					MoCue.bNODROPOFF = MoCue.Default.bNODROPOFF;
					MoCue.Angle = irandom(0,359);
					MoCue.AlignMoveDir();
					MoCue.StoreHealthMul();
					MoCue.StartHealth = int(round(MoCue.Health * TMV_HealthMul));
					MoCue.Health = MoCue.StartHealth;
					MoCue.Activate(null);
					MoCue = null;
					SpawnFails = 0;
					return;
				}
			}
		}
	}
}

//==============================================================================
// Spawn Lists
//
// TM_Spawn contains the classname, group it belongs to, and weight of the spawn.
// The weight behaves exactly like RandomSpawner's.
//==============================================================================
Class TM_Spawn play
{
	Class<Actor> ClassName;	// Name of the monster to spawn
	Class<Actor> SubClass;	// If valid, serves as an alternative to spawn with weight
	Name Group;
	Int Weight[3], 
		Dimension;
	String CV;
	transient CVar SVar;
}

Class TM_SpawnList play
{
	bool NoSpawns; // Disables all spawns.
	mixin TM_FastRNG;
	private Array<TM_Spawn> Classes;
	
	static TM_SpawnList Create()
	{
		let s = new('TM_SpawnList');
		s.Clear();
		return s;
	}
	
	//--------------------------------------------------------------------------
	// Adds a class. Must be valid and weight > 0 or it won't add.
	// If the class is already existing, update it instead of wasting memory.
	// Also, only changes the group if not '' (blank). Use 'None' to clear.
	/*
	void Add(Class<Actor> cls, int easy, int med, int hard, int dim = Dim_Overworld, Name g = '')
	{
		AddClass(cls, null, easy, med, hard, dim, g);
	}
	
	void AddSub(Class<Actor> cls, Class<Actor> sub, int easy, int med, int hard, int dim = Dim_Overworld, Name g = '')
	{
		AddClass(cls, sub, easy, med, hard, dim, g);
	}
	*/
	
	void Add(Class<Actor> cls, int easy, int med, int hard, 
			int dim = Dim_Overworld, Name g = '', String cv = "")
	{
		int size = Classes.Size();
		
		for (int i = 0; i < Classes.Size(); i++)
		{
			if (cls == Classes[i].ClassName)
			{
				Classes[i].Weight[Dif_Easy] = easy;
				Classes[i].Weight[Dif_Medium] = med;
				Classes[i].Weight[Dif_Hard] = hard;
			//	Classes[i].SubClass = sub;
				Classes[i].cv = cv;
				if (g == 'None' || !cls)	Classes[i].Group = '';
				else if (g != '')			Classes[i].Group = g;
				
				return;
			}
		}
		
		let sp = new('TM_Spawn');
		sp.ClassName = cls;
	//	sp.SubClass = sub;
		sp.Weight[Dif_Easy] = easy;
		sp.Weight[Dif_Medium] = med;
		sp.Weight[Dif_Hard] = hard;
		sp.Dimension = dim;
		sp.cv = cv;
		sp.Group = (g == 'None') ? '' : g;
		
		Classes.Push(sp);
	}
	
	void Clear()	{	Classes.Clear();	}
	
	//--------------------------------------------------------------------------
	// Picks a random monster based on the group it belongs to.
	// If no group is specified, it'll choose any.
	//
	// Arguments
	//	*blacklist
	//		A CAArray object 
	//	*group 
	//		Filters the selection by the group given (whitelist)
	//	*exclude
	//		If true, blacklists the group instead of whitelist.
	
	Class<Actor>, Name PickRandom(TM_CAArray Blacklist = null, Name group = '', 
		bool exclude = false) const
	{
		if (Classes.Size() < 1)
			return null, '';
	
		bool any = (group == '' || group == 'None');
		
		Array<TM_Spawn> Queue;	Queue.Clear();
		int Weight = 0;
		int Size = Classes.Size();
		int Diff = TMV_Difficulty;
		
		// Get all applicable entities.
		for (int i = 0; i < Classes.Size(); i++)
		{
			let c = Classes[i];
			if (!c || !c.Classname || c.Weight[Diff] < 1)
				continue;
				
			// Skip blacklisted actors.
			if (BlackList && BlackList.Find(c.Classname) < BlackList.Size())
				continue;
			
			// Skip non-matching groups.
			if (!any && ((exclude && group == c.Group) || (!exclude && group != c.Group)))
				continue;
			
			// Check if the cvar exists. If it does and is disabled, skip it.
			if (!c.SVar) 
				c.SVar = CVar.FindCVar(c.cv);
			if (c.SVar && !c.SVar.GetBool())
				continue;
			Queue.Push(c);
			Weight += c.Weight[diff];
		}
		
		// Now that we have our list of valid classes, choose one for spawning.
		Size = Queue.Size();
		if (Size > 1)
		{
			int n = irandom(0, Weight - 1);
			
			for (int i = 0; i <= Size; i++)
			{
				if (i >= Size)
					i = 0;
					
				n -= Queue[i].Weight[Diff];
				
				if (n < 0)	
					return Queue[i].Classname, Queue[i].Group;
			}
		}
		else if (Size == 1)
			return Queue[0].Classname, Queue[0].Group;
		
		return null, '';
	}
	/*
	void GetSubClasses(Class<Actor> cls, out Array<TM_Spawn> sub)
	{
		sub.Clear();
		if (!cls)	return;
		for (int i = 0; i < Classes.Size(); i++)
		{
			let sc = Classes[i];
			if (!sc || sc.SubClass != cls)	continue;
			
			sub.Push(sc);
		}
	}
	*/
	void FilterSpawns(in out Class<Actor> cls)
	{
		if (cls == 'TM_ZombieBaby' && !TMV_ZombieBaby)
			cls = 'TM_Zombie';
	}
}


