extend class MinecraftHandler
{
	// The primary spawn list.
	private void CreateSpawnList()
	{
		SpawnList = MCSpawnList.Create();
		SpawnList.Add('MCZombie',			3);
		SpawnList.Add('MCSkeleton',			3);
		SpawnList.Add('MCCreeper',			1);
	}
	
	private AArray SpawnQueue;
	private AArray SpawnQueuePriority;
	private CAArray ClsQueue;
	private CAArray ClsQueuePriority;
	private MinecraftEnemy MoToSpawn;
	private int MaxMobs;
	
	private void InitQueues()
	{
		SpawnQueue = AArray.Create();
		SpawnQueuePriority = AArray.Create();
		ClsQueue = CAArray.Create();
		ClsQueuePriority = CAArray.Create();
	}
	
	private void CheckClassQueues()
	{
		CAArray rays[2];
		rays[0] = ClsQueue;
		rays[1] = ClsQueuePriority;
		
		for (int i = 0; i < rays.Size(); i++)
		{
			Array<Class<Actor> > temp; temp.Clear();
			// CAArray has a Size() function to get the Classes[index].Size().
			for (int j = 0; j < rays[i].Size(); j++)
			{
				Class<Actor> c1 = rays[i].Classes[j];
				if (c1)
				{
					let check = (Class<MinecraftEnemy>)(c1);
					if (check)	
					{
						let defs = GetDefaultByType(check);
						if (!defs.PeacefulDespawn)
							temp.Push(c1);
					}
				}
			}
			rays[i].Classes.Move(temp);
		}
	}
	
	//==========================================================================
	//
	//==========================================================================
	private void TriggerMapSpawns()
	{
		int ret = Timer[S_Spawn] + 1;
		int reset = random[rng](SpawnTimerMin, SpawnTimerMax);
		
		MaxMobs = int(round(MCC_Spawns * MCC_SpawnMul));
		
		// Peaceful mode. 
		if (MCC_Peaceful && MCC_PeacefulBehavior <= CV_Stay)
		{
			ret = reset;
			
			// Everything Minecraft related must despawn.
			// Monsters auto-destroy themselves when set to force despawn, so
			// wipe it all out.
			if (MCC_PeacefulBehavior <= CV_Despawn)
			{
				SpawnQueue.Clear();
				SpawnQueuePriority.Clear();
				ClsQueue.Clear();
				ClsQueuePriority.Clear();
			}
			else if (MCC_PeacefulBehavior == CV_Minecraft)
			{
				CheckClassQueues();
			}
		}
		// Not in peaceful mode, check if spawning is wanted.
		else if (MCC_Spawning && !level.IsFrozen())
		{
			PrepareSpawnNormal(SpawnQueuePriority, ClsQueuePriority);
			
			if (MobCount < MaxMobs)
				PrepareSpawnNormal(SpawnQueue, ClsQueue);
			else ret = reset;
		}
		else ret = reset;
		
		Timer[S_Spawn] = ret;
	}
	
	
	
	//==========================================================================
	// Attempts a normal map spawn via timer, and prepares it for creation.
	// Only attempts to create 10 monsters at a time in order to keep a lid on
	// performance issues.
	//==========================================================================
	
	const MaxQueue = 10;
	private bool PrepareSpawnNormal(out AArray Cue, out CAArray ClsCue)
	{
		if (!SpawnList)	CreateSpawnList();
		
		if (!Cue)		Cue = AArray.Create();
		if (!ClsCue)	ClsCue = CAArray.Create();
		
		// Go through the specified class queue and try to spawn as many of the
		// monsters as possible, settinng them all as dormant.
		if (Cue.Size() < 1)
		{
			bool Finished = true;
			for (int i = 0; i < ClsCue.Size(); i++)
			{
				if (!ClsCue.Classes[i])	continue;
				
				let mon = MinecraftEnemy(Actor.Spawn(ClsCue.Classes[i], (0,0,0), ALLOW_REPLACE));
				if (mon)
				{
					mon.bNODROPOFF = true;
					mon.Deactivate(null);
					Cue.Push(mon);
					
					// Only spawn so many.
					if (Cue.Size() >= MaxQueue && Cue.Clean() >= MaxQueue)
					{
						Finished = false;
						break;
					}
				}
			}
			if (Finished)
				ClsCue.Clear();
		}
		
		//----------------------------------------------------------------------
		// Now try to position them one at a time for activating.
		if (!MoToSpawn)	
		{
			for (int i = 0; i < Cue.Size(); i++)
			{
				if (!Cue.Actors[i])	continue;
			
				MoToSpawn = MinecraftEnemy(Cue.Actors[i]);
				if (MoToSpawn)	
				{
					Cue.Actors[i] = MoToSpawn;
					break;
				}
				
			}
			
			// The queue is empty, so generate a random mob.
			if (!MoToSpawn)
			{
				Class<Actor> mo = SpawnList.PickRandom();
				if (!mo)	return false;
				
				MoToSpawn = MinecraftEnemy(Actor.Spawn(mo, (0,0,0), ALLOW_REPLACE));
				if (MoToSpawn)
				{
					MoToSpawn.bNODROPOFF = true;
					MoToSpawn.Deactivate(null);
				}
				else return false;
			}
		}
			
		return AttemptMonsterPlacement();
	}
	
	bool AttemptMonsterPlacement()
	{
		if (!MoToSpawn)	return false;
	
		// Not exactly player aware but honestly, GZDoom isn't in a state of
		// multiplayer friendly at the moment so just get the closest player
		// and spawn around them.
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i] || !players[i].mo)	continue;
			Actor plr = players[i].mo;
			if (!plr)	continue;
			
			
			
			double inc = 30;
			double div = 360 / inc;
			double ang = random[rng](0,12) * inc;
			
			int j = random[rng](0,inc);
			
			for (int k = 0; k < inc; k++)
			{
				j = (j + 1) % inc;
				ang = random(0, inc) * j;
				double dist = random[rng](32, 128) * 32;
				Vector3 next; next.XY = plr.Vec2Angle(dist, ang);
				next.Z = MoToSpawn.GetZAt(next.X, next.Y, ang, GZF_ABSOLUTEPOS|GZF_ABSOLUTEANG|GZF_NO3DFLOOR);
				if (!level.IsPointInLevel(next) || level.Vec3Diff(next, plr.pos).Length() > 4096)
					continue;
					
				Sector s = Level.PointInSector(next.XY);
				
				if (MCC_EnvironmentDamage && MCC_SectorDamage && s.DamageAmount > 0 &&
					MoToSpawn.ApplyDamageFactor(s.DamageType, s.DamageAmount) > 0)
					continue;
					
				MoToSpawn.SetOrigin(next, false);
				MoToSpawn.SetZ(MoToSpawn.FloorZ);
				
				
				
				if (MoToSpawn.TryMove(MoToSpawn.pos.XY, false))
				{
					MoToSpawn.bNODROPOFF = MoToSpawn.Default.bNODROPOFF;
					MoToSpawn.Angle = random(0,359);
					MoToSpawn.Activate(null);
					MoToSpawn = null;
					return true;
				}
			}
		}
		return false;
	}
}