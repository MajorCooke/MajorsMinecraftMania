extend class MinecraftHandler
{
	// The primary spawn list.
	private void CreateSpawnList()
	{
		SpawnList = MCSpawnList.Create();
		
		// Actor name, easy, normal, hard, dimension, and group.
		SpawnList.Add('MCZombie',			300, 300, 300);
		SpawnList.Add('MCZombieBaby',		025, 050, 075);
		SpawnList.Add('MCSkeleton',			300, 300, 300);
		SpawnList.Add('MCSpider',			075, 100, 125);
		SpawnList.Add('MCCreeper',			075, 150, 250);
		SpawnList.Add('MCEnderman',			005, 010, 015,	Dim_Overworld|Dim_Hell|Dim_End,	'Big');
		SpawnList.Add('MCGhast',			001, 005, 010,	Dim_Hell,	'Big');
		
	}
	
	const MaxQueue = 10;
	
//	private AArray SpawnQueue, SpawnQueuePriority;
//	private CAArray ClsQueue, ClsQueuePriority, ClsQueueBlacklist;
	private MCSpawnList SpawnList;
	private int MaxMobs;
	
	private void InitQueues()
	{
		/*
		SpawnQueue = AArray.Create();
		SpawnQueuePriority = AArray.Create();
		ClsQueue = CAArray.Create();
		ClsQueuePriority = CAArray.Create();
		ClsQueueBlacklist = CAArray.Create();
		*/
	}
	
	// Checks all queued classes for peaceful despawning. If they do, removes
	// them from the queue.
	/*
	private void CheckClassQueues()
	{
		CAArray rays[2];
		rays[0] = ClsQueue;
		rays[1] = ClsQueuePriority;
		
		for (int i = 0; i < rays.Size(); i++)
		{
			if (!rays[i])	continue;
			
			Array<Class<Actor> > temp; temp.Clear();
			// CAArray has a Size() function to get the Classes[index].Size().
			for (int j = 0; j < rays[i].Size(); j++)
			{
				Class<Actor> c1 = rays[i].Classes[j];
				if (c1)
				{
					let check = (Class<MinecraftEnemy>)(c1);
					if (check)	
					{
						let defs = GetDefaultByType(check);
						if (!defs.PeacefulDespawn)
							temp.Push(c1);
					}
				}
			}
			rays[i].Classes.Move(temp);
		}
	}
	*/
	
	
	
	//==========================================================================
	// Performs the countdown to attempt spawning monsters.
	// 
	// If peaceful mode is enabled or monster spawning disabled, forces the
	// timer to 1 second and holds it there until monsters are allowed to spawn.
	//==========================================================================
	private bool WasPeaceful;
	private void HandleMapSpawns()
	{
		if (!MCC_Spawning ||(MCC_Peaceful && MCC_PeacefulBehavior <= CV_Stay))
		{
			Timer[S_Spawn] = 35;
			
			/*
			// Everything Minecraft related must despawn.
			// Monsters auto-destroy themselves when set to force despawn, so
			// wipe it all out.
			if (MCC_Peaceful && !WasPeaceful)
			{
				if (MCC_PeacefulBehavior <= CV_Despawn)
				{
					SpawnQueue.Clear(true);
					SpawnQueuePriority.Clear(true);
					ClsQueue.Clear(true);
					ClsQueuePriority.Clear(true);
				}
				else if (MCC_PeacefulBehavior == CV_Minecraft)
				{
					CheckClassQueues();
				}
			}
			*/
		}
		else if (--Timer[S_Spawn] < 1)
		{
			if (Timer[S_Spawn] == 0)
			{
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (!playeringame[i] || !players[i].mo)	continue;
					let plr = players[i].mo;
					if (plr && !plr.FindInventory('MCPlayerProtection'))
						plr.A_GiveInventory('MCPlayerProtection',1);
				}
			}
			TriggerMapSpawns();
		}
		WasPeaceful = MCC_Peaceful;
		
		if (MCC_AIDifficulty_Prev != MCC_AIDifficulty)
		{
			MCC_AIDifficulty_Prev = MCC_AIDifficulty;
			for (int i = 0; i < Monsters.Size(); i++)
			{
				let mo = MinecraftEnemy(Monsters.Actors[i]);
				if (mo && !mo.bKILLED && !mo.bDESTROYED)
					mo.AdjustDifficulty();
			}
		}
	}
	
	//==========================================================================
	// Handles the clock for spawning monsters and queued monsters.
	//==========================================================================
	private void TriggerMapSpawns()
	{
		int ret = -1;
		
		int reset = Max(35,
			Minute * MCC_SpawnDelayMinute + 
			Second * MCC_SpawnDelaySecond + 
			Second * irandom(0,MCC_SpawnDelayRandom));
		
		MaxMobs = int(round(MCC_Spawns * MCC_SpawnMul));
		
		if (MobCount < MaxMobs)
		{
			PrepareSpawnNormal();
		}
		else 
		{
			if (MoCue)	
			{
				MoCue.Destroy();
				MoCue = null;
			}
			SpawnFails = 0;
			ret = reset;
		}
		
		Timer[S_Spawn] = ret;
	}
	//==========================================================================
	// Attempts a normal map spawn via timer, and prepares it for creation.
	// Only attempts to create 10 monsters at a time in order to keep a lid on
	// performance issues.
	//==========================================================================
	
	private MinecraftEnemy MoCue;
	private int SpawnFails;
	private void PrepareSpawnNormal()
	{	
		if (!SpawnList)	CreateSpawnList();
				
		// Go through the specified class queue and try to spawn as many of the
		// monsters as possible, setting them all as dormant.
		if (!MoCue)
		{
			Class<Actor> cls = SpawnList.PickRandom();
			
			SpawnList.FilterSpawns(cls);
			
			MoCue = MinecraftEnemy(Actor.Spawn(cls, (0,0,0), ALLOW_REPLACE));
			if (MoCue)
			{
				MoCue.bNODROPOFF = true;
				MoCue.Deactivate(null);
			}
			else return;
		}
		
		
		//----------------------------------------------------------------------
		// Now try to position them one at a time for activating.
		
		AttemptMonsterPlacement();
		if (MoCue)
		{
			if (++SpawnFails >= 10)
			{
				MoCue.Destroy();
				MoCue = null;
			}
		}
	}
	
	
	void AttemptMonsterPlacement()
	{
		
		// Not exactly player aware but honestly, GZDoom isn't in a state of
		// multiplayer friendly at the moment so just get the closest player and
		// spawn around them.
			
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i] || !players[i].mo)	continue;
			Actor plr = players[i].mo;
			if (!plr)	continue;
				
				
			double inc = 30;
			double div = 360 / inc;
			double ang = irandom(0,div) * inc;
			
			int j = random(0,inc);
			
			for (int k = 0; k < inc; k++)
			{
				j = (j + 1) % inc;
				ang = irandom(0, inc) * j;
				int dist = irandom(MoCue.SpawnRangeMin, MoCue.SpawnRangeMax);
				Vector3 next; next.XY = plr.Vec2Angle(dist, ang);
				
				next.Z = MoCue.GetZAt(next.X, next.Y, ang, GZF_ABSOLUTEPOS|GZF_ABSOLUTEANG|GZF_NO3DFLOOR);
				
				if (!level.IsPointInLevel(next))
					continue;
				
				Sector s = Level.PointInSector(next.XY);
				
				if (MCC_SpawnConditions && 
					MCC_EnvironmentDamage && MCC_SectorDamage && s.DamageAmount > 0 &&
					MoCue.GetDamageFactor(s.DamageType, s.DamageAmount, true) > 0)
					continue;
				
				
				if (!s || s.Flags & Sector.SECF_NORESPAWN)
					continue;
				
				if (level.Vec3Diff(next, plr.pos).Length() > MoCue.SpawnRangeMax)
					continue;
				
				// Don't allow spawning in skyboxes.
				if (skies.Size() > 0)
				{
					bool cont = false;
					for (int ii = 0; ii < skies.Size(); ii++)
					{
						if (skies[ii] && 
							skies[ii].CheckSight(MoCue, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
						{
							cont = true;
							break;
						}
					}
					if (cont)	continue;
				}
					
				MoCue.SetOrigin(next, false);
				
				if (MoCue.bSPAWNFLOAT)
					next.Z = ffrandom(MoCue.FloorZ, MoCue.CeilingZ - MoCue.Height);
				else
					next.Z = MoCue.FloorZ;
					
				MoCue.SetZ(next.Z);
				
				if (MoCue.TryMove(MoCue.Pos.XY, false))
				{
					MoCue.ClearInterpolation();
					MoCue.bNODROPOFF = MoCue.Default.bNODROPOFF;
					MoCue.Angle = irandom(0,359);
					MoCue.AlignMoveDir();
					MoCue.Activate(null);
					MoCue = null;
					SpawnFails = 0;
					return;
				}
			}
		}
	}
}

//==============================================================================
// Spawn Lists
//
// MCSpawn contains the classname, group it belongs to, and weight of the spawn.
// The weight behaves exactly like RandomSpawner's.
//==============================================================================
Class MCSpawn play
{
	Class<Actor> ClassName;
	Name Group;
	Int Weight[3], Dimension;
}

Class MCSpawnList play
{
	mixin TM_FastRNG;
	private Array<MCSpawn> Classes;
	
	static MCSpawnList Create()
	{
		let s = new('MCSpawnList');
		s.Clear();
		return s;
	}
	
	//--------------------------------------------------------------------------
	// Adds a class. Must be valid and weight > 0 or it won't add.
	// If the class is already existing, update it instead of wasting memory.
	// Also, only changes the group if not '' (blank). Use 'None' to clear.
	void Add(Class<Actor> cls, int easy, int med, int hard, int dim = Dim_Overworld, Name g = '')
	{
		int size = Classes.Size();
		
		for (int i = 0; i < Classes.Size(); i++)
		{
			if (cls == Classes[i].ClassName)
			{
				Classes[i].Weight[Dif_Easy] = easy;
				Classes[i].Weight[Dif_Normal] = med;
				Classes[i].Weight[Dif_Hard] = hard;
				if (g == 'None' || !cls)	Classes[i].Group = '';
				else if (g != '')			Classes[i].Group = g;
				
				return;
			}
		}
		
		let sp = new('MCSpawn');
		sp.ClassName = cls;
		sp.Weight[Dif_Easy] = easy;
		sp.Weight[Dif_Normal] = med;
		sp.Weight[Dif_Hard] = hard;
		sp.Dimension = dim;
		sp.Group = (g == 'None') ? '' : g;
		
		Classes.Push(sp);
	}
	
	void Clear()	{	Classes.Clear();	}
	
	//--------------------------------------------------------------------------
	// Picks a random monster based on the group it belongs to.
	// If no group is specified, it'll choose any.
	//
	// Arguments
	//	*blacklist
	//		
	//	*group 
	//		Filters the selection by the group given (whitelist)
	//	*exclude
	//		If true, blacklists the group instead of whitelist.
	Class<Actor>, Name PickRandom(CAArray Blacklist = null, Name group = '', 
		bool exclude = false) const
	{
		if (Classes.Size() < 1)
			return null, '';
	
		bool any = (group == '' || group == 'None');
		
		Array<MCSpawn> Queue;	Queue.Clear();
		int Weight = 0;
		int Size = Classes.Size();
		int Diff = MCC_Difficulty;
		
		// Get all applicable entities.
		for (int i = 0; i < Classes.Size(); i++)
		{
			let c = Classes[i];
			if (!c || !c.Classname || c.Weight[Diff] < 1)
				continue;
				
			// Skip blacklisted actors.
			if (BlackList && BlackList.Find(c.Classname) < BlackList.Size())
				continue;
			
			// Skip non-matching groups.
			if (!any && ((exclude && group == c.Group) || (!exclude && group != c.Group)))
				continue;
			
			Queue.Push(c);
			Weight += c.Weight[diff];
		}
		
		// Now that we have our list of valid classes, choose one for spawning.
		Size = Queue.Size();
		if (Size > 1)
		{
			int n = irandom(0, Weight - 1);
			
			for (int i = 0; i <= Size; i++)
			{
				if (i >= Size)
					i = 0;
					
				n -= Queue[i].Weight[Diff];
				
				if (n < 0)	
					return Queue[i].Classname, Queue[i].Group;
			}
		}
		else if (Size == 1)
			return Queue[0].Classname, Queue[0].Group;
		
		return null, '';
	}
	
	void FilterSpawns(in out Class<Actor> cls)
	{
		if (cls == 'MCZombieBaby' && !MCC_ZombieBaby)
			cls = 'MCZombie';
	}
}

/*
Class MCSpawnGroup play
{
	Name GroupName;
	Array<MCSpawn> Group;
	
	static MCSpawnGroup Create(Name g)
	{
		let gr = new('MCSpawnGroup');
		gr.GroupName = g;
		gr.Group.Clear();
		return gr;
	}
}
*/