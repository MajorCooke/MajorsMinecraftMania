
Class TestLegR : MCBodyPart
{
	
	private double CurSine, SineGain;
	
	double SineOffset;
	
	Property SineOffset: SineOffset;
	
	Default
	{
		MCBodyPart.Offsets 10.0, 0.4, 8.4;
		TestLegR.SineOffset 0;
		Scale 6;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		// Clamp between 0 to 359.9.
		CurSine = abs(SineOffset) % 360.0;
		SetPosOffsets((OffX, OffY, OffZ));
	}
	
	override void Tick()
	{
		Super.Tick();
		if (!Master)
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i] && players[i].mo)
				{
					Master = players[i].mo;
					break;
				}
			}
		}
		
		if (bDESTROYED || !Master || IsFrozen())	return;
		
		UpdatePosition(Master, WARPF_INTERPOLATE);
		
		// Moving the legs is simple enough. Just a sine wave.
		
		// The idea here is to have the legs synchronize with the movement speed
		// up to a maximum of two steps per leg per second.
		
		// When accelerating, increase the amount of sine gained, and vice versa.
		
		double accel = Master.Vel.XY.Length();
		
		double t = Clamp(accel, 0, SineWavePerSecond * 4.0);
		
		CurSine = (CurSine + t) % 360;
		
		Pitch = MainAng.Y + Sin(CurSine) * Clamp(accel * 4, 0, 80);
	}
}

Class TestLegL : TestLegR
{
	Default
	{
		TestLegR.SineOffset 180;
		MCBodyPart.Offsets 10.0, -0.4, 8.4;
	}
}

Class TestLegs : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_SpawnItemEx("TestLegR", SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("TestLegL", SXF_NOCHECKPOSITION|SXF_SETMASTER);
		}
		Stop;
	}
}

/*
	const TimeCap = 90.0;
	const Timing = TimeCap / 35.0;
	
	double Timer;
	Vector2 HoldAng, NextAng;
	
	override void Tick()
	{
		Super.Tick();
		if (IsFrozen())	return;
		
		Timer += Timing;
		
		if (Target && !(HoldAng ~== NextAng))
		{
			double sn = abs(cos(90 + Timer));

			Vector2 between = MC_VectorUtil.LerpUnclampedVec2(HoldAng, NextAng, sn);
			A_SetAngle(between.x, SPF_INTERPOLATE);
			A_SetPitch(between.y, SPF_INTERPOLATE);
		}
		
		if (Timer > TimeCap)
		{
			Timer = 0.0;
			if (!Target)
			{
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (!playeringame[i] || !players[i].mo)
						continue;
						
					Target = players[i].mo;
				}
			}
			if (Target)
			{
				HoldAng = (Angle, Pitch);
				if (Target.Player)
					A_Face(Target, 0.001, 0, 0, 0, FAF_BOTTOM, (Target.Player.ViewZ + 4)- Target.Pos.Z);
				else
					A_Face(Target, 0.001, 0);
				NextAng = (Angle, Pitch);
				double Delta = -DeltaAngle(HoldAng.X, AngleTo(Target));
				NextAng.X = HoldAng.X - Delta;
				Angle = HoldAng.X;
				Pitch = HoldAng.Y;
			}
		}
	}
	*/
	
	/*
			for (int j = 0; j < 50; j++)
			{
				Vector3 rnp.XY = plr.Vec2Angle(random(1024, 4096), random(0,359));
				Sector s = level.PointInSector(rnp.XY);
				
				if (!s)	continue;
				
				rnp.Z = s.bottom.ZAtPoint(rnp.XY);
				
				if (!level.IsPointInLevel(rnp))	continue;
				
				let defs = GetDefaultByType('MCZombie');
				Vector2 RH = (defs.Radius, defs.Height);
				let con = MC_Map.GetIntersectingLines(null, RH, true, rnp);
				
				// Get all the lines and check for blocking.
				bool cont = false;
				if (con)
				{
					for (int k = 0; k < con.Lines.Size(); k++)
					{
						if (con.Lines[i].Flags & (Line.ML_BLOCKING) ||
							(con.Lines[i].Flags & (Line.ML_BLOCKMONSTERS) && !defs.bNOBLOCKMONST))
						{
							cont = true;
							break;
						}	
						
					}
				}
				if (cont)	continue;
				
				// Search for tall lines/dropoffs that will interfere with spawning.
				let SC = MC_Map.GetIntersectingSectors(null, RH, con, true, rnp);
				
			}
			*/