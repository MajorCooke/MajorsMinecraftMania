/*

Class dum play
{
	DmgService serv;
	
	void dumb()
	{
		Actor m1 = null, m2 = null, m3 = null;
		if (!serv)	serv = new('DmgService');
		
		serv.GetObject("test", m1, m2, m3);
	}
}

struct DmgServInfo play
{
	Actor trg, src, inf;
	int damage, flags;
	Name type;
	double angle;
	
	void Reset(Name dmgtype = 'None')
	{
		src = inf = null;
		damage = flags = 0;
		type = dmgtype;
		angle = 0;
	}
}

Class DmgService : Service
{
	private DmgServInfo DSI;
	
	override String Get(String request, String str1, String str2, String str3)
	{
		Name req = request;
		Switch(req)
		{
			Case 'DamageMobj':	DSI.Reset(str1);	break;
		}
		return "";
	}
	
	override Int GetInt(String request, int num1, int num2, int num3)
	{
		Name req = request;
		if (req == 'result')
		{
			DSI.damage = num1;
			DSI.flags = num2;
			return CalculateDamage();
		}
		return -1;
	}

	override Object GetObject(String request, Object ob1, Object ob2, Object ob3)
	{
		Name req = request;
		if (req == 'Pointers')
		{
			DSI.trg = Actor(ob1);
			DSI.src = Actor(ob2);
			DSI.inf = Actor(ob3);
		}
		return null;
	}
	
	override double GetDouble(String request, double num1, double num2, double num3)
	{
		Name req = request;
		if (req == 'angle')
			DSI.angle = num1;
			
		return 0;
	}
	
	private int CalculateDamage()
	{
		//...
		return 0;
	}
}
*/
/*
Class DESpawnerService : Service
{
	static const String list[] =
	{      // <Replacer|Replaced|Weight >
		"DEImp|DoomImp|10", 
		"DEStoneImp|DoomImp|1"
	};
	private play int Index;
	
	override String Get(String r)
	{
		Name req = r;
		
		if (req == 'Next')
		{
			if (Index < list.Size())
				return list[Index++];
		}
		else if (req == 'Reset')
		{
			Index = 0;
		}
		return "";
	}
}

Class DESpawnerContainer play
{
	Class<Actor> Replacer, Replacee;
	Int Weight;
}

Class DESpawners play
{
	Array<DESpawnerContainer> Info;
	
	void SetupSpawners()
	{
		// Finds services by partial names.
		ServiceIterator it = ServiceIterator.Find("DESpawner");
		Service s;
		Array<String> str; str.Clear();
		Info.Clear();
		
		// Now go through and call each service that has 'DESpawner' in the name.
		while (s = it.Next())
		{
			s.Get("Reset");
			String inf = ""; 
			while ((inf = s.Get("Next")) && inf.Length() > 0) //Keeps going until Next returns "".
			{
				str.Clear();
				inf.Split(str, "|", TOF_SKIPEMPTY);
				
				if (str.Size() != 3) continue; //Incorrectly formatted.
				
				Class<Actor> Check = str[0];
				if (!Check)	continue; // Bad replacer.
				Check = str[1];
				if (!Check)	continue; // Bad replacee.
				int w = str[2].ToInt();
				if (w < 1)	continue; // No weight, so don't add.

				// Valid, so record it and keep going.
				let fo = new('DESpawnerContainer');
				fo.Replacer = str[0];
				fo.Replacee = str[1];
				fo.Weight = w;
				Info.Push(fo);
			}
		}
	}
}
*/


Class TestLegR : TM_BodyPart
{
	
	private double CurSine, SineGain;
	
	double SineOffset;
	
	Property SineOffset: SineOffset;
	
	Default
	{
		TM_BodyPart.Offsets 10.0, 0.4, 8.4;
		TestLegR.SineOffset 0;
		Scale 6;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		// Clamp between 0 to 359.9.
		CurSine = abs(SineOffset) % 360.0;
		SetPosOffsets((OffX, OffY, OffZ));
	}
	
	override void Tick()
	{
		Super.Tick();
		if (!Master)
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i] && players[i].mo)
				{
					Master = players[i].mo;
					break;
				}
			}
		}
		
		if (bDESTROYED || !Master || IsFrozen())	return;
		
		UpdatePosition(Master, WARPF_INTERPOLATE);
		
		// Moving the legs is simple enough. Just a sine wave.
		
		// The idea here is to have the legs synchronize with the movement speed
		// up to a maximum of two steps per leg per second.
		
		// When accelerating, increase the amount of sine gained, and vice versa.
		
		double accel = Master.Vel.XY.Length();
		
		double t = Clamp(accel, 0, SineWavePerSecond * 4.0);
		
		CurSine = (CurSine + t) % 360;
		
		Pitch = MainAng.Y + Sin(CurSine) * Clamp(accel * 4, 0, 80);
	}
}

Class TestLegL : TestLegR
{
	Default
	{
		TestLegR.SineOffset 180;
		TM_BodyPart.Offsets 10.0, -0.4, 8.4;
	}
}

Class TestLegs : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_SpawnItemEx("TestLegR", SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("TestLegL", SXF_NOCHECKPOSITION|SXF_SETMASTER);
		}
		Stop;
	}
}

/*
	const TimeCap = 90.0;
	const Timing = TimeCap / 35.0;
	
	double Timer;
	Vector2 HoldAng, NextAng;
	
	override void Tick()
	{
		Super.Tick();
		if (IsFrozen())	return;
		
		Timer += Timing;
		
		if (Target && !(HoldAng ~== NextAng))
		{
			double sn = abs(cos(90 + Timer));

			Vector2 between = TM_VectorUtil.LerpUnclampedVec2(HoldAng, NextAng, sn);
			A_SetAngle(between.x, SPF_INTERPOLATE);
			A_SetPitch(between.y, SPF_INTERPOLATE);
		}
		
		if (Timer > TimeCap)
		{
			Timer = 0.0;
			if (!Target)
			{
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (!playeringame[i] || !players[i].mo)
						continue;
						
					Target = players[i].mo;
				}
			}
			if (Target)
			{
				HoldAng = (Angle, Pitch);
				if (Target.Player)
					A_Face(Target, 0.001, 0, 0, 0, FAF_BOTTOM, (Target.Player.ViewZ + 4)- Target.Pos.Z);
				else
					A_Face(Target, 0.001, 0);
				NextAng = (Angle, Pitch);
				double Delta = -DeltaAngle(HoldAng.X, AngleTo(Target));
				NextAng.X = HoldAng.X - Delta;
				Angle = HoldAng.X;
				Pitch = HoldAng.Y;
			}
		}
	}
	*/
	
	/*
			for (int j = 0; j < 50; j++)
			{
				Vector3 rnp.XY = plr.Vec2Angle(random(1024, 4096), random(0,359));
				Sector s = level.PointInSector(rnp.XY);
				
				if (!s)	continue;
				
				rnp.Z = s.bottom.ZAtPoint(rnp.XY);
				
				if (!level.IsPointInLevel(rnp))	continue;
				
				let defs = GetDefaultByType('TM_Zombie');
				Vector2 RH = (defs.Radius, defs.Height);
				let con = TM_Map.GetIntersectingLines(null, RH, true, rnp);
				
				// Get all the lines and check for blocking.
				bool cont = false;
				if (con)
				{
					for (int k = 0; k < con.Lines.Size(); k++)
					{
						if (con.Lines[i].Flags & (Line.ML_BLOCKING) ||
							(con.Lines[i].Flags & (Line.ML_BLOCKMONSTERS) && !defs.bNOBLOCKMONST))
						{
							cont = true;
							break;
						}	
						
					}
				}
				if (cont)	continue;
				
				// Search for tall lines/dropoffs that will interfere with spawning.
				let SC = TM_Map.GetIntersectingSectors(null, RH, con, true, rnp);
				
			}
			*/