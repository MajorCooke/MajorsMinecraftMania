// For the sake of identification and inheritance.

Class TM_Entity : Actor abstract
{
	mixin TM_FastRNG;
	mixin TM_Functions;
	mixin TM_Event;
}

Class TM_Item : Inventory abstract
{
	mixin TM_FastRNG;
	const FadeTimer = 1.0 / 70.0;
	int Timer, StartTimer;
	private bool Flying, ShowStacks;
	private String BaseTag;
	protected int Mode, Sub;
	protected Name CMode, CSub;
	
	Property ModeSub: Mode, Sub;
	Property MSCvars: CMode, CSub;
	Property ShowStacks: ShowStacks;
	Default
	{
		TM_Item.ModeSub 0, 0;
		TM_Item.ShowStacks true;
		TM_Item.MSCvars " ", " ";
		Inventory.PickupSound "Minecraft/Pickup";
		Inventory.PickupMessage "";
		Inventory.InterhubAmount 64;
		Inventory.MaxAmount 64;
		+Inventory.NEVERRESPAWN
		+Inventory.NOSCREENFLASH
		+Inventory.INVBAR
		+Inventory.UNCLEARABLE
		+Inventory.KEEPDEPLETED
		+FLOATBOB
		+DROPPED
		+DONTGIB
		FloatBobStrength 0.3;
		Scale 0.3;
		
	}
	
	override void BeginPlay()
	{
		if (GetClass().IsAbstract())
		{
			Destroy();
			return;
		}
		Super.BeginPlay();
	}
	
	override void PostBeginPlay()
	{
		BaseTag = GetTag();
		UpdateTag();
		Timer = (TMV_ItemTimer > 0) ? Minute * TMV_ItemTimer : -1;
		Super.PostBeginPlay();
	}
	
	override void PlayPickupSound(Actor toucher)
	{	toucher.A_StartSound(PickupSound, 123, CHANF_OVERLAP);	}
	
	override bool ShouldRespawn()
	{	return false;	}
	
	override void DoEffect()
	{
		bINVBAR = (Amount > 0);
	}
	
	private void DoTick()
	{
		if (bDESTROYED)	return;
		if (Owner)
		{
			Timer = StartTimer;
			return;
		}
	
		if (ShowStacks)
		{
				 if (Amount > 48)	Frame = Fr_E;
			else if (Amount > 32)	Frame = Fr_D;
			else if (Amount > 16)	Frame = Fr_C;
			else if (Amount > 1)	Frame = Fr_B;
		}
		if (Timer > -1)
		{
			if (Timer < 1 || (Timer > 0 && --Timer < 1))
				A_FadeOut(FadeTimer); 
			else A_FadeIn(1.0, FTF_CLAMP);
		}
	}
	
	int GetMode() const		{	return Mode;	} 
	int GetSubMode() const	{	return Sub;		}
	bool IsFlying() const	{	return Flying;	}
	String GetBaseTag() const { return BaseTag; }
	
//	virtual bool ChangeMode(int newmode)		{	return false;	}
//	virtual bool ChangeSubMode (int newmode)	{	return false;	}
	protected virtual bool NextMode(bool prev = false)	{	return false;	}
	protected virtual bool NextSubMode(bool prev = false)	{	return false;	}
	
	bool CycleMode(bool prev = false)
	{
		bool ret = NextMode(prev);
		if (ret)
		{
			Click();
			UpdateTag();
			if (Owner.Player)
			{
				CVar c = CVar.GetCvar(CMode, Owner.Player);
				if (c) c.SetInt(Mode);
			}
		}
		return ret;
	}
	
	bool CycleSubMode(bool prev = false)
	{
		bool ret = NextSubMode(prev);
		if (ret)
		{
			Click();
			UpdateTag();
			if (Owner.Player)
			{
				CVar c = CVar.GetCvar(CSub, Owner.Player);
				if (c) c.SetInt(Sub);
				else if (CSub != '') Console.Printf("%s: CVAR not found", CSub);
			}
		}
		return ret;
	}
	
	void Click()	
	{	
		if (Owner)	Owner.A_StartSound("Minecraft/Click", 100, CHANF_OVERLAP);
		else		A_StartSound("Minecraft/Click", 100, CHANF_OVERLAP);
	}
	
	virtual void UpdateTag()	{	}
	
	States
	{
	Spawn:
		ASDF A 1 DoTick();
		Wait;
	}
}

Class TM_Projectile : TM_Entity abstract
{
	Default
	{
		Projectile;
	}
}

Class TM_PlayerProtection : PowerProtection
{
	const HalfSec = 18;
	int InvulTimer;
	Default
	{
		DamageFactor "Ghast", 0.20;
		DamageFactor "Creeper", 0.20;
		DamageFactor "TNT", 0.20;
	}
	
	override void InitEffect()
	{
		Super.InitEffect();
		InvulTimer = 0;
	}
	
	override void DoEffect()
	{
		processed = false;
		Super.DoEffect();
		EffectTics = 1000;
		if (InvulTimer > 0)		InvulTimer--;
	}
	
	private bool processed;
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (passive && Owner && damage > 0)	
		{
			newdamage = HandleDamage(damage, damageType, inflictor, source, flags);
			if (newdamage < 1)	return;
			damage = newdamage; // Needed for ignoring skill factor.
			Super.ModifyDamage(damage, damageType, newdamage, passive, inflictor, source, flags);
		}
	}
	
	// In the event that protection items are bypassed, this can act as a backup,
	// unless armor is bypassed.
	override void AbsorbDamage(int damage, Name damageType, out int newdamage, Actor inflictor, Actor source, int flags)
	{
		if (!processed && Owner && damage > 0)
		{
			newdamage = HandleDamage(newdamage, damageType, inflictor, source, flags);
		}
	}
	
	// Prevents damage if the player was recently hit, is totally frozen, in peaceful
	// or a voodoo doll was damaged.
	int HandleDamage(int damage, Name damageType, Actor inflictor, Actor source, int flags)
	{
		if (damage > 0)
		{
			processed = true;
			if (source is "TM_Entity" || inflictor is "TM_Entity" || 
				inflictor is "TM_StatusEffect")
			{
				// invul frames
				if (InvulTimer > 0)
					return -1;
				
				// voodoo doll or totally frozen
				if (!Owner.Player || Owner.Player.mo != Owner || (Owner.Player.Cheats & CF_TOTALLYFROZEN))
					return -1;
				
				// Peaceful protects from TM damage, unless it's a boss/minion
				// and the damage type isn't hellfire or void (prevent cheesing)
				if (TMV_Peaceful && !source.bBOSSSPAWNED && !(source is "TM_Boss") && 
					damageType != 'Hellfire' && damageType != 'Void')
					return -1;
				
				// Counteract any skill factors aside 1.0. Doesn't work if factor is <= 0.
				if (TMV_NoSkillFactor)
				{
					double sk = G_SkillPropertyFloat(SKILLP_DamageFactor);
					if (!(sk ~== 1.0) && sk > 0.0)
						damage = int(double(damage) / sk);
				}
				InvulTimer = HalfSec;
				Owner.A_StartSound("Minecraft/Hit", 100, CHANF_OVERLAP);
			}
		//	else InvulTimer = HalfSec;
		}
		return damage;
	}
}