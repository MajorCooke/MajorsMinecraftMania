// For the sake of identification and inheritance.

Class MinecraftEntity : Actor
{
	mixin TM_FastRNG;

	Vector3 Middle()	{	return (0, 0, height * 0.5);	}

	int Explode(bool sfx = true,
		int damage = -1, int radius = -1, int full = 0,
		double thrust = -1, double trad = -1, int tfull = -1,
		int flags = XF_HURTSOURCE, int radflags = 0,
		bool alert = false, Name DamageType = 'None',
		Class<Actor> filter = null, int eflags = EXF_PARENT)
	{
		if (radius > 0.0 && sfx)
		{
			let exp = Spawn('MCExplosion', pos + Middle(), ALLOW_REPLACE);
			if (exp)
			{
				exp.A_SetScale(radius);
			}
		}
		Actor source = Target;
		if (bISMONSTER) source = self;
		
		return MC_Functions.Explode(self, source, damage, radius, full, thrust, 
			trad, tfull, flags, radflags, alert, DamageType, filter, eflags);
	}
}

Class MinecraftProjectile : MinecraftEntity
{
	Default
	{
		Projectile;
	}
}

Class MCPlayerProtection : PowerProtection
{
	const HalfSec = 18;
	int InvulTimer;
	Default
	{
		DamageFactor "Ghast", 0.20;
		DamageFactor "Creeper", 0.20;
	}
	
	override void InitEffect()
	{
		Super.InitEffect();
		InvulTimer = 0;
	}
	
	override void DoEffect()
	{
		processed = false;
		Super.DoEffect();
		EffectTics = 1000;
		if (InvulTimer > 0)		InvulTimer--;
	}
	
	private bool processed;
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (passive && Owner && damage > 0)	
		{
			newdamage = HandleDamage(damage, damageType, inflictor, source, flags);
			if (newdamage < 1)	return;
			damage = newdamage;
			Super.ModifyDamage(damage, damageType, newdamage, passive, inflictor, source, flags);
		}
	}
	
	// In the event that protection items are bypassed, this can act as a backup,
	// unless armor is bypassed.
	override void AbsorbDamage(int damage, Name damageType, out int newdamage, Actor inflictor, Actor source, int flags)
	{
		if (!processed && Owner && damage > 0)
		{
			newdamage = HandleDamage(newdamage, damageType, inflictor, source, flags);
		}
	}
	
	// Prevents damage if the player was recently hit, is totally frozen, in peaceful
	// or a voodoo doll was damaged.
	int HandleDamage(int damage, Name damageType, Actor inflictor, Actor source, int flags)
	{
		if (damage > 0 && (source is "MinecraftEntity" || inflictor is "MinecraftEntity"))
		{
			processed = true;
			if (InvulTimer > 0 ||
				(Owner is "PlayerPawn" &&
					(MCC_Peaceful || !Owner.Player || Owner.Player.mo != Owner ||
					(Owner.Player.Cheats & CF_TOTALLYFROZEN))))
				return -1;
			
			// Counteract any skill factors aside 1.0. Doesn't work if factor is <= 0.
			if (MCC_NoSkillFactor)
			{
				double sk = G_SkillPropertyFloat(SKILLP_DamageFactor);
				if (!(sk ~== 1.0) && sk > 0.0)
					damage = int(double(damage) / sk);
			}
			InvulTimer = HalfSec;
			Owner.A_StartSound("Minecraft/Hit", 9, CHANF_OVERLAP);
		}
		return damage;
	}
}