/*

Minecraft/Spider/Death
Minecraft/Spider/Idle
Minecraft/Spider/Step

-Legend-	X		Y		Z		Roll	Pitch	Angle
Back:		-0.6	0.0		2.0	
Head:		0.6		0.0		2.0			
Leg:		0.0		~.8		1.9		0.0		35		(Starts at 30, +40 each)

- Gibs -
Back:		-1.8	0.0		2.0		
Head:		1.4		0.0		2.0
Leg:		0.0		~2.2	1.9

- Both -
Thorax:		0.0		0.0		2.0

Frames
	A: Normal Spider
	B: Cave Spider

*/

	
		
Class MCSpider : MinecraftEnemy
{
	const _Radius = 1.6 + 1.2 + 2.4;
	const _Height = 2.0;
	const RealScale = 9.0;
	const RealRadius = RealScale * _Radius;
	const RealHeight = RealScale * _Height;
	enum ELimbs
	{
		Head = 0,
		Back,
		Thorax,
		LegL1,
		LegL2,
		LegL3,
		LegL4,
		LegR1,
		LegR2,
		LegR3,
		LegR4,
		LimbCount
	};
	enum EType
	{
		S_Normal = 0,
		S_Cave
	};
	
	int Type;
	Property Type: Type;
	
	Default
	{
		Health 100;
		MinecraftEnemy.MislChance 100;
		MCSpider.Type S_Normal;
		Radius RealRadius;
		Height RealHeight;
		Scale RealScale;
		ActiveSound "Minecraft/Spider/Idle";
		PainSound "Minecraft/Spider/Idle";
		DeathSound "Minecraft/Spider/Death";
		Tag "Spider";
		Obituary "%o's became a living host for spider breeding.";
		
		MeleeRange RealRadius + 8;
		MaxTargetRange 768;
	}
	
	override bool DropItems(Actor src, Actor inf, Name mod)
	{
		if (!Super.DropItems(src, inf, mod))
			return false;
		
		int end = 5;
		for (int i = 0; i < end; i++)
		{
			int rng = irandom(0,10);
			if (rng == 0)		
			{
				Event.DropItem(self, 'Backpack');
				break;
			}
			else if (rng <= 5)	Event.DropItem(self, 'HealthBonus');
			else				Event.DropItem(self, 'ArmorBonus');
		}		
		return true;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Init(LimbCount);
		Limb[Head] = 	MCBodyPart(Spawn('MCSpiderHead', pos));
		Limb[Back] = 	MCBodyPart(Spawn('MCSpiderBack', pos));
		Limb[Thorax] =	MCBodyPart(Spawn('MCSpiderThorax', pos));
		Limb[LegL1] =	MCBodyPart(Spawn('MCSpiderLeg', pos));
		Limb[LegL2] =	MCBodyPart(Spawn('MCSpiderLeg', pos));
		Limb[LegL3] =	MCBodyPart(Spawn('MCSpiderLeg', pos));
		Limb[LegL4] =	MCBodyPart(Spawn('MCSpiderLeg', pos));
		Limb[LegR1] =	MCBodyPart(Spawn('MCSpiderLeg', pos));
		Limb[LegR2] =	MCBodyPart(Spawn('MCSpiderLeg', pos));
		Limb[LegR3] =	MCBodyPart(Spawn('MCSpiderLeg', pos));
		Limb[LegR4] =	MCBodyPart(Spawn('MCSpiderLeg', pos));
		for (int i = 0; i < Limb.Size(); i++)
		{
			if (Limb[i])
			{
				Limb[i].Master = self;
				Limb[i].Owner = self;
				Limb[i].Scale = Scale;
				Limb[i].Frame = Type;
			}
		}
		
		Limb[Head].SetPosOffsets((		 0.6,	 0.0, 2.0));
		Limb[Back].SetPosOffsets((		-0.6,	 0.0, 2.0));
		Limb[Thorax].SetPosOffsets((	 0.0,	 0.0, 2.0));
		Limb[LegL1].SetPosOffsets((		 0.0,	-0.8, 1.9));
		Limb[LegL2].SetPosOffsets((		 0.0, 	-0.8, 1.9));
		Limb[LegL3].SetPosOffsets((		 0.0,	-0.8, 1.9));
		Limb[LegL4].SetPosOffsets((		 0.0,	-0.8, 1.9));
		Limb[LegR1].SetPosOffsets((		 0.0,	 0.8, 1.9));
		Limb[LegR2].SetPosOffsets((		 0.0,  	 0.8, 1.9));
		Limb[LegR3].SetPosOffsets((		 0.0, 	 0.8, 1.9));
		Limb[LegR4].SetPosOffsets((		 0.0, 	 0.8, 1.9));
		
		int t = 0;
		for (int i = LegL1; i < LegL1 + 4; i++)
		{
			Limb[i  ].SetPersistantAPROffset(( 30 + (t * 40), 35, 0));
			Limb[i+4].SetPersistantAPROffset((-30 - (t * 40), 35, 0));
			t++;
		}
		UpdateLimbs();
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (!other || (other.bSOLID && !other.bACTLIKEBRIDGE))
			return false;
		return true;
	}
	
	private int LeapTimer;
	
	States
	{
	Spawn:
		TNT1 AA 35;
		Goto IdleMove;
	Idle:
		TNT1 A 0 A_Jump(256, random(1, 4));
		TNT1 AAAAAAAAAA 17 Look();
	IdleMove:
		TNT1 A 0 
		{
			LookTimer = 0;
			return A_Jump(256, random(1, 35*2));
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		Goto Idle;
	See:
		TNT1 A 1 Chase();
		Wait;
	Melee:
		TNT1 A 1 DoMelee(random[rng](20, 25));
		Goto See;
	}
}

Class MCCaveSpider : MCSpider
{
	Default
	{
		MinecraftEnemy.OverScale 0.5;
		MCSpider.Type S_Cave;
		Tag "Cave Spider";
		Obituary "%o couldn't fight off the swarming Cave Spiders.";
	}
}

//------------------------------------------------------------------------------
Class MCSpiderBack : MCBodyPart {}
Class MCSpiderHead : MCBodyPartHead {}
Class MCSpiderLeg : MCBodyPartLeg
{	Default	{	MCBodyPart.CurAction 0;	}	}
Class MCSpiderThorax : MCBodyPart	{}

//------------------------------------------------------------------------------
// Gibs
Class MCSpiderThoraxGib : MCBodyPartGib	
{
}
Class MCSpiderBackGib : MCBodyPartGib 
{
	Default
	{
		MCBodyPartGib.Offsets -1.2, 0, 0;
	}
}
Class MCSpiderHeadGib : MCBodyPartGib 
{
	Default
	{
		MCBodyPartGib.Offsets 0.8, 0, 0;
	}
}
Class MCSpiderLegGib : MCBodyPartGib 
{
	Default
	{
		MCBodyPartGib.EndPitch 0;
		MCBodyPartGib.Offsets 1.4, 0, 0;
	}
}