/*
Minecraft Monster
By Major Cooke

The idea behind minecraft enemies is to replicate everything from Minecraft if
possible. This means creeper explosions, spider climbing, skeletons using weapons
and a few other cool tricks.

NOTE: The monsters are always invisible, no matter what. Only the body parts are
drawn as external actors.
*/




Class TM_Monster : TM_Entity abstract
{
	//==========================================================================
	// Base overrides
	//==========================================================================
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		AdjustDifficulty();
		SetupRelations();
		AttackDamagers = true;
		PrevScale = Scale;
		PrevAngs = (Angle, Pitch, Roll);
		PrevPos = Pos;
		PrevTrans = Translation;
		PrevAlpha = Alpha;
		PrevStyle = GetRenderStyle();
		PrevVel = Vel;
		DrownTimer = DrownTimerStart;
		FallDmgVel = -abs(FallDmgVel);
		DmgInfo.Used = true;
		SetOverScale(OverScale);
		StepSoundDelay = Max(1, StepSoundDelay);
		MaxSightRange = Min(MaxSightRange, MaxChaseRange);
		PrepareArmory();
	}
	
	// Absolutely no morphing whatsoever, or it could risk breaking them.
	override bool Morph(Actor activator, class<PlayerPawn> playerclass, class<MorphedMonster> monsterclass, int duration, int style, class<Actor> morphflash, class<Actor>unmorphflash)
	{	return false;	}
	
	override bool MorphMonster (Class<Actor> spawntype, int duration, int style, Class<Actor> enter_flash, Class<Actor> exit_flash)
	{	return false;	}
	
	override void Activate(Actor activator)
	{
		if (bKILLED || bDESTROYED)	return;
	
		
	//	UpdateLimbs(Angs, false);
	//	for (int i = 0; i < Limb.Size(); i++)
	//		if (Limb[i])	Limb[i].Activate(activator);
		
		NoDmgTimer = 2;
		
		A_SetShootable();
		A_ChangeLinkFlags(0);
		bINVISIBLE = false;
		SpawnLimbs();
		Super.Activate(activator);
	}
	
	override void Deactivate(Actor activator)
	{
		if (bKILLED || bDESTROYED)	return;
		
		bINVISIBLE = true;
		DestroyLimbs();
		
		A_UnsetShootable();
		A_ChangeLinkFlags(1);
		
		Super.Deactivate(activator);
	}
	
	private Array<Actor> Touched;
	private Array<Actor> Intersect;
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (!other)	return false;
		if (other.bACTLIKEBRIDGE || other is 'TM_Block' || other.bMISSILE)	return true;
		
		if (other.bKILLED) return false;
		
		if (!Targetable(Target, true) && Touched.Find(other) != Touched.Size())
			if (other.bISMONSTER || other.bSHOOTABLE || (other is 'PlayerPawn' && other.player))
				Touched.Push(other);
		
		bool issolid = true;
			
		if (other is 'TM_Monster')
			issolid = TMV_SolidTM;
		else if (!(other is 'TM_Monster') && other.bISMONSTER)
			issolid = TMV_SolidMonsters;
		else if (other is 'PlayerPawn' || other.player)
			issolid = TMV_SolidPlayers;
		
		if (!issolid)
		{
			if (Intersect.Size() < 10 && 
				Intersect.Find(other) >= Intersect.Size())
				Intersect.Push(other);
		}
		return issolid;
	}
	
	override bool CanResurrect(Actor other, bool passive)
	{	return false;	}
	
	private int Lifetime;
	private bool wasBright;
	private int PrevWaterLevel, TerrainTimer;
	private Sector PrevSector;
	private transient Array<TM_XFloor> XFloor;
	
	void RefreshXFloors()
	{
		for (int i = 0; i < XFloor.Size(); i++)
			if (XFloor[i])	XFloor[i].Destroy();
			
		XFloor.Clear();
		
		int count = CurSector.Get3DFloorCount();
		for (int i = 0; i < count; i++)
		{
			let XF = CurSector.Get3DFloor(i);
			if (XF && (XF.flags & F3DFloor.FF_EXISTS))
			{
				let TM = TM_XFloor.NewXFloorPtr(XF, i);
				if (TM) XFloor.Push(TM);
			}
		}
	}
	
	virtual bool ShouldPeacefulDespawn() const
	{
		return (!bKILLED &&
				(TMV_Peaceful && 
				(TMV_PeacefulBehavior <= CV_Despawn ||
				(TMV_PeacefulBehavior == CV_Minecraft && PeacefulDespawn > 0))));
	}
	
	// By default, don't despawn if a boss, minion or it counts towards the kills.
	virtual bool CanDespawn() const
	{
		return !(bBOSS || bBOSSSPAWNED || bCOUNTKILL);
	}
	
	virtual bool DespawnRange()
	{
	
		if (--DespawnTimer > 0)	
			return false;
			
		/*
		else
		{
			DespawnTimer = irandom(35 * 3, 35 * 8);
			if (Targetable(Target) || !CheckRange(DespawnRangeMax,true))
				return false;
		}
		return true;
		*/
				
		if (CheckRange(DespawnRangeMax, true))
			return true;
		
		if (!Targetable(Target) && CheckRange(DespawnRangeMin, true))
		{
			double dmin = DespawnRangeMin,
					dmax = DespawnRangeMax;
			DespawnTimer = irandom(35 * 3, 35 * 8);
			double closest = dmax ** 2;
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (!playeringame[i])	continue;
				let plr = players[i].mo;	
				if (!plr || plr.bKILLED)	continue;
				
				closest = min(Distance2DSquared(plr), closest);
			}
			
			if (closest < dmin)
				return false;
			else if (closest >= dmax)
				return true;
			else
			{
				double scalar = TM_Global.GetFalloff(dmin, dmax, closest);
				int chance = int(round(1000.0 * scalar));
				if (irandom(1, 1000) <= chance)
					return true;
			}
		}
		return false;
	}
	
	double GetRealGravity(bool func = true)
	{
		if (TMV_NoSectorGravity & TM_NSG_MONSTERS)
		{
			if (func)
				return GetGravity() - Gravity;
			
			return Gravity;
		}
		return GetGravity();
	}
	
	override void Tick()
	{
		// Process nothing if destroyed.
		if (bDESTROYED)	return;
		LastHeard = null; //
		
		// Process nothing if dead or frozen.
		if (bKILLED || IsFrozen())
		{
			Super.Tick();
			return;
		}
		// Destroy it if peaceful difficulty is activated, and the monster can
		// despawn on peaceful. Dead monsters will despawn on their own though.
		// Entities that won't despawn naturally are neutral/friendly ones like
		// iron golems, villagers. Also bosses and boss spawned minions will
		// never naturally despawn.
		if (CanDespawn() && (ShouldPeacefulDespawn() || DespawnRange()))
		{
			if (TMV_Debug == 19)
				Console.Printf("Despawn range or peaceful met");
			Destroy();
			return;
		}
		
		if ((TMV_NoSectorGravity & TM_NSG_MONSTERS) && 
			Pos.Z > FloorZ && !bNOGRAVITY && Gravity > 0.0)
		{
			Super.Tick();
			if (Pos.Z > FloorZ)
				Vel.Z += GetRealGravity();
			
		}
		else Super.Tick();
		
		if (Touched.Size() > 0)
		{
			if (!Targetable(Target))
			{
				foreach (mo : Touched)
				{
					if (!Targetable(mo))
						continue;
					
					int rel = CheckRelation(mo, mo.GetClass());
					
					if (rel == Rel_Hated || rel == Rel_Feared ||
						(rel == Rel_None && mo is "PlayerPawn" && mo.player))
					{	Target = mo; break; }					
				}
			}
			Touched.Clear();
		}
		// Thrust other minecraft monsters that are intersecting, akin to minecraft.
		{
			int size = Intersect.Size();
			for (int i = 0; i < size; i++)
			{
				let mo = Intersect[i];
				if (!mo || mo.bKILLED)
					continue;
				
				double vec = (mo.radius + radius) * 0.02;
				if (!(mo.pos ~== pos))
				{
					double ang = mo.AngleTo(self);
					if (mo is "TM_Monster")
						mo.Thrust(vec, ang + 180);
					Thrust(vec, ang);
				}
			}
			Intersect.Clear();
		}
		
		if (!bDORMANT)
		{
			wasOnGround = OnGround;
			OnGround = ((Pos.Z <= FloorZ || bONMOBJ) && Vel.Z <= 0.0);
			
			if (OnGround || bFLOAT)
				UnsetJumping();
			else if (Jumping && Vel.Z <= 0.0)
			{
				FloorZ = Pos.Z;
				UnsetJumping();
			}
			
			if (!Target)	Pitch = 0;
			if (Lifetime < 5)	Lifetime++;
			if (NoDmgTimer > 0) NoDmgTimer--;
			
			//----------------------------------------------------------------------
			// Fall/Slime/Lava/Drowning damage handling.
			//----------------------------------------------------------------------
			if (CanEnvironmentDamage())
				ProcessEnvironmentDamage();
				
			if (bKILLED)	return;
			
			if (!DmgInfo.Used)
			{
				DmgInfo.used = true;
				DamageReact(DmgInfo.I, DmgInfo.S, DmgInfo.damage, DmgInfo.dmg, DmgInfo.mod, DmgInfo.flags, DmgInfo.angle, DmgInfo.secdmg);
			}
			//------------------------------------------------------------------
			// Play an active sound every 5-6 seconds.
			//------------------------------------------------------------------
			if (--ActiveSoundDelay < 1)
			{
				ActiveSoundDelay += (Second * 4) + IRandom(0,Second * 2);
				if (ActiveSound != "")
					A_StartSound(ActiveSound, CHAN_VOICE, CHANF_OVERLAP);
			}
			
			if (AttackDelay > 0)
				AttackDelay--;
			//------------------------------------------------------------------
			// Handle damage timer & translation changes.
			//------------------------------------------------------------------
			if (DamageTimer > 0)
			{
				if (--DamageTimer < 1)
				{
					Translation = TempTranslation;
					bBRIGHT = Default.bBRIGHT;
				}
				else bBRIGHT = true;
			}
		}
		
		//----------------------------------------------------------------------
		// Update the various properties to affect the various segments.
		// Adjust the scale as needed and call the functions.
		//----------------------------------------------------------------------
		Angs = (Angle, Pitch, Roll);		
		
		if (!bDORMANT && (!(vel ~== (0,0,0)) || !(Pos ~== PrevPos)))
		{
			PosLen = level.Vec3Diff(PrevPos, Pos).Length();
			VelLen = vel.Length();
			VelPosLen = VelLen + PosLen;
			
		}
		else VelLen = PosLen = VelPosLen = 0;
		
		CurStyle = GetRenderStyle();
		UpdateLimbs(Angs);
		
		PrevWaterLevel = WaterLevel;
		PrevVel = Vel;
		PrevTrans = Translation;
		PrevScale = Scale;
		PrevAngs = Angs;
		PrevPos = Pos;
		PrevAlpha = Alpha;
		PrevStyle = CurStyle;
		PrevSpeed = Speed;
	}
	private int LightAdd;
	
	
	//private TM_LineContainer CurLines;
	//bool FromDmgSector;
	/*
	override bool CanCrossLine(Line crossing, int side, Vector3 Next)
	{
		if (!TMV_EnvironmentDamage || !TMV_SectorDamage || ValidateTarget())	return true;
		
		Vector2 RH = (radius, height);
		
		let osec = TM_Map.GetIntersectingSectors(self, RH);
		if (!osec)	return true;
		int size = osec.Size();
		if (size < 1)	return true;
		
		// If we're standing in a damaging sector, allow getting out of it.
		for (int i = 0; i < size; i++)
		{
			Sector s = osec.Sectors[i].sec;
			if (s.DamageAmount > 0 && GetDamageFactor(s.DamageType, s.DamageAmount) > 0)
				return true;
		}
		
		// Now check if we're entering a damaging sector from a non-damaging sector.
		// If so, don't cross.
		let nsec = TM_Map.GetIntersectingSectors(self, RH, usepos: true, Next + Vel);
		if (!nsec)	return true;
		
		size = nsec.Size();
		if (size < 1) return true;
		
		for (int i = 0; i < size; i++)
		{
			Sector s = nsec.Sectors[i].sec;
			if (s.DamageAmount > 0 && GetDamageFactor(s.DamageType, s.DamageAmount) > 0)
				return false;
		}
		return true;
	}
	*/
	//--------------------------------------------------------------------------
	
	
	private bool appended;
	protected void PreDie(Actor source, Actor inflictor, int dmgflags, Name MOD)
	{
		DeathPos = pos;
		
		// This is primarily to stop D(E)4D resources from dropping if never damaged
		// by a player. Actors with NOINTERACTION never drop resources on death.
		// They drop by WorldThingDied so they can drop from any monster.
		// This is needed because otherwise, they would rain upgrades.
		
		// This is a temporary solution and a bit of a hack. Eventually, I'll
		// introduce something on DE4D's side and remove it later.
		
		Dismount();
		A_StopAllSounds();
		
		if (!appended && (dmgflags & DMG_EXPLOSION))
		{
			let src = TM_Monster(source);
			if (src is 'TM_Creeper')
			{
				appended = true;
				if (!PlayerDamaged)
					PlayerDamaged = src.PlayerDamaged;
			}
		}
		
		bool Drop = PlayerDamaged || (source is 'PlayerPawn');
		if (!Drop)
		{
			for (int i = 0; i < Damagers.Size(); i++)
			{
				if (Damagers[i] is 'PlayerPawn')
				{
					Drop = true;
					break;
				}
			}
		}
		if (!Drop)
		{
			bNOINTERACTION = true;
			A_ChangeLinkFlags(1);
		}
		
		if (MOD == 'Void')
			DestroyLimbs();
		
		A_NoBlocking(false);
		if (TMV_DropItems)
			DoDropItems(source, inflictor, MOD);
	}
	
	private void DoDropItems(Actor s, Actor i, Name MOD)
	{
		DropItems(s, i, MOD);
	}
	
	protected void PostDie(Actor source, Actor inflictor, int dmgflags, Name MOD)
	{
		if (Damagers.Size() > 0)
		{
			bNOINTERACTION = true;
		}
		// Boing!
		if (MOD == 'Falling')
			Vel.Z = abs(PrevVel.Z);
		else if (MOD == 'CreeperBoo')
			Vel.Z = Max(Vel.Z, 20);
		
		VelLen = Vel.Length();
		Gib(VelLen);
		SetOrigin(DeathPos, false);
		A_Stop();
		A_Scream();
	}
	
	private Vector3 DeathPos;
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MOD)
	{
		if (TMV_Debug == 12)
		{
			String a = "null", b = "null";
			if (source)		a = String.Format("%p", source);
			if (inflictor)	b = String.Format("%p", inflictor);
			Console.Printf("%s: %s, %s, %s", GetClassName(), a, b, MOD);
		}
		PreDie(source, inflictor, dmgflags, MOD);
		Super.Die(source, inflictor, dmgflags, MOD);
		PostDie(source, inflictor, dmgflags, MOD);
	}
	
	override void OnDestroy()
	{
		Dismount();
		DestroyLimbs();
		RemoveGoal();
		Super.OnDestroy();
	}
	
	virtual void EnterIdle() 
	{	
		if (bKILLED)	return;
		CleanActors();
		StateLabel next = "Idle";
		if (!bSTANDSTILL && irandom(0,1))
			next = "IdleMove";
		
		SetState(ResolveState(next));
	}
	virtual void EnterSee() 
	{
		if (bKILLED)	return;
		SetState(ResolveState("See"));
	}
	
		
	States
	{
	Spawn:
		TNT1 A 35;
		Goto IdleMove;
	Idle:
		---- AAAAAAAAAA 17 Look();
		---- A 0
		{
			StateLabel next = null;
			if (bSTANDSTILL)	next = "Idle";
			return ResolveState(next);
		}
	IdleMove:
		---- A 0 
		{
			LookTimer = 0;
			SetWanderTics(irandom(70, 140));
		}
		---- A 1 LookWander();
		Wait;
	GenericFreezeDeath: // Absolutely no freezing.
		---- A 1
		{
			if (!bKILLED)	A_Die();
		}
	Death.Ice:
	Death:
		TNT1 A 35;
		Stop;
	}
}

Class TM_Goal : TM_Entity
{
	Default
	{
		+NOGRAVITY
		+THRUACTORS
		+DONTTHRUST
		+NOTONAUTOMAP
		+DONTBLAST
	}
	override void OnDestroy()
	{
		A_SpawnItemEx('TM_Explosion', flags: SXF_NOCHECKPOSITION);
		Super.OnDestroy();
	}
	
	States
	{
	Spawn:
		TNT1 A 8 A_SpawnItemEx('TM_ExplosionSmoke', ffrandom(0,3), 0, ffrandom(1,3), ffrandom(0,2), 0, ffrandom(0, 2), irandom(0,359), SXF_NOCHECKPOSITION);
		Wait;
	}
}

//------------------------------------------------------------------------------
// Subtypes
//------------------------------------------------------------------------------

Class TM_Undead : TM_Monster
{
	Default
	{
		TM_Monster.MobType M_Undead;
		DamageFactor "Poison", 0.0;
	}
	
	
}

Class TM_Arthropod : TM_Monster
{
	Default
	{
		TM_Monster.MobType M_Arthropod;
		DamageFactor "Poison", 0.0;
	}
}

Class TM_MiniBoss : TM_Monster
{
	override bool CanDespawn() const
	{	return false;	}
	Default
	{
		TM_Monster.MobTier T_MiniBoss;
	}
}

Class TM_Boss : TM_Monster
{
	// No despawning whatsoever.
	override bool CanDespawn() const
	{	return false;	}
	
	private int CFlags;
	

	Default
	{
		+BOSS
		+ALLOWPAIN
		TM_Monster.MobTier T_Boss;
		
		// Bosses are immune to all environmental damage.
		DamageFactor "DamageSector", 0.0;
		DamageFactor "Crushing", 0.0;
		DamageFactor "Poison", 0.0;
		DamageFactor "Wither", 0.0;
		DamageFactor "Drowning", 0.0;
		DamageFactor "Falling", 0.0;
		DamageFactor "Creeper", 0.0;
		
		// Resilient to TNT
		DamageFactor "TNT", 0.2;
		
		// Fires are not listed here since they should be vulnerable to mod weapons.
		// It's simply Triple M fire they're immune to.
	}
	
	override int DamageMobj(Actor i, Actor s, int damage, Name mod, int flags, double angle)
	{
		int dmg = 0;
		if (s is 'PlayerPawn')
			dmg = damage;
		return Super.DamageMobj(i, s, dmg, mod, flags, angle);
	}
	
}