extend class TM_Monster
{
	private uint TempTranslation;
	private LastDamaged DmgInfo;
	private int NoDmgTimer;
	protected Array<Actor> Damagers;
	protected bool GodMode, TrueBuddha;
	
	// Replicates DamageMobj from GZDoom source code (mostly).
	protected virtual int CalculateDamage(out Actor i, out Actor s, int damage, out Name mod, out int flags, double angle)
	{
		int dmg = damage;
		bool forced = (flags & DMG_FORCED);
		
		if (!forced)
		{
			if (bDORMANT || NoDmgTimer > 0)	
				return -1;
		
			bool telefrag = (!bNODAMAGE && !bLAXTELEFRAGDMG && damage >= TELEFRAG_DAMAGE);
		
			if (!telefrag)
			{
				// Manually deal with damage factors. Armor shouldn't reduce knockback.
				if (bINVULNERABLE && (!i || !i.bFOILINVUL))
					return -1;
					
				if (bSPECTRAL && (!i || !i.bSPECTRAL))
					return -1;
				
				if ((i && i.bPIERCEARMOR) || mod == 'Falling' || mod == 'Drowning')
					flags |= DMG_NO_ARMOR;
					
				if (i)	dmg = i.DoSpecialDamage(self, dmg, mod);
				
					
				if (s)	
				{					
					if (s == self)
						dmg = int(floor(double(dmg) * SelfDamageFactor));
					
					dmg = int(floor(double(dmg) * s.DamageMultiply));
					
					if (dmg > 0 && !(flags & DMG_NO_ENHANCE))	
						dmg = s.GetModifiedDamage(mod, dmg, false, i, s, flags);
				}
				
				
				if (dmg > 0 && !(flags & DMG_NO_PROTECT))	
					dmg = GetModifiedDamage(mod, dmg, true, i, s, flags);
				
				if (dmg > 0 && !(flags & DMG_NO_FACTOR))
					dmg = ApplyDamageFactor(mod, dmg);
				
				if (dmg >= 0)
					dmg = TakeSpecialDamage(i, s, dmg, mod);
				
			}
		
			
			if (!bDONTTHRUST && !(flags & DMG_THRUSTLESS) && 
				i && i != self && !i.bNODAMAGETHRUST)
				ApplyKickback(i, s, dmg, angle, mod, flags);
				
			// Armor absorption 
			if (!telefrag && dmg > 0 && !(flags & DMG_NO_ARMOR) && inv)
				for (let probe = inv; probe; probe = probe.inv)
					probe.AbsorbDamage(dmg, mod, dmg, i, s, flags);
				
		}
		return dmg;
	}
	
	override int DamageMobj(Actor i, Actor s, int damage, Name mod, int flags, double angle)
	{
		if (bKILLED || (!bSHOOTABLE && !bVULNERABLE) || GodMode)	return -1;
		
		double prevz = Vel.Z;
		int dmg = CalculateDamage(i, s, damage, mod, flags, angle);
		
	//	dmg = Super.DamageMobj(i, s, damage, mod, 
	//		flags|DMG_THRUSTLESS|DMG_NO_PROTECT|DMG_NO_FACTOR|DMG_NO_ARMOR, angle);
		
		
		// Add the damager to the list.
		if (dmg > 0) 
		{
			DamageTypeReceived = mod;
			if (s && Damagers.Find(s) >= Damagers.Size())
				Damagers.Push(s);
				
			if (s && s.player)
				PlayerDamaged = true;
			
			if ((!bNODAMAGE || (flags & DMG_FORCED)))
				Health -= dmg;
		
			if (Health < 1)
			{
				bool telefrag = (damage >= TELEFRAG_DAMAGE && !bLAXTELEFRAGDMG && !bNODAMAGE);
				if (TrueBuddha || 
					(!telefrag && (bBUDDHA || FindInventory('PowerBuddha')) && (!i || !i.bFOILBUDDHA)))
					Health = 1;
				else
				{
					Die(s, i, flags, mod);
					bKILLED = true;
					return dmg;	// Don't react if dead.
				}
			}
		}
		// Cancel jump
		UnsetJumping();
		// Determining Pain
		bool painless = bNOPAIN || 
			((flags & DMG_NO_PAIN) || (i && i.bPAINLESS) || (!i && s && s.bPAINLESS));
			
		bool dopain = !painless && 
				((dmg > 0 || (damage > 0 && bALLOWPAIN)) || (
				(i && (i.bCAUSEPAIN || i.bFORCEPAIN)) || 
				(s && (s.bCAUSEPAIN || s.bFORCEPAIN))));
		if (OkayToSwitchTarget(s))
		{
			if (s != target)
			{
				if (bQUICKTORETALIATE || Threshold < 1)
				{
			//		if (!lastenemy || lastenemy.bKILLED || lastenemy)
			//			lastenemy = target;
						
					target = s;
					
					if (CurState == SpawnState && SeeState)
						SetState(SeeState);
				}
			}
			else
			{
				if (!bQUICKTORETALIATE)
					threshold = DeFThreshold;
			}
		}
		
		if (DamageTimer < 1)
		{
			// Is eligible for pain?
			if (dopain)
			{
				DamageTimer = 17;
				TempTranslation = Translation;
				bBRIGHT = true;
				
				SetTranslation("DamageRed");
				A_StartSound(PainSound, CHAN_VOICE, CHANF_OVERLAP);
			}
			
			if (Targetable(s, false))	
			{
				int rel = CheckClassRelation(s.GetClass());
				if (rel <= Rel_None || rel == Rel_Neutral || rel == Rel_Hated)
				{
					SetActorRelation(s, Rel_Hated);
				}			
			}
			
		//	TryPain(i, s, dmg, mod, flags, angle);
			
			double ang = angle;
				
			// Bounce the actor if taking falling damage.
			if (damageType == 'Falling')
			{
				flags &= ~DMG_THRUSTLESS;
				flags |= DMG_USEANGLE;
				ang = TM_S7_Math.GetAnglesTo(level, pos, vel);
			}
			
			// Disable thrusting if no inflictor/source, unless falling.
			if (!(flags & DMG_THRUSTLESS))
			{		
				if ((!i && !s) || (i && i.bNODAMAGETHRUST))
				{
					if (!(flags & DMG_USEANGLE))
						flags |= DMG_THRUSTLESS;
				}
			}
			
			// Let explosions do their own thrusting.
			if (!(flags & (DMG_THRUSTLESS|DMG_EXPLOSION)))
			{	
			//	if (!bNOGRAVITY && Gravity > 0.0)
				{
					Vector2 v = Vel.XY;
					if (prevz <= 1.0)
						Vel.Z += 7.0;
					
					OnGround = false;
					
					if (flags & DMG_USEANGLE)
						ang = angle;
					else if (s)	ang = AngleTo(s);
					else if (i)	ang = AngleTo(i);
					Thrust(-1, ang);
				}
			}
			
			// Record the damage so the monster can do any special reactions.
			if (dmg > 0)
			{
				DmgInfo.i = i;
				DmgInfo.s = s;
				DmgInfo.damage = damage;
				DmgInfo.dmg = dmg;
				DmgInfo.mod = DamageType;
				DmgInfo.flags = flags;
				DmgInfo.angle = angle;
				DmgInfo.used = false;
			}
		}
		return (bNODAMAGE) ? 0 : dmg;
	}
	/*
	bool TryPain(Actor i, Actor s, int dmg, Name mod, int flags, double angle)
	{
		if (DamageTimer > 0)	return false;
		
		// Determining Pain
		bool painless = bNOPAIN || 
			((flags & DMG_NO_PAIN) || (i && i.bPAINLESS) || (!i && s && s.bPAINLESS));
			
		bool dopain = !painless && 
				((dmg > 0 || (damage > 0 && bALLOWPAIN)) || (
				(i && (i.bCAUSEPAIN || i.bFORCEPAIN)) || 
				(s && (s.bCAUSEPAIN || s.bFORCEPAIN))));
		
		// Is eligible for pain?
		if (dopain)
		{
			DamageTimer = 17;
			TempTranslation = Translation;
			bBRIGHT = true;
			
			SetTranslation("DamageRed");
			A_StartSound(PainSound, CHAN_VOICE, CHANF_OVERLAP);
			return true;
		}
		
		return false;
	}
	*/
	override int TakeSpecialDamage(Actor inf, Actor src, int dmg, Name mod)
	{
		if (!bBOSS && dmg > 0 && TMV_DmgMul && (src is 'TM_Entity'))
			dmg = int(double(dmg) * GetHealthMul());
	
		if (MobType == M_Undead)
		{		
			if (mod == "InstantDamage")
			{
				GiveBody(dmg, StartHealth);
				return -1;
			}
			else if (mod == 'Poison' || mod == 'Regeneration')
			{
				return -1;
			}
		//	else if (src has smite)
		//		increase damage
		}
		else if (MobType == M_Arthropod)
		{
			if (mod == 'Poison')
				return -1;
		//	if (src has bane of arthropod)
		//	{
		//		add 30 damage per level
		//		give slowness 4
		//	}
		}
		return dmg;
	}
	
	int CheckDamageTimer()
	{	return DamageTimer;	}

	// This is never called if the actor is dead, nor is it called when damage is
	// dealt immediately - waits about a tic after.
	virtual void DamageReact(Actor inf, Actor src, int damage, int dmg, Name mod, int flags = 0, double angle = 0, bool secdmg = false)
	{
		
	}
	
	// Checks if the actor is immune to a damagetype.
	bool IsImmune(Name DmgType) const
	{	return (GetDamageFactor(DmgType, TELEFRAG_DAMAGE) < 1);	}
	
	//--------------------------------------------------------------------------
	// Sets the drown timer.
	// 
	// * maxtime
	//		How long the monster can go without drowning
	// * current
	//		How much air time they have before drowning
	void SetDrownTimer(int maxtime, int current = -1)
	{
		DrownTimerStart = maxtime;
		DrownTimer = (current > -1) ? current : maxtime;
	}
	
	//--------------------------------------------------------------------------
	// Applies a damagefactor for all things, including natural and inventory.
	int GetDamageFactor(Name type, int damage, bool secdmg = false)
	{
		if (damage < 1)	return damage;
		
		int dmg = damage;
		dmg = ApplyDamageFactor(type, dmg);
		
		if (dmg > 0)
			dmg = GetModifiedDamage(type, dmg, true);
		
		// For damage sectors, DamageSector is a global for reduction no matter
		// what, on top of the regular damage type.
		if (dmg > 0 && secdmg)
		{
			dmg = ApplyDamageFactor("DamageSector", dmg);
			if (dmg > 0)
				dmg = GetModifiedDamage("DamageSector", dmg, true);
		}
			
		return dmg;
	}
	
	void CleanDamagers()
	{
		Array<Actor> Temp; Temp.Clear();
		for (int i = 0; i < Damagers.Size(); i++)
		{
			let mo = Damagers[i];
			if (mo && !mo.bKILLED)	Temp.Push(mo);
		}
		Damagers.Move(Temp);
	}
	
	
	
	// Sets damage overrides (see Constants.txt, prefix: TMO_
	// Status:
	// 1: 	Force enable
	// 0: 	Force disable
	//-1:	Clear (player menu preference)
	
	void SetDamageOverrides(int flags, int status)
	{
		status = Clamp(status, -1, 1);
		Switch(status)
		{
			Case 1:
			{
				DmgOverOn |= flags;
				DmgOverOff &= ~flags;
				return;
			}
			Case 0:
			{
				DmgOverOn &= ~flags;
				DmgOverOff |= flags;
				return;
			}
			Case -1:
			{
				DmgOverOn &= ~flags;
				DmgOverOff &= ~flags;
				return;
			}
		}
	}
	
	/*
	TMO_Environment =	1,
	TMO_Sector =		1 << 1,
	TMO_Falling = 		1 << 2,
	TMO_Drowning =		1 << 3,
	TMV_EnvironmentDamage
	TMV_FallDamage
	TMV_SectorDamage
	TMV_Drowning
	*/	
	virtual bool CanEnvironmentDamage() const
	{
		return ((DmgOverOn & TMO_Environment) || TMV_EnvironmentDamage) && 
				!(DmgOverOff & TMO_Environment);
	}
	
	virtual bool CanWaterDamage() const
	{
		return false;
	}
	
	virtual bool CanSectorDamage() const
	{
		return ((DmgOverOn & TMO_Sector) || TMV_SectorDamage) && 
			// Temporarily off until the maps are complete which uses these UDMF properties.
			//	(!CurSector || CurSector.GetUDMFInt("user_fallingdeath") < 1) &&
				!(DmgOverOff & TMO_Sector);
	}
	
	virtual bool CanDrown() const
	{
		return ((DmgOverOn & TMO_Drowning) || TMV_Drowning) && 
				!(DmgOverOff & TMO_Drowning) && !IsImmune("Drowning");
	}
	
	virtual bool CanFallDamage() const
	{
		return (((DmgOverOn & TMO_Falling) || TMV_FallDamage) && 
			!(DmgOverOff & TMO_Falling) && !bNOGRAVITY && !IsImmune("Falling"));
	}
	
	bool HandleFallDamage(Sector sec = null) const
	{
		if (!sec)
			sec = CurSector;
				
		if (!(DmgOverOn & TMO_Falling) && (sec.Flags & Sector.SECF_NOFALLINGDAMAGE))
			return false;
		
		if (sec.DamageAmount > 0 && sec.DamageType == 'Void')
			return false;
		
		if (CanFallDamage() && FallDmgVel != 0.0)
		{
		
			bool death = (Pos.Z <= GetZAt(0) && sec.GetUDMFInt("user_fallingdeath") > 0);
			double FallDm = (death) ? -1.0 : FallDmgVel;
			if ((Vel.Z >= 0.0 && PrevVel.Z <= FallDm))
				return DoFallDamage(death);
		}
		return false;
	}
	
	
	//--------------------------------------------------------------------------
	// Called when dealing fall damage. Returns false if no damage was dealt
	// or if the actor is incapable of receiving fall damage.
	virtual bool DoFallDamage(bool death = false)
	{
		int dmg = 0;
		int flags = 0;
		
		// Any amount of falling damage will be instant death, if the sector has
		// 'falling_death' set to 1+/true.
	//	int AFloorZ = GetZAt(0);
		if (death)
		{
			dmg = health;
			flags |= DMG_NO_PROTECT|DMG_NO_FACTOR|DMG_NO_ARMOR|DMG_FOILINVUL|DMG_FOILBUDDHA;
		}
		else 
		{
			//	int dmg = Clamp(abs(PrevVel.z) - FallDmgVel, 0, TELEFRAG_DAMAGE - 1);
			dmg = Max(0, int(abs(PrevVel.z) - FallDmgVel));
			dmg = Clamp(dmg * int(round(double(StartHealth) * 0.01)), 0, TELEFRAG_DAMAGE - 1);
			
			if (dmg < 1)	return false;
		}
		int ret = DamageMobj(null, null, dmg, 'Falling', flags);
		
		if (TMV_Debug == 5)
		{
			Console.Printf("Velocity: %d -- Damage: %d -- death: %d", PrevVel.Z, ret, death);
		}
		
		return ret;
	}
	
	
	private bool InDrowningSector()
	{
		return false;
	}
	
	
	private void ProcessEnvironmentDamage()
	{	
		if (PrevSector != CurSector)
		{
			PrevSector = CurSector;
			RefreshXFloors();
		}	
	
		Sector sec = CurSector;
		if (BlockingFloor && WaterLevel < 2)	
			sec = BlockingFloor;
		
		if (HandleFallDamage())
		{
			SectorDamageTimer = 0;
			// Do no more if dead.
			if (bKILLED)	return;
		}
		
		// Follow regular Doom rules for damaging sectors. We must use 
		// GetZAt here since this actor could otherwise be standing on a
		// connected sector that's not actually touching a floor with
		// damage. This is how it's done to the player after all.
		if (CanSectorDamage())
		{
			
			if (Blocking3DFloor)
			{
				sec = Blocking3DFloor;
			}
			else if (XFloor.Size() > 0)
			{
				double d = 0;
				Sector t = sec;
				F3DFloor xx = null;
				[d, t, xx] = sec.NextLowestFloorAt(pos.x, pos.y, pos.z + 1);
				
				if (xx)
					t = xx.model;
				
				sec = t;
			}
			if (Pos.Z <= GetZAt(0))
			{
				int DmgAmt = sec.DamageAmount,
					DmgInt = sec.DamageInterval;
				
				if (DmgAmt && ++SectorDamageTimer >= DmgInt)
				{
					if (DmgAmt < 0)	GiveBody(DmgAmt);
					else if (DmgAmt > 0)
					{
						DmgInfo.secdmg = true;
						DmgAmt = GetDamageFactor("DamageSector", DmgAmt);
						
						DamageMobj(null, null, DmgAmt, sec.DamageType, DMG_THRUSTLESS);
						if (bKILLED)	return;
						
					}							
					SectorDamageTimer = 0;
				}
			}
		
			//------------------------------------------------------------------
			// Damaging 3D floors
			//------------------------------------------------------------------
			
			
			bool DmgSector = false;
			if (WaterLevel > 0)
			{
				bool InWater = false;
				
				// Check 3D floors for damaging terrain if under water.
				for (int i = 0; i < XFloor.Size(); i++)
				{
					if (!XFloor[i])	continue;
					
					let XX = XFloor[i];
					F3DFloor XF = XX.XFloor;
					if ((XF.flags & F3DFloor.FF_SWIMMABLE))
					{
						double	botz = XF.bottom.ZAtPoint(pos.XY), 
								topz = XF.top.ZAtPoint(pos.XY);
								
						if (Top() < botz || pos.Z > topz)
						{
							XX.Inside = false;
							continue;
						}
						
						TerrainDef ter = XX.XSector.GetFloorTerrain(Sector.ceiling);
						if (!ter)	ter = XX.XSector.GetFloorTerrain(Sector.floor);
						if (ter && ter.DamageAmount > 0 && !IsImmune(ter.DamageMOD))
						{
							DmgSector = true;
							if (ter.DamageOnLand && !XX.Inside)
							{
								XX.Inside = true;
								XX.Timer = ter.DamageTimeMask;
							}	
							if (++XX.Timer >= ter.DamageTimeMask)
							{
								XX.Timer = 0;
								DamageMobj(null, null, ter.DamageAmount, ter.DamageMOD, DMG_THRUSTLESS);
								if (bKILLED)	return;
							}
						}
						else InWater = true;
					}
				}
								
				//------------------------------------------------------------------
				// Drowning
				//------------------------------------------------------------------
				
				if (!DmgSector && InWater)
				{	
					bool waterdmg = CanWaterDamage();
					if (CanWaterDamage())
					{
						if (++DrownTimer > 18)
						{
							DrownTimer = 0;
							DamageMobj(null, null, 10, "Drowning", DMG_NO_ARMOR|DMG_THRUSTLESS);
						}
					}
					else if (CanDrown() && WaterLevel > 2)
					{
						if (DrownTimer > 0)	DrownTimer--;
						else
						{
							DrownDamage++;
							DrownTimer = Second - 1;
							DmgInfo.secdmg = true;
							DamageMobj(null, null, min(DrownDamage, TELEFRAG_DAMAGE - 1), "Drowning", DMG_NO_ARMOR|DMG_THRUSTLESS);
							if (bKILLED)	return;
						}
					}
				}
			}
			else if (DrownTimer < DrownTimerStart)
			{
				DrownDamage = 0;
				DrownTimer += 3;
				DrownTimer = Min(DrownTimer, DrownTimerStart);
			}
			
			//------------------------------------------------------------------
			// Damaging Terrain
			//------------------------------------------------------------------
			else
			{
				let ter = GetFloorTerrain();
				if (ter && ter.DamageAmount > 0)
				{
					if (ter.DamageOnLand && PrevWaterLevel < 1)
						TerrainTimer = ter.DamageTimeMask;
						
					if (++TerrainTimer >= ter.DamageTimeMask)
					{
						TerrainTimer = 0;
						DamageMobj(null, null, ter.DamageAmount, ter.DamageMOD, DMG_THRUSTLESS);
						if (bKILLED)	return;
					}
				}
			}
			
			
		}
	}
	
	protected int AdjustMeleeDamage(int damage)
	{
		if (damage < 1 || !ArmorInv)
			return damage;
			
		Array<TM_Tool> Weapons;
		ArmorInv.GetWeapons(Weapons);
		
		if (Weapons.Size() < 1)	return damage;
		
		double factor = 1.0;
		for (int i = 0; i < Weapons.Size(); i++)
		{
			let wep = Weapons[i];
			if (wep)	factor = wep.AdjustFactor(factor);
		}
		
		damage = int(round(double(damage * factor)));
		return damage;
	}
	
	virtual bool DoMelee(int damage = -1, int armdmg = -1, int delay = Second, 
		bool adjust = true)
	{
		if (AttackDelay > 0 || !Targetable(Target) || !CheckTrace(Target, MeleeRange))
			return false;
		
		if (damage < 1)	
		{
			damage = MeleeDamage;
			if (damage < 1)
				return false;
		}
		int dmg = damage;
		if (adjust)	dmg = AdjustMeleeDamage(damage);
		
		int _dmg = dmg;
		
		let armor = Target.FindInventory('BasicArmor',true);
		int armbefore = 0, armafter = 0;
		
		if (armor)	armbefore = Armor.Amount;
		
		dmg = ((Target.bINVULNERABLE && !bFOILINVUL) || Target.bNODAMAGE) 
			? 0 : Target.DamageMobj(null, self, dmg, "Melee");
			
		if (armor)	armafter = Armor.Amount;
		
		if (dmg > 0 || armafter != armbefore)
		{
			if (Target && !bNODAMAGETHRUST && !Target.bDONTTHRUST && 
				!(Target is 'TM_Monster') && Target.Mass > 0)
			{
				double thrust = clamp((damage * 20.0) / Target.Mass, 0., 32);
				Target.Thrust(thrust, AngleTo(Target));
				Target.Vel.Z += 700 / Target.Mass;
			}
			AttackDelay = delay;
			SetMeleeAnimation();
			ValidateTarget();
		}
		if (TMV_Debug == 19 && damage != _dmg)
			Console.Printf("Old: %d | New: %d", damage, _dmg);
		return true;
	}
}

/* 
Armor works as damage reduction, but unlike Doom armor, it remains behind. 
There's no armor breakage... Yet.

Each base armor type (head, chest, legs and boots) reduces armor reduction by
the amounts listed in the arrays below.

*/

Class TM_ArmorInfo
{
	Class<TM_Armor> Type;
	double Absorb;
}


Class TM_ArmorFactor
{
	Name DamageFactor;
	double Amount;
}

Class TM_Enchants
{
	Name Enchant;
	int Power;
}

Class TM_ArmorInv : Inventory
{
	private Array<TM_Armor> Pieces;
	private Array<TM_Tool> Weapons;
	private int DmgOld, DmgNew;
	private bool _Melee, _Ranged;
	/*
	static const Class<TM_Armor> type[] =
	{
		'TM_ArmorHead',
		'TM_ArmorChest',
		'TM_ArmorPants',
		'TM_ArmorBootL'
	};
	// Amounts absorbed
	static const double Amt[] =
	{// min			max
		0.03,	// 15% 
		0.10,	// 50%
		0.04,	// 20%
		0.02	// 10%
	};
	*/
	// Used to reward the player the more armored and dangerous a mob is upon dying.
	int, int GetScore()
	{
		int HPArmorBonus = 0, AmmoBonus = 0;
		double factor = 0.0;
		double f1, f2;
		for (int i = 0; i < Pieces.Size(); i++)
		{
			let arm = Pieces[i];
			if (arm)	factor = abs(arm.AdjustFactor(factor));
		}
		f1 = factor;
		if (factor > 0.0)
			HPArmorBonus = int(round(factor * 100.0));
		
		factor = 0.0;
		for (int i = 0; i < Weapons.Size(); i++)
		{
			let wep = Weapons[i];
			if (wep)	factor = wep.AdjustFactor(factor);
		}
		f2 = factor;
		if (factor > 0.0)
			AmmoBonus = int(factor * 10);
			
		
		if (TMV_Debug == 17)
			Console.Printf("%.2f | %.2f", f1, f2);
			
		return HPArmorBonus, AmmoBonus;
	}
	
	bool HasRanged()
	{
		for (int i = 0; i < Weapons.Size(); i++)
			if (Weapons[i] && Weapons[i].Ranged)	return true;
			
		return false;
	}
	
	bool HasMelee()
	{
		for (int i = 0; i < Weapons.Size(); i++)
			if (Weapons[i] && !Weapons[i].Ranged)	return true;
			
		return false;
	}
	
	void GetWeapons(out Array<TM_Tool> weps)
	{
		weps.Copy(Weapons);
	}
	
	void UpdateArmor(in Array<TM_Armor> List)
	{
		_Melee = _Ranged = false;
		for (int i = 0; i < List.Size(); i++)
		{
			if (!List[i])	continue;
			let wep = TM_Tool(List[i]);
			if (wep)
			{
				if (wep.CountArmorInv && Weapons.Find(wep) == Weapons.Size())
				{
					Weapons.Push(wep);
					if (wep.Ranged)	_Ranged = true;
					else			_Melee = true;
				}
				continue;
			}
			let arm = TM_Armor(List[i]);
			if (arm && arm.CountArmorInv && Pieces.Find(arm) == Pieces.Size())
				Pieces.Push(arm);
			
			if (TMV_Debug == 18)
				Console.Printf("Weapons: %d | Pieces: %d", Weapons.Size(), Pieces.Size());
		}
		/*
		Pieces.Append(List);
		
		Array<TM_Armor> temp; temp.Clear();
		for (int i = 0; i < Pieces.Size(); i++)
			if (Pieces[i] && !Pieces[i].bDESTROYED)
			{
				for (int k = 0; k < type.Size(); k++)
				{
					if (Pieces[i] is type[k])
					{
						temp.Push(Pieces[i]);
						break;
					}
				}
			}
				
		Pieces.Move(temp);
		*/
		
	}
	
	override void Tick()
	{
		if (DmgOld != 0 || DmgNew != 0)
		{			
			if (TMV_Debug == 13)
				Console.Printf("Old: %d - New: %d", DmgOld, DmgNew);
			
			DmgOld = DmgNew = 0;
		}
		Super.Tick();
	}
	/*
	override void ModifyDamage(int damage, Name mod, out int newdamage, bool passive, Actor i, Actor s, int flags)
	{
		if (damage < 1 || !Owner || Owner.bKILLED)
		{
			newdamage = damage;
			return;
		}
		
		
	}
	*/
	override void AbsorbDamage(int damage, name mod, out int newdamage, actor i, actor s, int flags)
	{
		if (damage < 1 || !Owner || Owner.bKILLED)
		{
			newdamage = damage;
			return;
		}
		
		double factor = 1.0;
		
		for (int i = 0; i < Pieces.Size(); i++)
		{
			let arm = Pieces[i];
			if (arm && arm.CountArmorInv && !(arm is 'TM_Tool'))
				factor = arm.AdjustFactor(factor);
		}
		
		
		if (factor != 1.0)
			newdamage = max(1,int(round(double(damage * factor))));
			
		DmgOld += damage;
		DmgNew += newdamage;
			
	}
}