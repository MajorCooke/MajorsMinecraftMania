extend class MinecraftMonster
{
	private LastDamaged DmgInfo;
	protected Array<Actor> Damagers;
	private uint TempTranslation;
	override int DamageMobj(Actor i, Actor s, int damage, Name mod, int flags, double angle)
	{
		if (bKILLED)	return 0;
		
		if (MCC_BoomDmgMul && (flags & DMG_EXPLOSION) && 
			(mod == 'Creeper' || mod == 'Ghast'))
		{
			int dmg = int(double(damage) * GetHealthMul());
			damage = dmg;
		}
		
		double prevz = Vel.Z;
		int prevhp = health;
		int dmg = Super.DamageMobj(i, s, damage, mod, flags, angle);
		
		// Add the damager to the list.
		if (dmg > 0 && s && Damagers.Find(s) >= Damagers.Size())
		{
			Damagers.Push(s);
		}
		/*
		if (MCC_Debug == 1 && s && !(s is 'PlayerPawn'))
		{
			Name src = "Null";
			Name inf = "Null";
			if (s)	src = s.GetClassName();
			if (i)	inf = i.GetClassName();
			Console.Printf("%d: %s from %s, %s", dmg, GetClassName(), src, inf);
		}
		*/
		
		// Don't react if dead.
		if (bKILLED)	return dmg;
		
		
		// Determining Pain
		bool painless = bNOPAIN || 
			((flags & DMG_NO_PAIN) || (i && i.bPAINLESS) || (!i && s && s.bPAINLESS));
			
		bool dopain = !painless && 
					((dmg > 0 || (damage > 0 && bALLOWPAIN)) || (
					(i && (i.bCAUSEPAIN || i.bFORCEPAIN)) || 
					(s && (s.bCAUSEPAIN || s.bFORCEPAIN))));
		
		if (Targetable(s, false))
		{
			int rel = CheckClassRelation(s.GetClass());
			if (rel <= Rel_None || rel == Rel_Neutral || rel == Rel_Hated)
			{
				SetActorRelation(s, Rel_Hated);
			}
		}
		
		// Capable of reacting to damage again?
		if (DamageTimer < 1)
		{
			
			// Is eligible for pain?
			if (dopain)
			{
				DamageTimer = 17;
				TempTranslation = Translation;
				bBRIGHT = true;
				
				SetTranslation("DamageRed");
				A_StartSound(PainSound, CHAN_VOICE, CHANF_OVERLAP);
				
				double ang = angle;
				
				// Bounce the actor if taking falling damage.
				if (damageType == 'Falling')
				{
					flags &= ~DMG_THRUSTLESS;
					flags |= DMG_USEANGLE;
					ang += 180;
				}
				
				// Disable thrusting if no inflictor/source, unless falling.
				if (!(flags & DMG_THRUSTLESS))
				{		
					if ((!i && !s) || (i && i.bNODAMAGETHRUST))
					{
						if (!(flags & DMG_USEANGLE))
							flags |= DMG_THRUSTLESS;
					}
				}
				
				// Let explosions do their own thrusting.
				if (!(flags & (DMG_THRUSTLESS|DMG_EXPLOSION)))
				{	
					if (!bNOGRAVITY && Gravity > 0.0)
					{
						Vector2 v = Vel.XY;
						if (prevz <= 1.0)
							Vel.Z += 7.0;
						
						OnGround = false;
						
						if (flags & DMG_USEANGLE)
							ang = angle;
						else if (s)	ang = AngleTo(s);
						else if (i)	ang = AngleTo(i);
						Thrust(-1, ang);
					}
				}
			}
			// Record the damage so the monster can do any special reactions.
			if (dmg > 0)
			{
				DmgInfo.i = i;
				DmgInfo.s = s;
				DmgInfo.damage = damage;
				DmgInfo.dmg = dmg;
				DmgInfo.mod = DamageType;
				DmgInfo.flags = flags;
				DmgInfo.angle = angle;
				DmgInfo.used = false;
			}
		}
		return dmg;
	}
	
	int CheckDamageTimer()
	{	return DamageTimer;	}

	// This is never called if the actor is dead.
	virtual void DamageReact(Actor inf, Actor src, int damage, int dmg, Name mod, int flags = 0, double angle = 0, bool secdmg = false)
	{
		
	}
	
	// Checks if the actor is immune to a damagetype.
	bool IsImmune(Name DmgType) const
	{	return (GetDamageFactor(DmgType, TELEFRAG_DAMAGE) < 1);	}
	
	//--------------------------------------------------------------------------
	// Sets the drown timer.
	// 
	// * maxtime
	//		How long the monster can go without drowning
	// * current
	//		How much air time they have before drowning
	void SetDrownTimer(int maxtime, int current = -1)
	{
		DrownTimerStart = maxtime;
		DrownTimer = (current > -1) ? current : maxtime;
	}
	
	//--------------------------------------------------------------------------
	// Applies a damagefactor for all things, including natural and inventory.
	int GetDamageFactor(Name type, int damage, bool secdmg = false)
	{
		if (damage < 1)	return damage;
		
		int dmg = damage;
		dmg = ApplyDamageFactor(type, dmg);
		
		if (dmg > 0)
			dmg = GetModifiedDamage(type, dmg, true);
		
		// For damage sectors, DamageSector is a global for reduction no matter
		// what, on top of the regular damage type.
		if (dmg > 0 && secdmg)
		{
			dmg = ApplyDamageFactor("DamageSector", dmg);
			if (dmg > 0)
				dmg = GetModifiedDamage("DamageSector", dmg, true);
		}
			
		return dmg;
	}
	
	//--------------------------------------------------------------------------
	// Called when dealing fall damage. Returns false if no damage was dealt
	// or if the actor is incapable of receiving fall damage.
	virtual bool DoFallDamage()
	{
	//	int dmg = Clamp(abs(PrevVel.z) - FallDmgVel, 0, TELEFRAG_DAMAGE - 1);
		int dmg = Max(0, int(abs(PrevVel.z) - FallDmgVel));
		
		// falling speed * 1% health * DamageFactor "Falling", #.#
		double ddmg = double(SpawnHealth()) * 0.01 * 
			double(ApplyDamageFactor("Falling", 1000) * 0.001);
		
		dmg = Clamp(dmg * int(round(ddmg)), 0, TELEFRAG_DAMAGE - 1);
		if (MCC_Debug == 5)
			Console.Printf("Velocity: %d -- Damage: %d", PrevVel.Z, dmg);
		if (dmg < 1)	return false;
		return (DamageMobj(null, null, dmg, 'Falling') > 0);
	}
	
	void CleanDamagers()
	{
		Array<Actor> Temp; Temp.Clear();
		for (int i = 0; i < Damagers.Size(); i++)
		{
			let mo = Damagers[i];
			if (mo && mo.health > 0)	Temp.Push(mo);
		}
		Damagers.Move(Temp);
	}
}