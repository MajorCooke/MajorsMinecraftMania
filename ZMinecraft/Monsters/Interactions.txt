extend class TM_Monster
{
	enum EAMFlags
	{
		AM_NOPARENT =		1,
		AM_FORCE =			1 << 1,
		AM_FORCEONLYPLR =	1 << 2,
		AM_SIGHT =			1 << 3,
		
	//	AM_EXCLUDE =	1 << 1,
	};

	virtual void AlertMonsters(double dist, Actor targ = null, Class<Actor> filter = null, int limit = 0, int flags = 0)
	{
		if (dist <= 0.0)	dist = MaxChaseRange;
		if (!targ)
		{
			return;
		}
		
		if (targ is GetClass())	return;
		
		if (targ.bKILLED || !targ.bSHOOTABLE ||
			targ.bNEVERTARGET || (!bFRIENDLY && targ.bNOTARGET))
			return;
		
		TM_Monster mo = null;
		GetEvent();
		if (!Event)	return;
		
		int count = limit;
		for (int i = 0; i < Event.Monsters.Size(); i++)
		{
			let mo = TM_Monster(Event.Monsters.Actors[i]);
			if (!mo || mo == self || mo.bKILLED)	continue;
			
			if (filter)
			{
				if (((flags & AM_NOPARENT) && mo.GetClass() != filter) ||
					(!(flags & AM_NOPARENT) && !(mo is filter)))
				{
					if (TMV_Debug == 1)
					{
						Name cls = mo.GetClassName();
						name fil = filter.GetClassName();
						Console.Printf("%s doesn't fit filter %s, skipping", cls, fil);
					}
					continue;
				}
			}
			
			// out of range
			if (Distance3DSquared(mo) > dist ** 2)
				continue;
				
			// not in sight
			if ((flags & AM_SIGHT) && !CheckSight(mo, CSFlags))
				continue;
			
			bool change = ((flags & AM_FORCE) || !mo.Target || (mo.Target is 'PlayerPawn') || 
							mo.Target.bKILLED);
			if (!change)	continue;
			
			mo.bAMBUSH = true;
			mo.CopyFriendliness(self, change, false);
			
			mo.Tracer = targ;
			mo.SetActorRelation(targ, Rel_Hated);
			
			if (count > 0 && --count < 1)
				return;
		}
	}
}

Class TM_ClassRelation play
{
	Class<Actor> ClassType;
	int Status, Priority;
	bool Parent;
	
	static TM_ClassRelation CreateRelation(Class<Actor> who, int status, bool parent = false, int priority = 0)
	{
		if (!who)	return null;
		
		let r = new('TM_ClassRelation');
		r.Update(who, status, parent, priority);
		return r;
	}
	
	void Update(Class<Actor> who, int status, bool parent = false, int priority = 0)
	{
		if (!who)	return;
		
		self.ClassType = who;
		self.Status = status;
		self.Priority = priority;
		self.Parent = parent;
	}
}

Class TM_ActorRelation play
{
	Actor Mo;
	int Status, Priority;
	bool Parent;
	
	
	static TM_ActorRelation CreateRelation(Actor who, int status, int priority = 0)
	{
		if (!ValidateActor(who))	return null;
		
		let r = new('TM_ActorRelation');
		r.Update(who, status, priority);
		return r;
	}
	
	protected static bool ValidateActor(Actor mon)
	{
		return (mon && !mon.bKILLED);
	}
	
	bool Update(Actor who, int status, int priority = 0)
	{
		if (!ValidateActor(who))	return false;
		
		self.Mo = who;
		self.Status = status;
		self.Priority = priority;
		return true;
	}
}

Class TM_RelationManager play
{
	private Actor Owner;
	bool OnlyListed;
	private Array<TM_ClassRelation> Classes;
	private Array<TM_ActorRelation> Actors;
	
	static TM_RelationManager Create(Actor mo)
	{
		if (!mo || mo.bDESTROYED)	return null;
		let m = new('TM_RelationManager');
		m.Init(mo);
		return m;
	}
	
	protected void Init(Actor mo)
	{
		Owner = mo;
		Clear();
	}
	
	Actor GetOwner() const { return Owner; }
	bool SetOwner(Actor mo) 
	{ 
		if (!mo)	return false;	
		Owner = mo;	return true; 
	}
	
	
	/*--------------------------------------------------------------------------
	Sets a relationship up with another actor type. If one is already established,
	modifies it instead.
	
	*who
		The class actor to have a custom relation with.
		
	*status
		The type of status to have. Can be one of the following.
		
		-Rel_None: Normal relationship. Not an active target but can infight if
			provoked. Will attack players by default unless friendly.
		-Rel_Neutral: Like none, but won't attack players set with this.
		-Rel_Hate: Attack on sight. Priority will take into account if this target
			is a higher threat.
		-Rel_Ignored: Doesn't retaliate when attacked.
		-Rel_Afraid: Runs away from this actor and doesn't attack anything else
			until it's out of range.
		
	*priority
		Only used by Rel_Hate status. When searching for enemies to target, 
		the higher priority targets will be searched for first.
	--------------------------------------------------------------------------*/
	void SetClassRelation(Class<Actor> who, int status, bool parent = false, int priority = 0)
	{
		if (!who) return;
		
		if (status <= Rel_None)
		{
			RemoveClassRelation(who);
			return;
		}
		
		int size = Classes.Size();
		for (int i = 0; i < Classes.Size(); i++)
		{
			if (!Classes[i])	continue;
			if (Classes[i].ClassType == who)
			{
				Classes[i].Status = status;
				Classes[i].Parent = parent;
				Classes[i].Priority = priority;
				return;
			}
		}
		
		let rel = TM_ClassRelation.CreateRelation(who, status, parent, priority);
		if (rel)	Classes.Push(rel);
	}
	
	void RemoveClassRelation(Class<Actor> who)
	{
		for (int i = 0; i < Classes.Size(); i++)
		{
			if (Classes[i] && Classes[i].ClassType == who)
			{
				Classes[i].Destroy();
				Classes.Delete(i);
				return;
			}
		}
	}
	
	int FindClassRelation(Class<Actor> who) const
	{
		if (!who || Classes.Size() < 1)	return 0;
		
		for (int i = 0; i < Classes.Size(); i++)
		{
			let r = Classes[i];
			if (r && (r.ClassType == who || (r.Parent && who is r.ClassType)))
				return r.Status;
		}
		return 0;
	}
	
	
	
	// Cleans the array of any nullz (basically memory management).
	void CleanClasses()
	{
		int size = Classes.Size();
		if (size < 1)	return;
		
		Array<TM_ClassRelation> temp; temp.Clear();
		for (int i = 0; i < size; i++)
		{
			if (Classes[i])
			{
				if (Classes[i].ClassType)
					temp.Push(Classes[i]);
				else Classes[i].Destroy();
			}
		}
		Classes.Move(temp);
	}
	
	//--------------------------------------------------------------------------
	// Actor variant
	// 
	// The difference between this and classes is this sets for specific actors
	// instead of an entire blanket carpet.
	//
	// Actors take priority over classes.
	//--------------------------------------------------------------------------
	
	void SetActorRelation(Actor who, int status, int priority = 0)
	{
		if (!who) return;
		
		if (status <= Rel_None)
		{
			RemoveActorRelation(who);
			return;
		}
		
		int size = Actors.Size();
		for (int i = 0; i < Actors.Size(); i++)
		{
			if (!Actors[i])	continue;
			if (Actors[i].mo == who)
			{
				Actors[i].Status = status;
				Actors[i].Priority = priority;
				return;
			}
		}
		
		let rel = TM_ActorRelation.CreateRelation(who, status, priority);
		if (rel)	Actors.Push(rel);
	}
	
	void RemoveActorRelation(Actor who, int i = -1) 
	{
		if (!who)	return;
		
		if (i > -1 && i < Actors.Size())
		{
			DoRemoveActorRelation(who, i);
			return;
		}
		else for (int i = 0; i < Actors.Size(); i++)
		{
			if (DoRemoveActorRelation(who, i))
				return;
		}
	}
	
	private bool DoRemoveActorRelation(Actor who, int i)
	{
		if (Actors[i] && Actors[i].mo == who)
		{
			Actors[i].Destroy();
			Actors.Delete(i);
			return true;
		}
		return false;
	}
	
	int FindActorRelation(Actor who) const
	{
		if (!who || Actors.Size() < 1)	return 0;
		
		for (int i = 0; i < Actors.Size(); i++)
		{
			let r = Actors[i];
			if (r)
			{
				if (who == r.mo || (r.Parent && who is r.mo.GetClass()))
					return r.Status;
			}
		}
		return 0;
	}
	
	Actor NextActorRelation(int type, bool raw = false) const
	{
		if (type <= Rel_None || Actors.Size() < 1)
			return null;
		for (int i = Actors.Size() - 1; i > -1; i--)
		{
			let r = Actors[i];
			if (!r)	continue;
			
			if (r.mo && !r.mo.bKILLED && r.Status == type)
				return r.mo;
		}
		return null;
	}
	
	void CleanActors()
	{	
		if (Actors.Size() < 1)	return;
		Array<TM_ActorRelation> temp; temp.Clear();
		for (int i = 0; i < Actors.Size(); i++)
		{
			if (Actors[i])
			{
				let mo = Actors[i].mo;
				if (mo && !mo.bKILLED)
					temp.Push(Actors[i]);
				else Actors[i].Destroy();
			}
		}
		
		Actors.Move(temp);
	}
	//==========================================================================
	// Both
	//==========================================================================
	
	//--------------------------------------------------------------------------
	// Checks if any recorded actors/classes have the status type.
	// At least one is needed to return true. Any at all.
	bool CheckStatusType(int status) const
	{
		if (status <= Rel_None || status > Rel_Max || 
			(Classes.Size() < 1 && Actors.Size() < 1))
			return false;
		
		// Just search for any type that has the desired status.
		int size = Actors.Size();
		for (int i = 0; i < size; i++)
		{
			let r = Actors[i];
			if (r && r.Mo && r.Status == status)
				return true;
		}
		
		size = Classes.Size();
		for (int i = 0; i < size; i++)
		{
			let r = Classes[i];
			if (r && r.ClassType && r.Status == status)
				return true;
		}
		return false;
	}
	
	//--------------------------------------------------------------------------
	// Fills array 'act' with any actors that have the matching 'status' type.
	void FindStatusActor(int status, out Array<TM_ActorRelation> act)
	{
		act.Clear();
		
		if (status < 1 || status >= Rel_Max)	return;
		
		int size = Actors.Size();
		for (int i = 0; i < size; i++)
		{
			let rel = Actors[i];
			if (rel && rel.Status == status && rel.mo)
				act.Push(rel);
		}
	}
	
	//--------------------------------------------------------------------------
	// Same as FindStatusActor but for classes.
	void FindStatusClass(int status, out Array<TM_ClassRelation> cls)
	{
		cls.Clear();
		
		if (status < 1 || status >= Rel_Max)	return;
		
		int size = Classes.Size();
		for (int i = 0; i < size; i++)
		{
			let rel = Classes[i];
			if (rel && rel.Status == status && rel.ClassType)
				cls.Push(rel);
		}
	}
	
	int Size(int whom = Res_Both) const
	{ 	
		Switch(whom)
		{
			Case Res_Actors:	return Actors.Size();
			Case Res_Classes:	return Classes.Size();
			Default: 			return Actors.Size() + Classes.Size();
		}
		return 0;
	}
	void Clear(int whom = Res_Both)
	{
		if (whom != Res_Classes)
		{
			for (int i = 0; i < Actors.Size(); i++)
				if (Actors[i])	Actors[i].Destroy();
			Actors.Clear(); 
		}
		if (whom != Res_Actors)
		{
			for (int i = 0; i < Classes.Size(); i++)
				if (Classes[i])	Classes[i].Destroy();
			Classes.Clear();
		}
	}
}







//==============================================================================
//==============================================================================
// Relationship functions
//==============================================================================
//==============================================================================

extend class TM_Monster
{
	//==========================================================================
	// Relation stuff
	//
	// Used to determine aggressiveness, passiveness, and neutrality towards
	// others.
	//==========================================================================
	protected TM_RelationManager Relations;
	protected bool OnlyListed, AttackDamagers;
	
	
	//--------------------------------------------------------------------------
	// If a relationship manager is needed, call this to perform appropriate
	// steps for setting up.
	virtual protected void SetupRelations(bool create = false)
	{	
		if (create)
		{
			if (Relations)	Relations.Clear();
			else Relations = TM_RelationManager.Create(self);
		}
	}
	
	protected void ClearBlockingInfo()
	{
		BlockingMobj = null;
		BlockingLine = null;
		BlockingFloor = null;
		BlockingCeiling = null;
		Blocking3DFloor = null;
	}
	
	//--------------------------------------------------------------------------
	// Convenience functions for relationships.
	int CheckClassRelation(Class<Actor> mo) const
	{	return (!mo || !Relations) ? 0 : Relations.FindClassRelation(mo);	}
	
	int CheckActorRelation(Actor mo) const
	{	return (!mo || !Relations) ? 0 : Relations.FindActorRelation(mo);	}
	
	int CheckRelation(Actor mo, Class<Actor> cls = null) const
	{
		if (!Relations || (!mo && !cls))	return 0;
		
		if (mo && !cls)	cls = mo.GetClass();
		
		int AR = Relations.FindActorRelation(mo);
		if (AR >= Rel_None)	return AR;
		
		return Relations.FindClassRelation(cls);
	}
	
	void SetClassRelation(Class<Actor> mo, int status, bool parent = false, int priority = 0)
	{
		if (mo && Relations)
			Relations.SetClassRelation(mo, status, parent, priority);
	}
	
	void SetActorRelation(Actor mo, int status, int priority = 0)
	{
		if (mo && Relations)
			Relations.SetActorRelation(mo, status, priority);
	}
	
	Actor NextActorRelation(int status, bool raw = false)
	{
		if (status > Rel_None && Relations)
			return Relations.NextActorRelation(status, raw);
		return null;
	}
	
	void ClearRelations(int whom = Res_Both)
	{
		if (Relations) Relations.Clear(whom);
	}
	
	// No need for a CleanClasses because loading a saved game with missing
	// classes shouldn't ever be done.
	void CleanActors()
	{
		if (Relations) Relations.CleanActors();
	}
	
	bool CheckStatusType(int status) const
	{
		if (!Relations || status <= Rel_None || status >= Rel_Max)
			return false;
			
		return Relations.CheckStatusType(status);
	}
	
	//==========================================================================
	
	
	void RemoveActorRelation(Actor who)
	{
		if (Relations)	Relations.RemoveActorRelation(who);
	}
	
	
	bool CheckRelationTarget(Actor mo) const
	{
		if (!mo)		return false;
		if (mo == Goal)	return true;
		
		if (Relations && Relations.Size() > 0)
		{
			int ret = CheckRelation(mo);
			
			Switch(ret)
			{
				// Afraid of the other
				Case Rel_Afraid:
				// Hates the actor, will pursue
				Case Rel_Hate:		return true;
				// Akin to having NEVERTARGET.
				Case Rel_Ignored:	return false;
				// 
				Case Rel_Neutral:
					return CheckActorDamager(mo);
				Case Rel_None:
				{
					if (IsTeamMate(mo))
						return false;
					
					if (Target == Tracer)
						return true;
					
					if (bFRIENDLY)
						return (!mo.bFRIENDLY);
					else if (mo is 'PlayerPawn')	
						return true;	
					
				}
				Default:
					return CheckActorDamager(mo);
			}
			return false;
		}
		return true;
	}
	
	bool CheckActorDamager(Actor mo, int attack = 0) const
	{
		if (mo)
		{
			if (attack > 0 || (attack == 0 && AttackDamagers))	
				return (Damagers.Find(mo) < Damagers.Size());
		}
		return false;
	}
//	{	return mo && ((AttackDamagers && Damagers.Find(mo) < Damagers.Size()));	}
	
	protected void ClearTarget(Actor mo = null)
	{
		if (!mo)	
		{
			mo = Target;
			if (!mo)	
			{
				return;
			}
		}
		LastEnemy = null;
		if (Tracer == mo)
			Tracer = null;
		SetActorRelation(mo, Rel_None);
		A_ClearTarget();
	}
}

//==============================================================================
//==============================================================================
// (WIP) Mount/Rider Systems
//
// This handles all things dealing with mounting and riding others. 
// Currently a WIP and still in need of more work.
//==============================================================================
//==============================================================================

Class TM_MountObject play
{
	Actor Mo;
	Vector3 Offset;
	
	static TM_MountObject CreateMountObject(Actor mo, Vector3 off)
	{
		if (!mo || mo.health < 1)
			return null;
			
		let mobj = new('TM_MountObject');
		mobj.Mo = mo;
		mobj.Offset = off;
		return mobj;
	}
}

Class TM_MountInfo : Thinker
{
	const CleanTimer = 35;
	
	private double TotalHeight; // Height of all combined actors.
	private int Timer;
	
	private Array<TM_MountObject> Container;
//	private Array<Int> Flags;

	static TM_MountInfo CreateMountInfo()
	{
		let info = new('TM_MountInfo');
		info.Init();
		return info;
	}
	
	protected void Init() 
	{
		Container.Clear();
	}
	
	override void Tick()
	{
		if (bDESTROYED)	return;
		
		if (++Timer >= CleanTimer)
		{
			Timer = 0;
			Refresh();
			
			int size = Container.Size();
			if (size < 1)
			{
				Destroy();
				return;
			}
		}
	}
	
	protected void Refresh()
	{
		Timer = 0;
		
		Array<TM_MountObject> temp; temp.Clear();
		int size = Container.Size();
		for (int i = 0; i < size; i++)
		{
			let con = Container[i];
			if (con && con.Mo)
			{
				if (con.Mo.Health > 0)
				{
					temp.Push(con);
					continue;
				}
				else RemoveActor(con.Mo, true);
			}
		}
		Container.Move(temp);
	}

	// Bottom-most actor (the one carrying the rest)
	Actor GetBottom() 	
	{	
		int size = Container.Size();
		if (size < 1)	return null;
		return Container[0].Mo;
	}
	
	// Top-most actor.
	Actor GetTop()
	{	
		int size = Container.Size();
		if (size < 1)	return null;
		return Container[size - 1].Mo;
	}
	
	static bool ValidateActor(Actor mo)
	{
		return (mo && mo.health > 0);
	}
		
	// Checks if an actor is already mounted on a chain.
	static TM_MountInfo GetMountInfo(Actor mo)
	{
		return null;
	}
	
	//--------------------------------------------------------------------------
	// DoMount
	//
	// Attempts to set a rider atop a mount.
	//
	// Parameters:
	// 
	// *Rider
	//	The one to ride atop the Mount.
	//
	// *Mount
	//	The one to be ridden by the Rider.
	// 
	// *Offset
	//	The relative positional offsets (at least for XY).
	// 
	// *Flags
	//	-MTF_TOMOUNT: Moves the Rider to the Mount's chain.
	//	-MTF_TORIDER: Moves the Mount to the Rider's chain.
	//--------------------------------------------------------------------------
	
	static bool DoMount(Actor Rider, Actor Mount, Vector3 Offset, int flags = MTF_TOMOUNT)
	{
		if (!Rider || !Mount)	return false;
		
		// Check if the actor is already mounted elsewhere. This requires some
		// special handling in order to make sure it's properly set up. Flags
		// determine the chain to attach to.
		let rinfo = GetMountInfo(Rider);
		let minfo = GetMountInfo(Mount);
		
		bool ToMount = (flags & MTF_TOMOUNT);
		bool ToRider = (flags & MTF_TORIDER);
		
		// Remove them both from their chains and start a new one.
		if (ToMount && ToRider)
		{
			if (minfo)	Dismount(Mount, minfo);
			if (rinfo)	Dismount(Rider, rinfo);
			
			let info = CreateMountInfo();
			info.AddActor(Mount, (0,0,0));
			info.AddActor(Rider, Offset);
		}
		// Peel the rider off the current and stick it on top of the mount.
		else if (ToMount)
		{
			if (!minfo)	
			{
				minfo = CreateMountInfo();
				minfo.AddActor(Mount, (0,0,0));
			}
			if (rinfo != minfo)	Dismount(Rider, rinfo);
			minfo.AddActor(Rider, Offset, minfo.GetActorIndex(Mount) + 1);
		}
		// Take the mount away from their stack and stick'em under the rider.
		else if (ToRider)
		{
			if (!rinfo)
			{
				rinfo = CreateMountInfo();
				rinfo.AddActor(Rider, Offset);
			}
			if (rinfo != minfo)	Dismount(Mount, minfo);
			rinfo.AddActor(Mount, (0,0,0), Max(0, rinfo.GetActorIndex(Rider) - 1));
		}
		/*
		else if (!GetMount(Rider) && !GetRider(Mount))
		{
			
			let info = CreateMountInfo();
			info.AddActor(Mount, (0,0,0));
			info.AddActor(Rider, Offset);
		}
		*/
		else return false;
		
		return true;
	}
	
	static bool Dismount(Actor mo, TM_MountInfo info = null)
	{
		if (!mo)	return false;
		
		if (!info)		info = GetMountInfo(mo);
		return (info) ? info.RemoveActor(mo) : false;
	}
	
	//--------------------------------------------------------------------------
	// Gets the position of the actor in the array.
	int GetActorIndex(Actor mo)
	{
		if (!mo)	return -1;
		
		int size = Container.Size();
		if (size < 1)	return -1;
		
		for (int i = 0; i < size; i++)
		{
			if (Container[i].Mo == mo)
				return i;
		}
		
		return -1;
	}
	
	// Get the actor riding this actor.
	Actor GetRider(Actor mo)
	{
		if (!mo)	return null;
		
		int size = Container.Size();
		int pos = GetActorIndex(mo);
		if (pos < 0 || pos >= size - 1)	
			return null; // Actor not present here.
		
		return Container[pos + 1].Mo;
	}
	// Get the actor being ridden.
	Actor GetMount(Actor mo)
	{
		if (!mo)	return null;
		
		int size = Container.Size();
		int pos = GetActorIndex(mo);
		if (pos < 1 || pos >= size)	
			return null; // Actor not present here.
		
		return Container[pos - 1].Mo;
	}
	
	private void SetupActor(Actor mo)
	{
		/*
		mo.SetInventory('TM_Mount', 1);
		let inv = TM_Mount(mo.FindInventory('TM_Mount', true));
		if (inv)	inv.MountInfo = self;
		*/
	}
	
	protected bool AddActor(Actor mo, Vector3 Offset, int index = -1)
	{
		if (!ValidateActor(mo))	return false;
		
		Refresh();
		int size = Container.Size();
		int pos = GetActorIndex(mo);
		
		// Actor not found.
		if (pos < 0)
		{
			let con = TM_MountObject.CreateMountObject(mo, Offset);
			SetupActor(mo);
			
			if (index < 0 || index >= size)
			{
				Container.Push(con);
			}
			else
			{
				Container.Insert(index, con);
			}
			return true;
		}
		// Actor is inside but wants to change spots.
		else if (index >= 0 && pos != index)
		{
			let con = Container[pos];
			
			index = max(0, min(index, size - 1));
			
			let temp = Container[index];
			Container[index] = Container[pos];
			Container[pos] = temp;
			return true;
		}
		return false;
	}
	
	protected bool RemoveActor(Actor mo, bool cleaning = false)
	{
		int pos = GetActorIndex(mo);
		if (pos > -1)
		{	
			if (cleaning)
			{
				Container[pos] = null;
			}
			else
			{
				Container[pos].Destroy();
				Container.Delete(pos);
			}
			return true;
		}
		return false;
	}
}

extend class TM_Entity
{
	protected bool NoRiders;
	
	bool MountActor(Actor mo, Vector3 off = (0,0,0), bool add = true)
	{
		return false;
	}
	
	void Dismount(bool reconnect = false, bool allriders = false, bool allmounts = false)
	{
		
	}
	
	void Disconnect(bool rider = false, bool mount = true, bool reconnect = false)
	{
		
	}
	
	
	virtual void SpawnRiders()
	{
	}
	
	
	void SpawnRider(Class<TM_Entity> cls, out double hoff, int chance = 256)
	{
		if (NoRiders || !cls || irandom(1,256) > chance)	return;
		
		let mo = TM_Entity(Spawn(cls, pos, ALLOW_REPLACE));
		if (mo)
		{
			mo.NoRiders = true;
			if (mo.MountActor(self, (0,0, hoff)))
				hoff = mo.Height;
		}
	}
	
	bool IsBottomMount()
	{
		return false;
	}
}