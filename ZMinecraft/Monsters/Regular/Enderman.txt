/*==============================================================================
Endermen
 
Alien anthropomorphic being that can teleport. Dormant until a player looks at
his head from any direction.

Drops weapons and powerups rarely

+ Neutral mob that only retaliates when hurt
- Very fast, aggressive, and strong melee attacks
- Teleports around and out of damaging sectors
==============================================================================*/

/*
$limit Minecraft/Enderman/Death	0
$limit Minecraft/Enderman/Stare 0
$limit Minecraft/Enderman/Hit 0
$limit Minecraft/Enderman/Idle 0
$limit Minecraft/Enderman/Portal 0
$limit Minecraft/Enderman/Scream 0

- Both -
Body:			0.0		0.0		6.6

- Normal -
Head (Angry): 	0.0		0.0		7.8
Arms:			0.0		~1.0	7.6
Legs:			0.0		~.4		5.8

- Gib -
Head:			0.0		0.0		9.4
Arms:			0.0		~1.0	4.8
Legs:			0.0		~.4		3.0

*/


Class TM_EndermanWeaponSpawner : RandomSpawner
{
	Default
	{
		DropItem 'Shotgun', 		255, 60;
		DropItem 'SuperShotgun',	255, 50;
		DropItem 'Chaingun', 		255, 40;
		DropItem 'RocketLauncher',	255, 30;
		DropItem 'PlasmaRifle',		255, 15;
		DropItem 'BFG9000',			255, 1;
	}
}

//
const EndermanTargetDistance = 2048.0;
Class TM_Enderman : TM_Monster
{
	const _Radius = 1.2;
	const _Height = 9.4;
	const RealScale = 7.0;
	const RealRadius = RealScale * _Radius;
	const RealHeight = RealScale * _Height;

	const NormalSpeed = 3.0;
	const AngerSpeed = 7.0;
	
	mixin NormalLimbCount;
	private Array<TM_CVector3> LimbVec;
	
	Default
	{
		Health 300;
		Mass 200;
		Scale RealScale;
		Radius RealRadius;
		Height RealHeight;
		Speed NormalSpeed;
		RipLevelMin (int.min + 1);
		MaxStepHeight 64;
		BloodColor "Purple";
		ActiveSound "Minecraft/Enderman/Idle";
		PainSound "Minecraft/Enderman/Hit";
		DeathSound "Minecraft/Enderman/Death";
		
		Tag "Enderman";
		Obituary "%o blinked. Then an Enderman ate %p eyes.";
		
		MaxTargetRange EndermanTargetDistance;
	}
	
	override bool DropItems(Actor src, Actor inf, Name mod)
	{
		if (!Super.DropItems(src, inf, mod))
			return false;
		
		A_DropItem('TM_EndermanWeaponSpawner',-1, 80);
		if (!A_DropItem('TM_EndermanDrop',-1, 32))
			Event.DropItem(self, 'Backpack', -1, 64);
		
		return true;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		AttackDamagers = false;
		Init(LimbCount);
		Limb[Head] = TM_BodyPart(Spawn('TM_EndermanHead', pos));
		Limb[Body] = TM_BodyPart(Spawn('TM_EndermanBody', pos));
		Limb[ArmR] = TM_BodyPart(Spawn('TM_EndermanArmRight', pos));
		Limb[ArmL] = TM_BodyPart(Spawn('TM_EndermanArmLeft', pos));
		Limb[LegR] = TM_BodyPart(Spawn('TM_EndermanLegRight', pos));
		Limb[LegL] = TM_BodyPart(Spawn('TM_EndermanLegLeft', pos));
		for (int i = 0; i < Limb.Size(); i++)
		{
			let lim = Limb[i];
			if (Lim)
			{
				if (i <= Body)		Lim.Master = self;
				else				Lim.Master = Limb[Body];
				Lim.Owner = self;
				Lim.Scale = Scale;
			}
		}
		/*
		Limb[Head].SetPosOffsets((0.0, 0.0, 7.8));
		Limb[Body].SetPosOffsets((0.0, 0.0, 6.6));
		Limb[ArmR].SetPosOffsets((0.0, 1.0, 7.6));
		Limb[ArmL].SetPosOffsets((0.0,-1.0, 7.6));
		Limb[LegR].SetPosOffsets((0.0, 0.4, 5.8));
		Limb[LegL].SetPosOffsets((0.0,-0.4, 5.8));
		*/
		LimbVec.Clear();
		LimbVec.Reserve(Limb.Size());
		for (int i = 0; i < Limb.Size(); i++)
		{
			let vec = TM_CVector3.Create((0,0,0));
			LimbVec[i] = vec;
		}
		
		LimbVec[Head].v = (0.0,	 0.0, 7.8);
		LimbVec[Body].v = (0.0,  0.0, 6.6);
		LimbVec[ArmR].v = (0.0,  1.0, 7.6);
		LimbVec[ArmL].v = (0.0, -1.0, 7.6);
		LimbVec[LegR].v = (0.0,  0.4, 5.8);
		LimbVec[LegL].v = (0.0, -0.4, 5.8);
		
		
		for (int i = 0; i < Limb.Size(); i++)
			if (Limb[i])	Limb[i].SetPosOffsets(LimbVec[i].v);
		
		
		
	}
	override void EnterIdle() 
	{	
		SetAngry(null);	
		Super.EnterIdle();
	}
	
	States
	{
	See:
		TNT1 A 1 
		{
			if (!ValidateTarget(true, flags: VTF_TargetOnly))
			{
				SetAngry(null);
				return ResolveState('Idle');
			}
			int flag = (MoveWait > 0) ? CHF_DONTMOVE : 0;
			Chase(flags: flag|CHF_NOPLAYACTIVE);
			return ResolveState(null);
		}
		Wait;
	Melee:
		TNT1 A 1 DoMelee(IRandom(20, 40));
		Goto See;
	}
}

Class TM_EndermanDrop : RandomSpawner
{
	Default
	{
		DropItem "BlurSphere", 256, 1;
		DropItem "Berserk", 256, 1;
		DropItem "InvulnerabilitySphere", 256, 1;
	}
}

//==============================================================================
//==============================================================================
// Enderman Tracer
//
// This is called whenever an enederman is present, in order to get all players
// information at what they're looking at. In this case, if looking at an
// Enderman's upper boundary box where the head is, provided he's passive,
// trigger the beast.
//==============================================================================
//==============================================================================


extend class TM_Handler
{
	transient private TM_Tracer etrc;
	private void DoEnderTrace()
	{
		if (!etrc)	etrc = new('TM_Tracer');
		
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i] || !players[i].mo)
				continue;
			
			Actor plr = players[i].mo;
			if (!plr)	continue;
			
			Vector3 ang = TM_Map.AnglesToVector(plr.angle, plr.pitch);
			Vector3 pos = plr.Vec2OffsetZ(0,0,plr.player.viewz);
			
			bool Pushed = false;
			etrc.HitList.Clear();
			etrc.Trace(pos, plr.CurSector, ang, EndermanTargetDistance, 0);
			
			Array<TM_TraceHitList> hl; hl.Move(etrc.HitList);
			TM_Enderman mo = null;
			for (int i = 0; i < hl.Size(); i++)
			{
				if (!hl[i])	continue;
				mo = hl[i].mo;
				if (mo && !mo.bKILLED && !mo.CheckFear(plr))
				{
					Vector3 hitpos = etrc.Results.HitPos;
					let head = mo.GetHead();
					if (head && hitpos.z >= head.pos.z + head.WorldOffset.z)
						mo.SetAngry(plr, true, true);
				}
			}
		}
	}
}

//==============================================================================
// Enderman Tracer
// 
// This is only used when an enderman is around. This is used to trigger 
// endermen whenever the player looks at their heads. Only invoked by the main
// event handler to keep things nice and simple.
//==============================================================================

Class TM_TraceHitList
{
	TM_Enderman mo;
	Vector3 HitPos, HitVector;
}

Class TM_Tracer : LineTracer
{
	Array<Actor> Endermen;
	Array<TM_TraceHitList> HitList;
	override ETraceStatus TraceCallback() 
	{
		switch (Results.HitType) 
		{
			case TRACE_HitFloor:
			case TRACE_HitCeiling:
			case TRACE_HitNone:
				return TRACE_Stop;
			case TRACE_HitActor:
			{
				let mo = TM_Enderman(Results.HitActor);
				if (mo)
				{
					let et = new('TM_TraceHitList');
					et.mo = mo;
					et.HitPos = Results.HitPos;
					et.HitVector = Results.HitVector;
					HitList.Push(et);
				}
				return TRACE_Skip;
			}
			case TRACE_HitWall:
			{
				if (Results.Tier == TIER_Upper || Results.Tier == TIER_Lower) 
					return TRACE_Stop;

				let hl = Results.HitLine;
				int hf = hl.flags;
				
				if (hf & (Line.ML_BLOCKING | Line.ML_BLOCKEVERYTHING | Line.ML_BLOCKHITSCAN))
					return TRACE_Stop;
				
				if (Results.Tier == TIER_Middle && (hf & Line.ML_BLOCKING) && (hf & Line.ML_TWOSIDED))
					return TRACE_Skip;
				
			}
		}
		return TRACE_Skip;
	}
}

Class TM_EndermanArm : TM_BodyPartArm
{
	Default
	{
		TM_BodyPart.SwingAngleCap 30.0;
		TM_BodyPart.Gib 'TM_EndermanArmGib';
		TM_BodyPart.CurAction (E_Swing|E_Sway);
		Radius 0.2;
		Height 6.0;
	}
}

Class TM_EndermanArmRight : TM_EndermanArm
{	
	Default	
	{	
		TM_BodyPart.SineOffset 180, 180, 180;
		TM_BodyPart.VelSineOffset 180;
	}
}

Class TM_EndermanArmLeft : TM_EndermanArm {}

Class TM_EndermanBody : TM_BodyPart	{}

Class TM_EndermanHead : TM_BodyPartHead	{}

Class TM_EndermanLeg : TM_BodyPartLeg
{
	Default
	{
		TM_BodyPart.SwingAngleCap 30.0;
		TM_BodyPart.Gib 'TM_EndermanLegGib';
		Radius 0.2;
		Height 6.0;
	}
}

Class TM_EndermanLegRight : TM_EndermanLeg {}

Class TM_EndermanLegLeft : TM_EndermanLeg
{	
	Default
	{
		TM_BodyPart.Gib 'TM_EndermanLegGib';
		TM_BodyPart.SineOffset 180, 180, 180;
		TM_BodyPart.VelSineOffset 180;
	}
}

Class TM_EndermanBodyGib : TM_BodyPartGib	{}

Class TM_EndermanHeadGib : TM_BodyPartGib
{	Default {	TM_BodyPartGib.Offsets 0, 0, 1.6;	}	}

Class TM_EndermanArmGib : TM_BodyPartGib
{	Default {	TM_BodyPartGib.Offsets 0, 0, -2.8;	}	}

Class TM_EndermanLegGib : TM_BodyPartGib
{	Default {	TM_BodyPartGib.Offsets 0, 0, -2.8;	}	}

extend Class TM_Enderman
{
	//--------------------------------------------------------------------------
	// Not naturally hateful of players.
	//--------------------------------------------------------------------------
	override void SetupRelations()
	{
		Super.SetupRelations(true);
		SetClassRelation('PlayerPawn', Rel_Neutral, true);
	}
	
	private bool Angry, WasAngry, StaredAt;
	private int MoveWait, StareTimer, StareCount;
	private Actor StaredBy;
	private Array<Actor> Staring;
		
	void Stared(Actor at)
	{
		if (!Angry)
			Staring.Push(at);
		StaredAt = true;		
	}
	
	private void HandleStares()
	{
		if (Staring.Size() < 1)	return;
		
		if (Angry)
		{
			Staring.Clear();
			return;
		}
		Actor closest = null;
		double distance = EndermanTargetDistance ** 2;
		
		for (int i = 0; i < Staring.Size(); i++)
		{
			if (Staring[i] && Targetable(Staring[i]))
			{
				double dist = Distance3DSquared(Staring[i]);
				if (dist >= distance)	continue;
				
				closest = Staring[i];
				distance = dist;
			}
		}
		Staring.Clear();
		
		if (closest != StaredBy)
		{
			StaredBy = Closest;
			StareCount = 0;
		}
		
		if (Closest)
		{
			StareTimer = 5;
			if (StareCount > 7)
				SetAngry(closest, true, true);
			else StareCount++;
		}
	}
	
	void ClearStare()
	{
		StaredAt = false;
		StareTimer = StareCount = 0;
		StaredBy = null;
		AngerTarget = null;
	}
	
	bool IsAngry() { return Angry; }
	
	private Actor AngerTarget;
	void SetAngry(Actor at, bool snd = false, bool stare = false)
	{
		// If the staring actor is looking at the head, don't move until eye
		// contact is broken.
		if (at)
		{
			bool trg = Targetable(Target, !stare);
			if (trg && stare)
			{
				if (at == Target)
					MoveWait = 2;
				
				return;
			}
			Angry = Targetable(at, !stare);
		}
		else Angry = false;
		
		// Don't make me angry...
		// You won't like me when I'm angry...
		if (Angry)	
		{
			Target = at;
			AngerTarget = at;
			if (!WasAngry && snd)
			{
				A_StartSound("Minecraft/Enderman/Stare", 9, CHANF_OVERLAP, 1, ATTN_NONE);
				WasAngry = true;
			}
			ActiveSound = "Minecraft/Enderman/Scream";
			if (Limb[Head])	Limb[Head].Frame = Fr_B;
			Speed = AngerSpeed;
			SetActorRelation(Target, Rel_Hated);
			EnterSee();
		}
		// Anger management successful.
		else
		{
			SetActorRelation(Target, Rel_None);
			A_ClearTarget();
			ClearStare();
			
			ActiveSound = Default.ActiveSound;
			for (int i = 0; i < Limb.Size(); i++)
				if (i == Head && Limb[i])
				{
					Limb[i].Frame = Fr_A;
					break;
				}
			Speed = NormalSpeed;
		}
	}
	
	// Jiggle the limbs about
	private void JiggleLimbs()
	{
		if (Angry)
		{
			double r = 2.0 / (Scale.Y * OverScale);
			Vector3 jiggle = (FFRandom(-r, r), FFRandom(-r, r), 0);
			
			for (int i = 0; i < Limb.Size(); i++)
			{
				let Lim = Limb[i];
				if (!Lim)	continue;
				
				Lim.SetAbsOffsets(jiggle);		
			}
		}
		else if (WasAngry)
		{
			
			for (int i = 0; i < Limb.Size(); i++)
			{
				let Lim = Limb[i];
				if (!Lim)	continue;
				
				Lim.SetAbsOffsets((0,0,0));
			}
		}
	}
	
	// Jiggling limbs and handling of target mismatch.
	override void Tick()
	{
		if (bKILLED || IsFrozen() || bDESTROYED)
		{
			Super.Tick();
			return;
		}
		
		if (MoveWait > 0)	MoveWait--;

		StaredAt = false;
		WasAngry = Angry;
		
		if (!(Scale ~== (0,0)) && ~(OverScale == 0))
			JiggleLimbs();
		
		Super.Tick();
		
		
		
		if (Target)
		{
			if (Target.bKILLED || Target.bDESTROYED || 
				(Target != Goal && Target != AngerTarget &&
				CheckClassRelation(Target.GetClass()) != Rel_Hated))
			{
				SetAngry(null);
			}
		}
	}
	
	override bool CanWaterDamage() { return true; }
	
	override void DamageReact(Actor inf, Actor src, int damage, int dmg, Name mod, int flags, double angle, bool secdmg)
	{
		if (dmg < 1 || mod == 'Falling')	return;
		
		if (!src && !inf && (mod == 'Fire' || mod == 'Slime' || mod == 'Drowning'))
		{
			ClearRelations(Res_Actors);
			SetAngry(null);
			DoTeleport();
			return;
		}
		SetAngry(src);
		// if enemy damage is above the legs (5.4 * Scale.Y), give a chance to teleport
		
	}
//	private Actor PrevTarget;
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		/*
		if (!bKILLED && CheckDamageTimer() < 1 && Targetable(source))
			PrevTarget = source;
		*/
		return (InTeleport && !(flags & DMG_FORCED)) ? 0 : Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		
		
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (InTeleport)
		{
			if (other is 'PlayerPawn' || other.bISMONSTER || other.bMISSILE)
				return false;
		}
		else if (other is 'TM_ArrowProjectile')
		{
			if (IRandom(0,3))	return false;
		}
		return Super.CanCollideWith(other, passive);
	}
	
	//--------------------------------------------------------------------------
	// GetTeleSpots
	//
	// Attempts to find a position nearby that doesn't have any damage sectors
	// or at least doesn't take any damage from it. 
	
	private bool InTeleport;
	private bool GetTeleSpots(out Array<TM_CVector3> Spots, Actor mo = null, 
		double dist = -1, double iter = -1, bool condition = true)
	{
		Spots.Clear();
		if (bDESTROYED || bKILLED || dist == 0)	return false;
		if (!mo)	mo = self;
		
		if (dist < 0)	dist = 2048;
		if (iter < 1)	iter = 32;
		iter = round(iter);
		
		double i, j, k, l,
			half = dist * 0.5;
		Vector3 poz = mo.pos;
		double curz = mo.pos.z;
		Vector2 grid = (FRandom(-half, half), FRandom(-half, half));
	//	grid = TM_Map.SnapVector2Uniform(grid, iter);
		k = grid.x;
		l = grid.y;
		bool ndrop = bNODROPOFF;
		bNODROPOFF = true;
		for (i = 0; i < dist; i += iter)
		{
			k = ((grid.x + i) % dist) - half;
			for (j = 0; j < dist; j += iter)
			{
				l = ((grid.y + j) % dist) - half;
				
				Vector3 off = (poz.x + k, poz.y + l, poz.z);
				Sector s = Level.PointInSector(off.xy);
				
				// Debug info for showing locations.
				if (TMV_Debug == 10)
				{
					let mo = Spawn('TM_ExplosionSprite', off);
					if (mo)	mo.Scale *= 0.5;
				}
				
				if (condition)
				{
					if (s.DamageAmount > 0 && GetDamageFactor(s.DamageType, s.DamageAmount) > 0)
						continue;
					
				//	off.z = s.floorplane.ZatPoint(off.xy);
					off.z = s.NextHighestCeilingAt(off.x, off.y, off.z, off.z + height);
					off.z = s.NextLowestFloorAt(off.x, off.y, off.z, 0, height);
					if (!Level.IsPointInLevel(off) || 
						off.z > poz.z + dist || 
						off.z < poz.z - dist)
						continue;
				}
				SetZ(off.Z);
				if (CheckPosition(off.XY))
				{
					if (TMV_Debug == 9)
					{
						let mo = Spawn('TM_ExplosionSprite', off);
						if (mo)	mo.Scale *= 0.5;
					}
					let v = TM_CVector3.Create(off);
					Spots.Push(v);
				}
				SetZ(curz);
			}
		}
		bNODROPOFF = ndrop;
		return (Spots.Size() > 0);
	}
	
	void TeleSound()
	{	A_StartSound("Minecraft/Enderman/Portal", 9, CHANF_OVERLAP);	}
	
	protected bool DoTeleport()
	{
		Array<TM_CVector3> Spots;
		GetTeleSpots(Spots, self, -1, 64);
		double curz = pos.z;
		Vector3 v;
		
		int size = Spots.Size();
		int offset = irandom(0, size - 1);;
		for (int i = 0; i < Spots.Size(); i++)
		{
			int j = (i + offset) % size;
			if (!Spots[j])	continue;
			
			v = Spots[j].V;
		//	SetOrigin(Spots[i].V, true);
			SetZ(v.z);
			if (TryMove(v.XY, true))
			{
				TeleSound();
				return true;
			}
		}
		SetZ(curz);
		return false;		
	}
	
	protected bool DoTeleportToEnemy()
	{
		TeleSound();
		return true;
	}
	
	/*
	private bool GetTeleSpots(Actor mo, int dist = -1, int morange = -1)
	{
		if (bDESTROYED || bKILLED || dist == 0)	return false;
		
		if (!mo)	mo = self;
		
		int BS = 32; // block size
		
		if (dist < 0)		dist = BS;
		if (morange < 0)	morange = dist / 2;
		
		Spots.Clear();
		
		int i, j, k, l,
			iter = dist,
			half = iter / 2;
		
		k = IRandom(-half,half) * iter;
		l = IRandom(-half,half) * iter;
		
		Vector3 poz = mo.pos;
		
		double curz = poz.Z;
		Vector3 Closest = poz;
		double CloseDist = 32767;
		
		
		for (i = 0; i < iter; i++)
		{
			k = ((k + i) % iter) - half;
			for (j = 0; j < iter; j++)
			{
				l = ((l + j) % iter) - half;
				
				Vector3 off = (poz.x + iter * k, poz.y + iter * l, poz.z);
				Sector s = Level.PointInSector(off.xy);
				
				
				
			//	off.z = s.floorplane.ZatPoint(off.xy);
				off.z = s.NextHighestCeilingAt(off.x, off.y, off.z, off.z + height);
				off.z = s.NextLowestFloorAt(off.x, off.y, off.z, 0, height);
				if (!Level.IsPointInLevel(off) || 
					off.z > poz.z + double(BS * iter) || 
					off.z < poz.z - double(BS * iter))
					continue;
				
				
				SetZ(off.Z);
				if (CheckPosition(off.XY))
				{
					let v = TM_CVector3.Create(off);
					Spots.Push(v);
				}
				SetZ(curz);
			}
		}
		SetZ(curz);
		return (Spots.Size() > 0);
	}
	*/
}