//==============================================================================
// Creeper
// 
// Silent monster that explodes as its main way of attacking. Has server options
// for exploding when killed.
// 
// Drops weapons rarely.
//
// + Short sighted
// + Explosion deals 1000 to non-native monsters (~4+ kills a cyberdemon up close)
// - No active sound
// - Large explosion radius
// - Explodes when falling from tall ledges
//==============================================================================

/*
Minecraft/Creeper/Pain
Minecraft/Creeper/Death

Head:			0.0,	0.0,	3.6
(Gib) Body:		0.0,	0.0,	2.4
Legs F:			0.4,	+-.4,	1.2
Legs B:			-.4,	+-.4,	1.2

Gib Head:		0.0,	0.0,	4.4
Gib Legs F:		0.8,	+-.4,	0.6
Gib Legs B:		-.8,	+-.4,	0.6

*/



// Because someone is going to want to use them against the Creeper Ghoul from
// Ghoul's Forest. I just know it. >:)
Class TM_Creeper : TM_Monster
{
	const ExploRange = 256.0;
	const ExploFall = (ExploRange * 0.5);
	const _Radius = 1.6;
	const _Height = 5.2;
	const RealScale = 8.0;
	const RealRadius = RealScale * _Radius;
	const RealHeight = RealScale * _Height;
	
	enum ELimbs
	{
		Head = 0,
		Body,
		LegFL,
		LegFR,
		LegBL,
		LegBR,
		LimbCount,
	};
	
	private TM_BodyPart LimbX[LimbCount];
	private bool Exploded;
	protected int HissingRange;
	
	Property HissingRange: HissingRange;
	
	Default
	{
		TM_Creeper.HissingRange 350; // Once hissing starts, get this far away to stop.
		MeleeRange 128;
		
		TM_Monster.MaxChaseRange 1024;
		TM_Monster.MaxSightRange 512;
		
		Scale RealScale;
		Radius RealRadius;
		Height RealHeight;
		Speed 5;
		
		+EXTREMEDEATH
		+FORCERADIUSDMG
		+VULNERABLE
		PainSound "Minecraft/Creeper/Pain";
		DeathSound "Minecraft/Creeper/Death";
		
		BloodColor "LightGreen";
		
		Tag "Creeper";
		Obituary "A creeper blasted %o sky high, Team Rocket style.";
	}
	
	override bool DropItems(Actor src, Actor inf, Name mod)
	{
		DropItem('TM_Item_TNT', IRandom(1,4), 10);
		return Super.DropItems(src, inf, mod);
	}
	
	override void SpawnLimbs()
	{
		Init(LimbCount);
		Limb[Head] = TM_BodyPart(Spawn('TM_CreeperHead', pos));
		Limb[Body] = TM_BodyPart(Spawn('TM_CreeperBody', pos));
		Limb[LegFL] = TM_BodyPart(Spawn('TM_CreeperLegFront', pos));
		Limb[LegFR] = TM_BodyPart(Spawn('TM_CreeperLegFront', pos));
		Limb[LegBL] = TM_BodyPart(Spawn('TM_CreeperLegBack', pos));
		Limb[LegBR] = TM_BodyPart(Spawn('TM_CreeperLegBack', pos));
		
		LimbX[Head] = TM_BodyPart(Spawn('TM_CreeperHeadW', pos));
		LimbX[Body] = TM_BodyPart(Spawn('TM_CreeperBodyW', pos));
		LimbX[LegFL] = TM_BodyPart(Spawn('TM_CreeperLegFrontW', pos));
		LimbX[LegFR] = TM_BodyPart(Spawn('TM_CreeperLegFrontW', pos));
		LimbX[LegBL] = TM_BodyPart(Spawn('TM_CreeperLegBackW', pos));
		LimbX[LegBR] = TM_BodyPart(Spawn('TM_CreeperLegBackW', pos));
				
		for (int i = 0; i < Limb.Size(); i++)
		{
			let Lim = Limb[i];
			if (Lim)
			{
				if (i <= Body)	Lim.Master = self;
				else			Lim.Master = Limb[Body];
				Lim.Owner = self;
				Lim.Activate(self);
			}
			Lim = LimbX[i];
			if (Lim)
			{
				if (i <= Body)	Lim.Master = self;
				else			Lim.Master = Limb[Body];
				Lim.CopyInvis = false;
				Lim.Owner = self;
				Lim.bINVISIBLE = true;
				Lim.A_FadeOut(1.0, 0);
				Lim.Activate(self);
			}
		}
		
		Limb[Head].SetPosOffsets((0.0,0.0,3.6));
		Limb[Body].SetPosOffsets((0.0,0.0,2.4));
		Limb[LegFR].SetPosOffsets((0.4,0.4,1.2));
		Limb[LegFL].SetPosOffsets((0.4,-.4,1.2));
		Limb[LegBR].SetPosOffsets((-.4,0.4,1.2));
		Limb[LegBL].SetPosOffsets((-.4,-.4,1.2));
		
		Limb[LegFL].SetSineOffset((180,180,180));
		Limb[LegBR].SetSineOffset((180,180,180));
		
		LimbX[Head].SetPosOffsets((0.0,0.0,3.6));
		LimbX[Body].SetPosOffsets((0.0,0.0,2.4));
		// z: 0.6
		double _z = 1.2;
		LimbX[LegFR].SetPosOffsets((0.4,0.4,_z));
		LimbX[LegFL].SetPosOffsets((0.4,-.4,_z));
		LimbX[LegBR].SetPosOffsets((-.4,0.4,_z));
		LimbX[LegBL].SetPosOffsets((-.4,-.4,_z));
		
		LimbX[LegFL].SetSineOffset((180, 180, 180));
		LimbX[LegBR].SetSineOffset((180, 180, 180));
		Super.SpawnLimbs();
	}
	
	private int age;
	
	override void Activate(Actor activator)
	{
		if (bKILLED || bDESTROYED)	return;
		Super.Activate(activator);
		for (int i = 0; i < LimbX.Size(); i++)
			if (LimbX[i])	LimbX[i].Activate(activator);
	}
	
	override void Deactivate(Actor activator)
	{
		if (bKILLED || bDESTROYED)	return;
		Super.Deactivate(activator);
		for (int i = 0; i < LimbX.Size(); i++)
			if (LimbX[i])	LimbX[i].Deactivate(activator);
		
	}
	private int ExplodeTics;
	private Vector3 TempVel;
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		if (bKILLED)	return;
		bKILLED = true;
		TempVel = Vel;
		DestroyXLimbs();
		bVULNERABLE = true;
		ExplodeTics = 5;
		
		bool boom = false;
		
		// Death by explosion, cause an explosion if enabled based on the type.
		// If kiiled by another creeper, explode based on if charging or just 
		// make it happen via cvar. Else if not by creeper, blow up if wanted.
		if (MeansOfDeath == 'Void')
			boom = false;
		else if (TMV_CreeperAlwaysBoom)
			boom = true;
		else if (dmgflags & DMG_EXPLOSION)
		{
			if (TMV_CreeperChainBoom > 0 && source is 'TM_Creeper')
			{
				if (TMV_CreeperChainBoom == 1)
					boom = Charging;
				else
					boom = true;
			}
			else if (TMV_CreeperBoomBoom)
				boom = true;
			else if (DamageType == 'Creeper')
				boom = false;
		}
		else if (source && !(source is 'TM_Creeper'))
		{
			if (source.player)
				boom = TMV_CreeperPlayerBoom;
			else
				boom = ((source.bFRIENDLY && TMV_CreeperFriendlyBoom) ||
						(!source.bFRIENDLY && TMV_CreeperEnemyBoom));
		}
		else if (!source && !inflictor && TMV_CreeperEnvironmentBoom)
		{
			boom = true;
		}
		
		DamageType = (boom) ? 'Creeper' : 'None';
		Super.Die(source, inflictor, dmgflags, meansofdeath);
		if (DamageType == 'Creeper' || DamageType == 'CreeperND')	
			Vel = TempVel;
		else bNOINTERACTION = false;
	}
	
	// Allow for a single tic to pass so explosive damage can register from Doom
	// rockets, since they deal contact damage first and explosion last.
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (health < 1)
		{
			if (ExplodeTics > 0 && damage > 0 && ApplyDamageFactor(mod, damage) > 0)
			{
				if (flags & DMG_EXPLOSION)
				{
					if (TMV_Debug == 3)	
						Console.Printf("Boom.");
					Kaboom();
				}
				else if (TMV_Debug == 3) Console.Printf("Damage not explosive.");
			}
			else
			{				
				if (TMV_Debug == 3)
				{
					if (ExplodeTics < 1)	Console.Printf("ExplodeTics is 0");
					if (damage < 1)			Console.Printf("Damage < 1");
					int d = ApplyDamageFactor(mod, damage);
					if (d < 1)			Console.Printf("D < 1");
				}
			}
		}
		
		
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	private bool HadTarget;
	override void Tick()
	{
		Super.Tick();
		
		// Gives just a couple of tics to process explosion damage for missiles
		// that blow up right upon impact, triggering the desired option in the
		// menu.
		if (bKILLED || IsFrozen())	
		{
			if (bKILLED && !IsFrozen())
			{
				if (ExplodeTics > 0)
				{
					ExplodeTics--;
					bVULNERABLE = true;
				}
				else bVULNERABLE = false;
			}
			return;
		}
		HadTarget = (HadTarget || Target != null);
		
		// Updates the white boxes to flash with visibility.
		for (int i = 0; i < LimbX.Size(); i++)
		{
			if (ChargeTimer > 0)
			{
				
				if (LimbX[i])
				{
					Vector3 NA = Angs;
					
					if (Limb[i])
					{
						
					//	LimbX[i].UpdatePosition(Limb[i], start: false);
					//	LimbX[i].CopyAngles(Limb[i], true);
					
						LimbX[i].SetOrigin(Limb[i].Pos, true);
						LimbX[i].WorldOffset = Limb[i].WorldOffset;
						LimbX[i].Angle = Limb[i].Angle;
						LimbX[i].Pitch = Limb[i].Pitch;
						LimbX[i].Roll = Limb[i].Roll;
					
					}
					else
					{
						LimbX[i].UpdatePosition(self);
						LimbX[i].SetNextAngles(Angs);
					}
					LimbX[i].UpdateScales(OverScale, Scale);
					LimbX[i].bBRIGHT = true;
					
					if (GetAge() % AlterTics == 0)
						LimbX[i].bINVISIBLE = !LimbX[i].bINVISIBLE;
					LimbX[i].A_FadeTo(MaxChargeFrac * ChargeTimer, 1.0, 0);
				}
				
			}
			else if (LimbX[i])	LimbX[i].bINVISIBLE = true;
		}
		
		if (!Charging && ChargeTimer > 0)
			ChargeTimer--;
		
		{
		
			// Handle the charging effects.
			if (Charging && ChargeTimer < MaxCharge)
				ChargeTimer++;
			else if (!Charging && ChargeTimer > 0)
				ChargeTimer--;
			
			// Do not call call actual death here. This will cause it to drop ill-gotten
			// gains, so it must behave like Minecraft and drop absolutely nothing.
			// As a result, it will never call WorldThingDied on purpose.
			if (Charging && ChargeTimer >= MaxCharge)
			{
				Kaboom();
				SetState(ResolveState("Death"));
				return;	
			}
		}
	//	else SetExplosionCounting(false);
	}
	
	protected void Kaboom(bool ClearLimbs = true)
	{
		if (bCORPSE)	return;
		
		bCORPSE = true;
		Health = 0;
		
		for (let probe = inv; probe; probe = probe.inv)
			if (probe)	probe.OwnerDied();
			
		ExplodeTics = 0;
		bNEVERTARGET = bNOINTERACTION = bINVISIBLE = bKILLED = true;
		A_UnsetShootable();
		bVULNERABLE = false;
		if (ClearLimbs)	DestroyLimbs();
		A_Stop();
		A_StopAllSounds();
		
		// Deals reduced damage to players and minecraft enemies, 
		// full to everything else.
		bool ND = (HadTarget || Damagers.Size() > 0);
		Class<Actor> filter = null;
		if (ND) filter = 'TM_Monster';
		Explode(true, 1000, ExploRange, ExploFall, -1, -1, -1, XF_NOTMISSILE, 0, false, 'Creeper');
	}
	
	protected void DestroyXLimbs()
	{
		for (int i = 0; i < LimbX.Size(); i++)
		{
			if (LimbX[i])
			{
				LimbX[i].Destroy();
				LimbX[i] = null;
			}
		}
	}
	
	override void DestroyLimbs()
	{
		DestroyXLimbs();
		Super.DestroyLimbs();
	}
	
	override void DamageReact(Actor inf, Actor src, int damage, int dmg, Name mod, int flags, double angle)
	{
		if (Charging && mod == 'Falling' && dmg > 0)
			Kaboom();
	}
	
	/*
	override void SpawnRiders()
	{
		if (NoRiders || bDESTROYED || bKILLED)	return;
		
		double hoff = 0;
		
		SpawnRider('TM_Creeper', hoff, 128);
		SpawnRider('TM_Creeper', hoff, 96);
		SpawnRider('TM_Creeper', hoff, 64);
		SpawnRider('TM_Creeper', hoff, 48);
		SpawnRider('TM_Creeper', hoff, 16);
	}
	*/

	const MaxCharge = Second + 18; // Just above 1.5 seconds.
	const MaxChargeFrac = 1.0 / MaxCharge;
	const AlterTics = 4;
	private int ChargeTimer;
	private int FlashTimer;
	private bool Charging, ChargeFall;
	private bool SuperCharged; // Charged creeper. Ruh roh!
	
	void SetExplosionCounting(bool on, bool fall = false) 
	{
		if (on && !Charging)	
		{
			A_StartSound("Minecraft/Creeper/Hiss",CHAN_BODY,CHANF_OVERLAP);
			for (int i = 0; i < LimbX.Size(); i++)
				if (LimbX[i])	LimbX[i].PostAngSet(true);
		}
		Charging = on;
		
	//	ChargeFall = (on) ? fall : false;
	}
	
	bool InExploRange(Actor mo = null, bool twod = false, double dist = -1.0)
	{
		if (!mo)	return false;
		
		
	//	if (ChargeFall && OnGround)	return true;
		
		if (dist < 0.0)
		{
			if (mo is 'PlayerPawn')
				dist = (Charging) ? HissingRange : ExploRange;
			else
				dist = (ExploRange + HissingRange) * 0.5;
		}
		
		
		dist += max(height, radius);
		return 	mo && Targetable(mo) && CheckSight(mo, CSFlags) &&
				((twod && Distance2DSquared(mo) <= (dist ** 2)) ||
				(!twod && Distance3DSquared(mo) <= (dist ** 2)));
	}
	
	double ChargeChaseSpeed;
	override void AdjustDifficulty()
	{
		Super.AdjustDifficulty();
		
		double SpeedMul = 0;
		
		Switch(TMV_AIDifficulty)
		{
			Default:
			Case Dif_Easy:		SpeedMul = 0.0; break;
			Case Dif_Normal:	SpeedMul = 0.5; break;
			Case Dif_Hard:		SpeedMul = 1.0; break;
		}
		ChargeChaseSpeed = Speed * SpeedMul;	
	}
	
	override void EnterIdle() 
	{ 
		bBRIGHT = false;
		SetExplosionCounting(false); 
		Super.EnterIdle(); 
	}
	
	States
	{
	See:
		TNT1 A 1 
		{
			bBRIGHT = false;
			if (OnGround)
				SetExplosionCounting(false);
			bool drop = bDROPOFF;
			bDROPOFF = (Target && Target.Pos.Z + Target.Height < Pos.Z && InExploRange(Target, true, HissingRange));
			Chase('Melee', null, 0, 30, true);
			bDROPOFF = drop;
		}
		Wait;
	Melee:
		TNT1 A 1
		{
			if (!InExploRange(Target, !OnGround))
			{
				SetExplosionCounting(false);
				return ResolveState("See");
			}
			SetExplosionCounting(true, pos.z > floorz);
			bBRIGHT = true;
			if (ChargeChaseSpeed > 0 && Pos.Z <= FloorZ && VelLen <= Speed)
			{
				bool drop = bDROPOFF;
				bDROPOFF = (Targetable(Target) && Target.Pos.Z + Target.Height < Pos.Z);
				double s = Speed;
				Speed = ChargeChaseSpeed;
				Chase(null, null);
				Speed = s;
				bDROPOFF = drop;
			}
			
			return ResolveState(null);
		}
		Wait;
	
	Death.Falling:
	Death.Suicide:
		
	// This damagetype is only set in Die(). 
	Death.Creeper:
	Death.Ghast:
		TNT1 A 1;
		TNT1 A 15 
		{
			Kaboom();
			A_Stop();
		}
		Stop;
	}
}


Class TM_CreeperHead :		TM_BodyPartHead {}
Class TM_CreeperBody :		TM_BodyPartBody {}
Class TM_CreeperLeg :		TM_BodyPartLeg	{ Default { TM_BodyPart.SwingAmp SineWavePerSecond * 3.0;	TM_BodyPart.SwingAngleCap 30.0;	} }
Class TM_CreeperLegFront :	TM_CreeperLeg	{ Default { TM_BodyPart.Gib 'TM_CreeperLegGib'; } }
Class TM_CreeperLegBack :	TM_CreeperLeg	{ Default { TM_BodyPart.Gib 'TM_CreeperLegGib'; } }

//InvertInvis
Class TM_CreeperHeadW :		TM_CreeperHead { Default { TM_BodyPart.IsStill true; RenderStyle "Stencil"; StencilColor "White"; +BRIGHT }}
Class TM_CreeperBodyW :		TM_CreeperBody { Default { TM_BodyPart.IsStill true; RenderStyle "Stencil"; StencilColor "White"; +BRIGHT }}
Class TM_CreeperLegFrontW :	TM_CreeperLegFront { Default { TM_BodyPart.IsStill true; RenderStyle "Stencil"; StencilColor "White"; +BRIGHT }}
Class TM_CreeperLegBackW :	TM_CreeperLegBack { Default { TM_BodyPart.IsStill true; RenderStyle "Stencil"; StencilColor "White"; +BRIGHT }}

Class TM_CreeperHeadGib :	TM_BodyPartGib {}
Class TM_CreeperBodyGib :	TM_BodyPartGib {}
Class TM_CreeperLegGib :		TM_BodyPartGib {}