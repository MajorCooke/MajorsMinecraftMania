/*==============================================================================
Skeleton (Normal)
 
Undead enemy that shoots arrows. Is rather intelligent for having no brain.

Drops ammo (bullet/shell/rocket/cell)

+ Easy to cause infighting
+ No natural resistance
+ Changes target if its arrow hits anyone other than its target
- Tactical: Backs away from enemies too close to it
- Shoots faster the closer targets are
- Can have armor/weapons in higher AI difficulty
==============================================================================*/

/*
--- All ---
Sword:				0.0		-1.0	2.7
Bow:				0.0		-1.0	2.7		Angles	-90	-45	20
Bow (Gib):			0.0		-0.9	2.7		Angles	-90	-45	20

Head:				0.0		0.0		4.8
Arm:				0.0		1.2		4.4
Leg:				0.0		0.4		1.2

(Gib) Body:			0.0		0.0		3.6
Gib Head:			0.0		0.0		5.6
Gib Leg:			0.0		0.4		1.2

--- Skeleton ---

Gib Arm:			0.0		~1.0	3.5

--- Stray ---

Gib Head:			0.0		0.0		5.6
Gib Arm (Cloth):	0.0		~1.2	3.6
Gib Leg Cloth:		0.0		~0.4	1.2

$limit Minecraft/Skeleton/Death 0
$limit Minecraft/Skeleton/Hurt 0
$limit Minecraft/Skeleton/Idle 0
$limit Minecraft/Skeleton/Step 0

$limit Minecraft/Stray/Death 0
$limit Minecraft/Stray/Hurt 0
$limit Minecraft/Stray/Idle 0
$limit Minecraft/Stray/Step 0

$limit Minecraft/WitherSkeleton/Death 0
$limit Minecraft/WitherSkeleton/Hurt 0
$limit Minecraft/WitherSkeleton/Idle 0
$limit Minecraft/WitherSkeleton/Step 0
*/


Class TM_Skeleton : TM_Undead
{
	const _Radius = 1.6;
	const _Height = 6.4;
	const RealScale = 7.0;
	const RealRadius = RealScale * _Radius;
	const RealHeight = RealScale * _Height;

	mixin NormalLimbCount;

	enum ETypes
	{
		S_Normal = 0,
		S_Stray,
		S_Wither
	};
	
	meta ETypes Type;
	
	Property Type: Type;
	
	Default
	{
		TM_Monster.CanArmor true;
		TM_Skeleton.Type S_Normal;
		Scale RealScale;
		Radius RealRadius;
		Height RealHeight;
		Health 100;
		
		
		MeleeRange 512;
		ActiveSound "Minecraft/Skeleton/Idle";
		PainSound "Minecraft/Skeleton/Hurt";
		DeathSound "Minecraft/Skeleton/Death";
		+NOBLOOD
		
		DamageFactor "Drowning", 0.0;
		
		Tag "Skeleton";
		Obituary "%o was used for target practice by a Skeleton.";
	}
	
	override bool DropItems(Actor src, Actor inf, Name mod)
	{
		for (int i = 0; i < 4; i++)
			if (irandom(0,2) == 0)
				Drops.Add('TM_PearlAmmo', irandom(1,5));
		
		return Super.DropItems(src, inf, mod);
	}
	
	
	
	override void SpawnLimbs()
	{
		Init(LimbCount);
		// Spawn the parts.
		Limb[Head] = TM_BodyPart(Spawn('TM_SkeletonHead', pos));
		Limb[Body] = TM_BodyPart(Spawn('TM_SkeletonBody', pos));
		Limb[ArmR] = TM_BodyPart(Spawn('TM_SkeletonArmRight', pos));
		Limb[ArmL] = TM_BodyPart(Spawn('TM_SkeletonArmLeft', pos));
		Limb[LegR] = TM_BodyPart(Spawn('TM_SkeletonLegRight', pos));
		Limb[LegL] = TM_BodyPart(Spawn('TM_SkeletonLegLeft', pos));
		
		// Setup whatever is needed.
		for (int i = 0; i < Limb.Size(); i++)
		{
			let Lim = Limb[i];
			if (Lim)
			{
				if (i <= Body)	Lim.Master = self;
				else			Lim.Master = Limb[Body];
				Lim.Owner = self;
				Lim.Scale = Scale;
				Lim.Activate(self);
				Lim.Frame = Type;
			}
		}
		
		// Now set the offsets.
		Limb[Head].SetPosOffsets((0.0,	0.0, 4.8));
		Limb[Body].SetPosOffsets((0.0,  0.0, 3.6));
		Limb[ArmR].SetPosOffsets((0.0,  1.0, 4.4)); //Y is 1.2 for strays.
		Limb[ArmL].SetPosOffsets((0.0, -1.0, 4.4));
		Limb[LegR].SetPosOffsets((0.0,  0.4, 2.4));
		Limb[LegL].SetPosOffsets((0.0, -0.4, 2.4));
		
		SpawnWeapon();
		SpawnArmor();
		Super.SpawnLimbs();
	}
	private TM_Bow Bow;
	override void SpawnWeapon()
	{
		int pick = randompick(ArmR, ArmL);
		Bow = TM_Bow(Limb[pick].AddLimb('TM_Bow', (0, 0, -1.6), true));
	}
	
	void SetArmAnimation(StateLabel Next)
	{
		
		for (int i = 0; i < Limb.Size(); i++)
		if (i == ArmR || i == ArmL)
		{
			State n = Limb[i].ResolveState(Next);
			if (n && Limb[i] && !Limb[i].InStateSequence(Limb[i].CurState,n))
				Limb[i].SetState(n);
		}
		
	}
	
	override void SetMeleeAnimation()	
	{	
		SetArmAnimation('ZombieMelee');
	}
	
	override void AdjustDifficulty()
	{
		Super.AdjustDifficulty();
		
		Switch(TMV_AIDifficulty)
		{
			Case Dif_Easy:		ACDif = 0.0;	break;
			Case Dif_Normal:	ACDif = 0.25;	break;
			Case Dif_Hard:		ACDif = 0.5;	break;
		}
	}
	
	private double AttackCharge, ACDif;
	const ChargeCap = 80.0; // When it reaches this, release an arrow and reset.
	const ChargeMin = 30.0; // Min amount of charge needed to show.
	const ChargeMid = ChargeCap - ChargeMin;
	const ChargeFrac = ChargeMid * 0.33;
	void NotchBow()
	{
		
		double dist = 0;
		if (Targetable(Target))
			Dist = Distance3DSquared(Target);
		else AttackCharge = 0;
		
		if (Dist > 0.0 && Dist <= ((MeleeRange + 10) ** 2) && CheckSight(Target, CSFlags))
		{
			A_Face(Target, 25, 0, 0, 0, FAF_TOP);
			
			double Frac = (1.0 - (Dist / (MeleeRange ** 2)));
			AttackCharge += Max(1.0, 1.0 + Frac) + ACDif;
			
			if (AttackCharge < ChargeMin)
			{
				SetBowAnimation(0);
				SetArmAnimation('Alert');
			}
			else
			{
				int st = 1;
				if (AttackCharge > ChargeMin + ChargeFrac * 2)
					st = 3;
				else if (AttackCharge > ChargeMin + ChargeFrac)
					st = 2;
				SetBowAnimation(st);
				SetArmAnimation('Charging');
			}
			if (AttackCharge >= ChargeCap)
			{
				AttackCharge = 0;
				FireBow();
				SetArmAnimation('Alert');
				SetBowAnimation(0);
			}
			
			BackAway(Target, (MeleeRange * 0.5));
		}
		else
		{
			SetState(ResolveState('See'));
		}
	}
	
	// TO DO: Make available for all classes and dependent on weapon.
	
	void FireBow()
	{
		if (!Targetable(Target)) return;
		
	//	let cls = GetMissileClass();
	//	if (!cls)	return;
		
		Vector3 APR = (Angle, Pitch, Roll);
		A_Face(Target, 0, 0, 0, 0, FAF_BOTTOM, Target.Height * 0.75);
		Vector3 APR2 = (Angle, Pitch, Roll);
		Turner = new('TM_QuatTurner');
		Vector3 RNG;
		if (Target is "PlayerPawn")
			RNG = (FFRandom(-5, 5), -FFRandom(0, 10),0);
		else
			RNG = (FFRandom(-2.5, 2.5), -FFRandom(0, 5),0);
		[Angle, Pitch, Roll] = Turner.GetTurnDouble2(APR2, RNG);
		A_SpawnProjectile('TM_ArrowProjectile', 32, 0, 0, CMF_AIMDIRECTION|CMF_ABSOLUTEPITCH, pitch);
		Angle = APR.X;
		Pitch = APR.Y;
		Roll = APR.Z;
	}
	
	override void EnterIdle()
	{
		AttackCharge = 0;
		SetArmAnimation('Idle');
		Super.EnterIdle();
	}
	
	override void EnterSee()
	{
		AttackCharge = 0;
		SetArmAnimation('Alert');
		Super.EnterSee();
	}
	
	private void SetBowAnimation(int stage)
	{
		if (Bow)	Bow.Frame = stage % Fr_E;
	}
	
	States
	{
	See:
		TNT1 A 1 
		{
			Chase('Melee', null, 0, 30, true);
		}
		Wait;
	Melee:
		TNT1 A 1 NotchBow();
		Wait;
	}
}


Class TM_ArrowProjectile : TM_Projectile	
{
	const _Radius = 0.75;
	const _Height = 0.75;
	const RealScale = 8.0;
	const RealRadius = RealScale * _Radius;
	const RealHeight = RealScale * _Height;
	
	private TM_Monster Owner;
	Default
	{
		Projectile;
		+NOGRAVITY
		+HITTRACER
		
		Radius RealRadius;
		Height RealHeight;
		Scale RealScale;
		Speed 35;
		Gravity 0.8;
	//	Damage 6;
		DamageFunction (random(5, 15));
		
		DamageType "Normal";
		SeeSound "Minecraft/Bow";
		DeathSound "Minecraft/BowHit";
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Owner = TM_Monster(Target);
	}
	
	private void ArrowDeath()
	{
		bKILLED = bNOINTERACTION = true;
		A_Stop();
		A_StartSound(DeathSound, CHAN_BODY, CHANF_OVERLAP);
		
		if (Tracer && Owner && Tracer.bISMONSTER && 
			Tracer.Target == Owner && Target == Owner && Owner.Targetable(Tracer)
				&& !(Tracer is 'PlayerPawn') && Tracer != Target)
		{
			// Aim at the tracer and try to finish them off since we know they're
			// in danger now.
			Target.Target = Tracer;
		}
	}
	
	override void Tick()
	{
		if (bKILLED)	Vel = (0,0,0);
		Super.Tick();
	}
	
	States
	{
	Spawn:
		ASDF AA 1 A_FaceMovementDirection(0,0);
		ASDF A 0 { bNOGRAVITY = false; }
		ASDF A 1 A_FaceMovementDirection(0,0);
		Wait;
	Crash:
	XDeath:
		TNT1 A 35 ArrowDeath();
		Stop;
	Death:
		ASDF A 0 { bKILLED = bNOINTERACTION = true; }
		ASDF A 1 ArrowDeath();
		ASDF A 250;
		ASDF A 1 A_FadeOut(0.05);
		Wait;
	}
}

Class TM_SkeletonStray : TM_Skeleton
{
	Default
	{
		TM_Skeleton.Type S_Stray;
		ActiveSound "Minecraft/Stray/Idle";
		PainSound "Minecraft/Stray/Hurt";
		DeathSound "Minecraft/Stray/Death";
		
		Tag "Stray";
		Obituary "%o was doomed to become one with the cold lost Stray packs.";
	}
}

Class TM_SkeletonWither : TM_Skeleton
{
	const WitherScale = 9.0;
	const _Range = RealRadius + 8;
	Default
	{
		TM_Skeleton.Type S_Wither;
		ActiveSound "Minecraft/WitherSkeleton/Idle";
		PainSound "Minecraft/WitherSkeleton/Hurt";
		DeathSound "Minecraft/WitherSkeleton/Death";
		Health 250;
		Mass 200;
		Scale WitherScale;
		MeleeRange _Range;
		DamageFactor "Slime", 0.0;
		DamageFactor "Wither", 0.0;
		DamageFactor "Fire", 0.0;
		
		Tag "Wither Skeleton";
		Obituary "%o 's flesh withered away by a Wither Skeleton.";
	}
	
	override void SpawnLimbs()
	{
		Super.SpawnLimbs();
		Limb[LegL].StepSound = "Minecraft/WitherSkeleton/Step";
		Limb[LegR].StepSound = "Minecraft/WitherSkeleton/Step";
	}
	
	override bool DropItems(Actor src, Actor inf, Name mod)
	{
	//	InitDrops();
		for (int i = 0; i < 4; i++)
			if (irandom(0,2) == 0)
				Drops.Add('TM_PearlAmmo', irandom(5,10));
				
		int amt = irandom(15, 25);
		if (irandom(0,1) > 0)	Drops.Add('TM_PearlHealth', amt);
		else					Drops.Add('TM_PearlArmor', amt);
		
		return TM_Monster.DropItems(src, inf, mod);
	}
	
	// Don't spawn with armor as these guys are tough.
	override void SpawnArmor()	{}
	
	override void SpawnWeapon()
	{
		int chances[WR_ArmR + 1];
		bool skip = true;
		for (int i = WR_ArmL; i <= WR_ArmR; i++)
		{
			chances[i] = irandom(0,200);
			if (skip && chances[i] > 100)
			{
				skip = false;
				continue;
			}
			int 						frm = WP_Stone;
				 if (chances[i] <= 20)	frm = WP_Netherite;
			else if (chances[i] <= 50)	frm = WP_Diamond;
			else if (Chances[i] <= 100)	frm = WP_Iron;
			
			SetArmor(i, frm);
		}
	}
	
	override void EnterSee()
	{
		Super.EnterSee();
		Speed = Default.Speed * 1.5;
	}
	
	override void EnterIdle()
	{
		Super.EnterIdle();
		Speed = Default.Speed;
	}
	
	override void SetMeleeAnimation()
	{
		if (bKILLED || bDESTROYED)	return;
		for (int i = 0; i < Limb.Size(); i++)
		if ((i == ArmR || i == ArmL) && Limb[i])
		{
			Limb[i].SetAnimation('ZombieMelee');
		}
	}
	
	States
	{
	See:
		---- A 1 
		{
			Chase("Melee", null, _3dmelee: true);
		}
		Wait;
	Melee:
		---- A 1 DoMelee(random[rng](25, 35));
		Goto See;
	}
}

//==============================================================================
// Limbs
//==============================================================================

Class TM_SkeletonArm : TM_BodyPartArm
{
	const BowYaw = -20.0;
	Default
	{
		TM_BodyPart.Gib 'TM_SkeletonArmGib';
		TM_BodyPart.CurAction (E_Swing|E_Sway);
		Radius 0.8;
		Height 2.0;
	}
	
	virtual void BowIn()
	{
		SetYaw(BowYaw);
	}
	
	virtual void BowOut()
	{
		SetYaw(0);
	}
	
	States
	{
	Spawn:
		ASDF A 0;
	Idle:
		---- A -1
		{
			NoAim = true;
			CurAction = (E_Swing|E_Sway);
			SetYaw(0);
			SetPitch(0);
		}
		Wait;
	Alert:
		---- A -1
		{
			if (owner && owner.GetClass() == 'TM_Skeleton')
				NoAim = false;
			CurAction = E_Sway;
			SetPitch(-90);
			BowOut();
		}
		Wait;
	Charging:
		---- A -1
		{
			CurAction = E_Sway;
			SetPitch(-90);
			BowIn();
		}
		Wait;
	ZombieMelee:
		---- A 8 SetPitch(-160, false);
		---- A -1 SetPitch(-90, false);
		Goto Alert;
	}
}

Class TM_SkeletonArmRight : TM_SkeletonArm
{
	Default
	{
		TM_BodyPart.SideID TMS_Right;
		TM_BodyPart.SineOffset 180, 180, 180;
		TM_BodyPart.VelSineOffset 180;
	}
}

Class TM_SkeletonArmLeft : TM_SkeletonArm
{
	Default
	{
		TM_BodyPart.SideID TMS_Left;
	}
	override void BowIn()
	{
		SetYaw(-BowYaw);
	}
}

Class TM_SkeletonBody : TM_BodyPartBody
{
}

Class TM_SkeletonHead : TM_BodyPartHead
{
}

Class TM_SkeletonLeg : TM_BodyPartLeg
{
	Default
	{
		TM_BodyPart.Gib 'TM_SkeletonLegGib';
		TM_BodyPart.StepSound "Minecraft/Skeleton/Step";
		Radius 0.8;
		Height 2.0;
	}
}

Class TM_SkeletonLegRight : TM_SkeletonLeg
{
	Default
	{
		TM_BodyPart.SideID TMS_Right;
	}
}

Class TM_SkeletonLegLeft : TM_SkeletonLeg
{
	Default
	{
		TM_BodyPart.SideID TMS_Left;
		TM_BodyPart.SineOffset 180, 180, 180;
		TM_BodyPart.VelSineOffset 180;
	}
}

Class TM_SkeletonArmGib : TM_BodyPartGib
{	Default	{	TM_BodyPartGib.Offsets 0, 0, -.9;	}	}

Class TM_SkeletonHeadGib : TM_BodyPartGib
{	Default	{	TM_BodyPartGib.Offsets 0, 0, 0.8;	}	}

Class TM_SkeletonLegGib : TM_BodyPartGib
{	Default	{	TM_BodyPartGib.Offsets 0, 0, -1.2;	}	}

Class TM_SkeletonBodyGib : TM_BodyPartGib	{}

//------------------------------------------------------------------------------
// Stray edition. The only difference is the extra coverings and different head.
// These go over the skeleton's positions, and the arms stick out a little more.
//------------------------------------------------------------------------------

Class TM_SkeletonStrayArmRight : TM_BodyPartArm
{
}

Class TM_SkeletonStrayArmLeft : TM_BodyPartArm
{
}

Class TM_SkeletonStrayLeg : TM_BodyPartLeg
{
}

Class TM_SkeletonStrayBody : TM_BodyPartBody
{
}

Class TM_SkeletonStrayHead : TM_BodyPartHead
{
}

Class TM_SkeletonStrayHeadGib : TM_BodyPartGib
{
}

Class TM_SkeletonStrayArmGib : TM_BodyPartGib
{
}

Class TM_SkeletonStrayLegGib : TM_BodyPartGib
{
}