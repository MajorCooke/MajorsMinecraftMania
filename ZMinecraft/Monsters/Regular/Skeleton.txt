/*==============================================================================
Skeleton (Normal)
 
Undead enemy that shoots arrows. Is rather intelligent for having no brain.

Drops ammo (bullet/shell/rocket/cell)

+ Easy to cause infighting
+ No natural resistance
+ Changes target if its arrow hits anyone other than its target
- Tactical: Backs away from enemies too close to it
- Shoots faster the closer targets are
- Can have armor/weapons in higher AI difficulty
==============================================================================*/

/*
--- All ---
Sword:				0.0		-1.0	2.7
Bow:				0.0		-1.0	2.7		Angles	-90	-45	20
Bow (Gib):			0.0		-0.9	2.7		Angles	-90	-45	20

Head:				0.0		0.0		4.8
Arm:				0.0		1.2		4.4
Leg:				0.0		0.4		1.2

(Gib) Body:			0.0		0.0		3.6
Gib Head:			0.0		0.0		5.6
Gib Leg:			0.0		0.4		1.2

--- Skeleton ---

Gib Arm:			0.0		~1.0	3.5

--- Stray ---

Gib Head:			0.0		0.0		5.6
Gib Arm (Cloth):	0.0		~1.2	3.6
Gib Leg Cloth:		0.0		~0.4	1.2

$limit Minecraft/Skeleton/Death 0
$limit Minecraft/Skeleton/Hurt 0
$limit Minecraft/Skeleton/Idle 0
$limit Minecraft/Skeleton/Step 0

$limit Minecraft/Stray/Death 0
$limit Minecraft/Stray/Hurt 0
$limit Minecraft/Stray/Idle 0
$limit Minecraft/Stray/Step 0

$limit Minecraft/WitherSkeleton/Death 0
$limit Minecraft/WitherSkeleton/Hurt 0
$limit Minecraft/WitherSkeleton/Idle 0
$limit Minecraft/WitherSkeleton/Step 0
*/


Class MCSkeleton : MCUndead
{
	const _Radius = 1.6;
	const _Height = 6.4;
	const RealScale = 7.0;
	const RealRadius = RealScale * _Radius;
	const RealHeight = RealScale * _Height;

	mixin NormalLimbCount;

	enum ETypes
	{
		S_Normal = 0,
		S_Stray,
		S_Wither
	};
	
	meta ETypes Type;
	
	Property Type: Type;
	
	Default
	{
		
		MCSkeleton.Type S_Normal;
		Scale RealScale;
		Radius RealRadius;
		Height RealHeight;
		Health 100;
		
		
		MeleeRange 512;
		ActiveSound "Minecraft/Skeleton/Idle";
		PainSound "Minecraft/Skeleton/Hurt";
		DeathSound "Minecraft/Skeleton/Death";
		+NOBLOOD
		
		DamageFactor "Drowning", 0.0;
		
		Tag "Skeleton";
		Obituary "%o was used for target practice by a Skeleton.";
	}
	
	override bool DropItems(Actor src, Actor inf, Name mod)
	{
		if (!Super.DropItems(src, inf, mod))
			return false;
		
		int c[4];
		int end = 2;
		for (int i = 0; i < end; i++)
		{
			if (irandom(1, 4) == 1)	c[0]++;
			if (irandom(1, 4) == 1)	c[1]++;
			if (irandom(1, 4) == 1)	c[2]++;
			if (irandom(1, 4) == 1)	c[3]++;
		}
		
		Event.DropItem(self, 'Shell', c[0]);
		Event.DropItem(self, 'Clip', c[1]);
		Event.DropItem(self, 'RocketAmmo', c[2]);
		Event.DropItem(self, 'Cell', c[3]);
		
		return true;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Init(LimbCount);
		Limb[Head] = MCBodyPart(Spawn('MCSkeletonHead', pos));
		Limb[Body] = MCBodyPart(Spawn('MCSkeletonBody', pos));
		Limb[ArmR] = MCBodyPart(Spawn('MCSkeletonArmRight', pos));
		Limb[ArmL] = MCBodyPart(Spawn('MCSkeletonArmLeft', pos));
		Limb[LegR] = MCBodyPart(Spawn('MCSkeletonLegRight', pos));
		Limb[LegL] = MCBodyPart(Spawn('MCSkeletonLegLeft', pos));
		for (int i = 0; i < Limb.Size(); i++)
		{
			let Lim = Limb[i];
			if (Lim)
			{
				if (i <= Body)	Lim.Master = self;
				else			Lim.Master = Limb[Body];
				Lim.Owner = self;
				Lim.Scale = Scale;
				Lim.Frame = Type;
			}
		}
		
		Limb[Head].SetPosOffsets((0.0,	0.0, 4.8));
		Limb[Body].SetPosOffsets((0.0,  0.0, 3.6));
		Limb[ArmR].SetPosOffsets((0.0,  1.0, 4.4)); //Y is 1.2 for strays.
		Limb[ArmL].SetPosOffsets((0.0, -1.0, 4.4));
		Limb[LegR].SetPosOffsets((0.0,  0.4, 2.4));
		Limb[LegL].SetPosOffsets((0.0, -0.4, 2.4));
		
		int pick = randompick(ArmR, ArmL);
		Limb[pick].SetAttachment('MCBow');
		
		UpdateLimbs();
	}
	
	
	
	void SetArmAnimation(StateLabel Next)
	{
		
		for (int i = 0; i < Limb.Size(); i++)
		if (i == ArmR || i == ArmL)
		{
			State n = Limb[i].ResolveState(Next);
			if (n && Limb[i] && !Limb[i].InStateSequence(Limb[i].CurState,n))
				Limb[i].SetState(n);
		}
		
	}
	
	override void SetMeleeAnimation()	
	{	
		SetArmAnimation('ZombieMelee');
	}
	
	override void AdjustDifficulty()
	{
		Super.AdjustDifficulty();
		
		Switch(MCC_AIDifficulty)
		{
			Case Dif_Easy:		ACDif = 0.0;	break;
			Case Dif_Normal:	ACDif = 0.25;	break;
			Case Dif_Hard:		ACDif = 0.5;	break;
		}
	}
	
	private double AttackCharge, ACDif;
	void NotchBow()
	{
		double dist = 0;
		if (Targetable(Target))
			Dist = Distance3DSquared(Target);
		else AttackCharge = 0;
		
		if (Dist > 0.0 && Dist <= ((MeleeRange + 10) ** 2) && CheckSight(Target, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
		{
			A_Face(Target, 25, 0, 0, 0, FAF_TOP);
			
			double Frac = (1.0 - (Dist / (MeleeRange ** 2)));
			AttackCharge += Max(1.0, 1.0 + Frac) + ACDif;
			
			if (AttackCharge < 30)
				SetArmAnimation('Alert');
			else
				SetArmAnimation('Charging');
				
			if (AttackCharge >= 80)
			{
				AttackCharge = 0;
				FireBow();
			}
			
			// Try to back away from enemies that get too close.
			if (Dist <= (MeleeRange * 0.5) ** 2)
			{
				double _speed = speed;
				bool nofear = bNOFEAR;
				bool afraid = bFRIGHTENED;
				bFRIGHTENED = true;
				bNOFEAR = false;
				speed *= 0.5;
				
				A_Chase(null, null, CHF_NODIRECTIONTURN|CHF_NOPLAYACTIVE);
				
				speed = _speed;
				bNOFEAR = nofear;
				bFRIGHTENED = afraid;
				
			}
		}
		else
		{
			SetState(ResolveState('Chasing'));
		}
	}
	
	void FireBow(double accuracy = 0.5)
	{
		if (!Targetable(Target)) return;
		
		Vector3 APR = (Angle, Pitch, Roll);
		A_Face(Target, 0, 0, 0, 0, FAF_BOTTOM, Target.Height * 0.75);
		Vector3 APR2 = (Angle, Pitch, Roll);
		Turner = new('MC_QuatTurner');
		[Angle, Pitch, Roll] = Turner.GetTurnDouble2(APR2, (FFRandom(-5, 5), -FFRandom(0, 10), 0));
		A_SpawnProjectile('MCArrowProjectile', 32, 0, 0, CMF_AIMDIRECTION|CMF_ABSOLUTEPITCH, pitch);
		Angle = APR.X;
		Pitch = APR.Y;
		Roll = APR.Z;
	}
	
	States
	{
	Spawn:
		TNT1 AA 35;
		Goto IdleMove;
	Idle:
		TNT1 A 0 
		{
			SetArmAnimation('Spawn');
			AttackCharge = 0;
			UpdateLimbs();
			return A_Jump(256, IRandom(1, 4));
		}
	Idle2:
		TNT1 AAAAAAAAAA 17 Look();
	IdleMove:
		TNT1 A 0 
		{
			LookTimer = 0;
			return A_Jump(256, IRandom(1, 35*2));
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		Goto Idle;
	See:
		TNT1 A 0 SetArmAnimation('Alert');
	Chasing:
		TNT1 A 1 
		{
			Chase('Melee', null, 0, 30, true);
		}
		Wait;
	Melee:
		TNT1 A 1 NotchBow();
		Wait;
	}
}


Class MCArrowProjectile : MinecraftProjectile	
{
	const _Radius = 0.75;
	const _Height = 0.75;
	const RealScale = 8.0;
	const RealRadius = RealScale * _Radius;
	const RealHeight = RealScale * _Height;
	
	private MinecraftMonster Owner;
	Default
	{
		Projectile;
		-NOGRAVITY
		+HITTRACER
		
		Radius RealRadius;
		Height RealHeight;
		Scale RealScale;
		Speed 35;
		Gravity 0.8;
	//	Damage 6;
		DamageFunction (random(5, 15));
		
		DamageType "Normal";
		SeeSound "Minecraft/Bow";
		DeathSound "Minecraft/BowHit";
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Owner = MinecraftMonster(Target);
	}
	
	private void ArrowDeath()
	{
		bKILLED = bNOINTERACTION = true;
		A_Stop();
		A_StartSound(DeathSound, CHAN_BODY, CHANF_OVERLAP);
		
		if (Tracer && Owner && Tracer.bISMONSTER && 
			Tracer.Target == Owner && Target == Owner && Owner.Targetable(Tracer)
				&& !(Tracer is 'PlayerPawn') && Tracer != Target)
		{
			// Aim at the tracer and try to finish them off since we know they're
			// in danger now.
			Target.Target = Tracer;
		}
	}
	
	override void Tick()
	{
		if (bKILLED)	Vel = (0,0,0);
		Super.Tick();
	}
	
	States
	{
	Spawn:
		ASDF A 1 A_FaceMovementDirection(0,0);
		Wait;
	Crash:
	XDeath:
		TNT1 A 35 ArrowDeath();
		Stop;
	Death:
		ASDF A 0 { bKILLED = bNOINTERACTION = true; }
		ASDF A 1 ArrowDeath();
		ASDF A 250;
		ASDF A 1 A_FadeOut(0.05);
		Wait;
	}
}

Class MCStraySkeleton : MCSkeleton
{
	Default
	{
		MCSkeleton.Type S_Stray;
		ActiveSound "Minecraft/Stray/Idle";
		PainSound "Minecraft/Stray/Hurt";
		DeathSound "Minecraft/Stray/Death";
		
		Tag "Stray";
		Obituary "%o was doomed to become one with the cold lost Stray packs.";
	}
}

Class MCWitherSkeleton : MCSkeleton
{
	const WitherScale = 9.0;
	Default
	{
		MCSkeleton.Type S_Wither;
		ActiveSound "Minecraft/WitherSkeleton/Idle";
		PainSound "Minecraft/WitherSkeleton/Hurt";
		DeathSound "Minecraft/WitherSkeleton/Death";
		Scale WitherScale;
		
		DamageFactor "Slime", 0.0;
		DamageFactor "Wither", 0.0;
		DamageFactor "Fire", 0.0;
		
		Tag "Wither Skeleton";
		Obituary "%o 's flesh withered away thanks to a Wither Skeleton.";
	}
}

//==============================================================================
// Limbs
//==============================================================================

Class MCSkeletonArm : MCBodyPartArm
{
	const BowYaw = 20.0;
	Default
	{
		MCBodyPart.Gib 'MCSkeletonArmGib';
		MCBodyPart.CurAction (E_Swing|E_Sway);
		Radius 0.8;
		Height 2.0;
	}
	
	virtual void BowIn()
	{
		SetYaw(BowYaw);
	}
	
	virtual void BowOut()
	{
		SetYaw(0);
	}
	
	States
	{
	Spawn:
		ASDF A -1 NoDelay
		{
			CurAction = (E_Swing|E_Sway);
			SetYaw(0);
			SetPitch(0);
		}
		Wait;
	Alert:
		---- A -1
		{
			CurAction = E_Sway;
			SetPitch(-90);
			BowOut();
		}
		Wait;
	Charging:
		---- A -1
		{
			CurAction = E_Sway;
			SetPitch(-90);
			BowIn();
		}
		Wait;
	ZombieMelee:
		---- A 8 SetPitch(-160, false);
		---- A -1 SetPitch(-90, false);
	}
}

Class MCSkeletonArmRight : MCSkeletonArm
{
	Default
	{
		MCBodyPart.SineOffset 180, 180, 180;
		MCBodyPart.VelSineOffset 180;
	}
}

Class MCSkeletonArmLeft : MCSkeletonArm
{
	override void BowIn()
	{
		SetYaw(-BowYaw);
	}
}

Class MCSkeletonBody : MCBodyPartBody
{
}

Class MCSkeletonHead : MCBodyPartHead
{
}

Class MCSkeletonLeg : MCBodyPartLeg
{
	Default
	{
		MCBodyPart.Gib 'MCSkeletonLegGib';
		MCBodyPart.StepSound "Minecraft/Skeleton/Step";
		Radius 0.8;
		Height 2.0;
	}
}

Class MCSkeletonLegRight : MCSkeletonLeg
{
}

Class MCSkeletonLegLeft : MCSkeletonLeg
{
	Default
	{
		MCBodyPart.SineOffset 180, 180, 180;
		MCBodyPart.VelSineOffset 180;
	}
}

Class MCSkeletonArmGib : MCBodyPartGib
{
}

Class MCSkeletonHeadGib : MCBodyPartGib
{
}

Class MCSkeletonLegGib : MCBodyPartGib
{
}

Class MCSkeletonBodyGib : MCBodyPartGib
{
}

//------------------------------------------------------------------------------
// Stray edition. The only difference is the extra coverings and different head.
// These go over the skeleton's positions, and the arms stick out a little more.
//------------------------------------------------------------------------------

Class MCSkeletonStrayArmRight : MCBodyPartArm
{
}

Class MCSkeletonStrayArmLeft : MCBodyPartArm
{
}

Class MCSkeletonStrayLeg : MCBodyPartLeg
{
}

Class MCSkeletonStrayBody : MCBodyPartBody
{
}

Class MCSkeletonStrayHead : MCBodyPartHead
{
}

Class MCSkeletonStrayHeadGib : MCBodyPartGib
{
}

Class MCSkeletonStrayArmGib : MCBodyPartGib
{
}

Class MCSkeletonStrayLegGib : MCBodyPartGib
{
}