/*==============================================================================
Spider (Normal)
 
Arthropod enemy that can leap at targets and can climb ledges (NYI)

Drops backpacks, health/armor bonuses

+ Wide hit box, make it susceptible to shotguns
+ Easy to lose in narrow corridors due to width
- Leaps at foes very quickly, jumps high
- No collision with monsters (Makes rockets very dangerous to use)
- (NYI) Climbs ledges
- (NYI) Can spawn with jockeys

NYI = Not Yet Implemented
==============================================================================*/

/*
Minecraft/Spider/Death
Minecraft/Spider/Idle
Minecraft/Spider/Step

-Legend-	X		Y		Z		Roll	Pitch	Angle
Back:		-0.6	0.0		2.0	
Head:		0.6		0.0		2.0			
Leg:		0.0		~.8		1.9		0.0		35		(Starts at 30, +40 each)

- Gibs -
Back:		-1.8	0.0		2.0		
Head:		1.4		0.0		2.0
Leg:		0.0		~2.2	1.9

- Both -
Thorax:		0.0		0.0		2.0

Frames
	A: Normal Spider
	B: Cave Spider

*/

	
		
Class TM_Spider : TM_Arthropod
{
//	const _Radius = 1.6 + 1.2 + 2.4;
	const _Radius = 2.4;
	const _Height = 2.0;
	const RealScale = 9.0;
	const RealRadius = RealScale * _Radius;
	const RealHeight = RealScale * _Height;
	const _MeleeRange = RealRadius + 8;
	enum ELimbs
	{
		Head = 0,
		Back,
		Thorax,
		LegL1,
		LegL2,
		LegL3,
		LegL4,
		LegR1,
		LegR2,
		LegR3,
		LegR4,
		LimbCount
	};
	enum EType
	{
		S_Normal = 0,
		S_Cave
	};
	
	double LeapRange;
	int Type;
	
	Property Type: Type;
	Property LeapRange: LeapRange;
	
	Default
	{
		Health 100;
		TM_Monster.StepSound "Minecraft/Spider/Step", 20;
		TM_Spider.LeapRange _MeleeRange * 2;
		TM_Spider.Type S_Normal;
		Radius RealRadius;
		Height RealHeight;
		Scale RealScale;
		ActiveSound "Minecraft/Spider/Idle";
		PainSound "Minecraft/Spider/Idle";
		DeathSound "Minecraft/Spider/Death";
		Tag "Spider";
		Obituary "%o's became a living host for spider breeding.";
		
		MeleeRange _MeleeRange;
		MaxTargetRange 768;
		Speed 6;
	}
	
	override bool DropItems(Actor src, Actor inf, Name mod)
	{
		int rng = irandom(0,2);
		
		Switch(rng)
		{
			Case 0: Drops.Add('TM_PearlAmmo', irandom(10,20));	break;
			Case 1: Drops.Add('TM_PearlHealth', irandom(10,20));	break;
			Case 2: Drops.Add('TM_PearlArmor', irandom(10,20));	break;
		}
		return Super.DropItems(src, inf, mod);
			
		/*
		int end = 5;
		int c[2];
		bool bp = false;
		for (int i = 0; i < end; i++)
		{
			int rng = irandom(0,10);
			if (rng == 0 && !bp)		
			{
				bp = true;
				Event.DropItem(self, 'Backpack');
			}
			else if (rng <= 5)	c[0]++;
			else				c[1]++;
		}
		Event.DropItem(self, 'TM_Health', c[0]);
		Event.DropItem(self, 'TM_Armor', c[1]);
		return true;
		*/
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Init(LimbCount);
		Limb[Head] = 	TM_BodyPart(Spawn('TM_SpiderHead', pos));
		Limb[Back] = 	TM_BodyPart(Spawn('TM_SpiderBack', pos));
		Limb[Thorax] =	TM_BodyPart(Spawn('TM_SpiderThorax', pos));
		Limb[LegL1] =	TM_BodyPart(Spawn('TM_SpiderLeg', pos));
		Limb[LegL2] =	TM_BodyPart(Spawn('TM_SpiderLeg', pos));
		Limb[LegL3] =	TM_BodyPart(Spawn('TM_SpiderLeg', pos));
		Limb[LegL4] =	TM_BodyPart(Spawn('TM_SpiderLeg', pos));
		Limb[LegR1] =	TM_BodyPart(Spawn('TM_SpiderLeg', pos));
		Limb[LegR2] =	TM_BodyPart(Spawn('TM_SpiderLeg', pos));
		Limb[LegR3] =	TM_BodyPart(Spawn('TM_SpiderLeg', pos));
		Limb[LegR4] =	TM_BodyPart(Spawn('TM_SpiderLeg', pos));
		for (int i = 0; i < Limb.Size(); i++)
		{
			if (Limb[i])
			{
				Limb[i].Master = self;
				Limb[i].Owner = self;
				Limb[i].Scale = Scale;
				Limb[i].Frame = Type;
			}
		}
		
		Limb[Head].SetPosOffsets((		 0.6,	 0.0, 2.0));
		Limb[Back].SetPosOffsets((		-0.6,	 0.0, 2.0));
		Limb[Thorax].SetPosOffsets((	 0.0,	 0.0, 2.0));
		
		Limb[LegL1].SetPosOffsets((		 0.0,	-0.8, 1.9));
		Limb[LegL2].SetPosOffsets((		 0.0, 	-0.8, 1.9));
		Limb[LegL3].SetPosOffsets((		 0.0,	-0.8, 1.9));
		Limb[LegL4].SetPosOffsets((		 0.0,	-0.8, 1.9));
		Limb[LegR1].SetPosOffsets((		 0.0,	 0.8, 1.9));
		Limb[LegR2].SetPosOffsets((		 0.0,  	 0.8, 1.9));
		Limb[LegR3].SetPosOffsets((		 0.0, 	 0.8, 1.9));
		Limb[LegR4].SetPosOffsets((		 0.0, 	 0.8, 1.9));
		
		
		Limb[LegL2].SetSineOffset((180,0,0));		
		Limb[LegL4].SetSineOffset((180,0,0));
		Limb[LegR1].SetSineOffset((180,0,0));
		Limb[LegR3].SetSineOffset((180,0,0));
		
		
		int t = 0;
		for (int i = LegL1; i < LegL1 + 4; i++)
		{
		//	Limb[i  ].SetRelOffsets((0, -.8, 1.9));
		//	Limb[i+4].SetRelOffsets((0, 0.8, 1.9));
			Limb[i  ].SetPersistantAPROffset(( 30 + (t * 30), 35, 0));
			Limb[i+4].SetPersistantAPROffset((-30 - (t * 30), 35, 0));
			t++;
		}
		
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (other && other.bMISSILE)
			return true;
		if (!other || (other.bSOLID && !other.bACTLIKEBRIDGE))
			return false;
		return true;
	}
	
	override void DamageReact(Actor inf, Actor src, int damage, int dmg, Name mod, int flags, double angle, bool secdmg)
	{
		Super.DamageReact(inf, src, damage, dmg, mod, flags, angle, secdmg);
		
		if (!secdmg && !(flags & DMG_THRUSTLESS) && LeapTimer < Second)
		{
			LeapTimer = Second;
		}
	}
	
	private int LeapTimer;
	
	override void Tick()
	{
		Super.Tick();
		
		if (bKILLED || IsFrozen())
			return;
			
		if (LeapTimer > 0)	LeapTimer--;
	}
	
	States
	{
	See:
		TNT1 A 1
		{
			if (LeapTimer < 1 &&
				CheckTrace(Target, LeapRange) && Target != Goal &&
				Target.Pos.Z + Target.Height >= Pos.Z && 
				Target.Pos.Z <= Pos.Z + 32 &&
				OnGround)
			{
				LeapTimer = Second;
				if (TMV_Debug == 8)
					Console.Printf("%.1f", VelPosLen);
				Vel3DFromAngle(VelPosLen + 4, angle, 0);
				Vel.Z += 8.0;
				OnGround = false;
			}
			Chase(_3dmelee: true);
		}
		Wait;
	Melee:
		TNT1 A 1 DoMelee(irandom(20, 25));
		Goto See;
	}
}

Class TM_SpiderCave : TM_Spider
{
	Default
	{
		TM_Monster.OverScale 0.5;
		TM_Spider.Type S_Cave;
		Tag "Cave Spider";
		Obituary "%o couldn't fight off the swarming Cave Spiders.";
	}
}

//------------------------------------------------------------------------------
// Body parts
Class TM_SpiderBack : TM_BodyPart {}
Class TM_SpiderHead : TM_BodyPartHead {}
Class TM_SpiderThorax : TM_BodyPart	{}

Class TM_SpiderLeg : TM_BodyPartLeg	
{
	Default
	{
		TM_BodyPart.SwingAngleCap 20;
		TM_BodyPart.SwingAmp SineWavePerSecond * 2.0;
		TM_BodyPart.SwingAngleDir 1, 1, 0;
	}
	
	override void DoMotionAdjustments()
	{
		Super.DoMotionAdjustments();
		if (AngOff.Y < 35)	AngOff.Y = 35;
	}
}

//------------------------------------------------------------------------------
// Gibs
// In this case, the legs were actually exported pointing straight ahead instead
// of down, unlike zombie/skeleton limbs.
Class TM_SpiderThoraxGib : TM_BodyPartGib	
{
}
Class TM_SpiderBackGib : TM_BodyPartGib 
{
	Default
	{
		TM_BodyPartGib.Offsets -1.2, 0, 0;
	}
}
Class TM_SpiderHeadGib : TM_BodyPartGib 
{
	Default
	{
		TM_BodyPartGib.Offsets 0.8, 0, 0;
	}
}
Class TM_SpiderLegGib : TM_BodyPartGib 
{
	Default
	{
		TM_BodyPartGib.EndPitch 0;
		TM_BodyPartGib.Offsets 1.4, 0, 0;
	}
}