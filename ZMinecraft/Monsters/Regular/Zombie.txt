/*==============================================================================
Zombie

Undead monsters that are surprisingly aware at knowing what to avoid... mostly.
A common enemy that can spawn in packs.

+ Slow, lumbering
- Rotten flesh reduces damage slightly
- Can call other zombies to fight with it, which can make more spawn.
- Can have armor/weapons in higher AI difficulty
//============================================================================*/

/*

Minecraft/Zombie/Death
Minecraft/Zombie/Idle
Minecraft/Zombie/Pain
Minecraft/Zombie/Step

Head:		0.0,	0.0, 	4.8
(Gib) Body:	0.0,	0.0,	3.6
Arms:		0.0,	+-1.2,	4.4
Legs:		0.0,	+-0.4,	2.4

Gib Head: 	0.0,	0.0,	5.6
Gib Arms: 	0.0,	+-1.2,	3.6
Gib Leg:	0.0,	+-0.4,	1.2
*/

Class TM_Zombie : TM_Undead
{
	enum EAction
	{
		E_Idle,
		E_Wander,
		E_Chase
	};
	
	const _Radius = 1.6;
	const _Height = 6.4;
	const RealScale = 7.0;
	const RealRadius = RealScale * _Radius;
	const RealHeight = RealScale * _Height;
	const _Speed = 4.0;
	const BabySpeed = _Speed * 1.4;
	
	private int CurrentAction;
	
	mixin NormalLimbCount;

	Default
	{
		TM_Monster.CanArmor true;
		TM_Monster.Passive false;
		Scale RealScale;
		Radius RealRadius;
		Height RealHeight;
		Health 100;
		Speed _Speed;
		MeleeRange RealRadius + 8;
		TM_Monster.MaxSightRange 768; //In Minecraft it's 40 blocks (each block is 16). Here it's shorter.
		
		ActiveSound "Minecraft/Zombie/Idle";
		PainSound "Minecraft/Zombie/Pain";
		DeathSound "Minecraft/Zombie/Death";
		
		DamageFactor "Normal", 0.92;
		
		BloodColor "Black";
		
		Tag "Zombie";
		Obituary "%o joined the 'breeeyynns' club, courtesy of a zombie's invitation.";
	}
	
	override bool DropItems(Actor src, Actor inf, Name mod)
	{
		int rng = irandom(5, 15);
		
		Drops.Add('TM_PearlHealth', rng);
		Drops.Add('TM_PearlArmor', rng);
		
		return Super.DropItems(src, inf, mod);
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		Init(LimbCount);
		if (Baby)	Limb[Head] = TM_BodyPart(Spawn('TM_ZombieHeadBaby', pos));
		else		Limb[Head] = TM_BodyPart(Spawn('TM_ZombieHead', pos));
		Limb[Body] = TM_BodyPart(Spawn('TM_ZombieBody', pos));
		Limb[ArmR] = TM_BodyPart(Spawn('TM_ZombieArmRight', pos));
		Limb[ArmL] = TM_BodyPart(Spawn('TM_ZombieArmLeft', pos));
		Limb[LegR] = TM_BodyPart(Spawn('TM_ZombieLegRight', pos));
		Limb[LegL] = TM_BodyPart(Spawn('TM_ZombieLegLeft', pos));
		for (int i = 0; i < Limb.Size(); i++)
		{
			let Lim = Limb[i];
			if (Lim)
			{
				if (i <= Body)		Lim.Master = self;
				else				Lim.Master = Limb[Body];
				Lim.Owner = self;
				Lim.Scale = Scale;
			}
		}
		
		Limb[Head].SetPosOffsets((0.0,	0.0, 4.8));
		Limb[Body].SetPosOffsets((0.0,  0.0, 3.6));
		Limb[ArmR].SetPosOffsets((0.0,  1.2, 4.4));
		Limb[ArmL].SetPosOffsets((0.0, -1.2, 4.4));
		Limb[LegR].SetPosOffsets((0.0,  0.4, 2.4));
		Limb[LegL].SetPosOffsets((0.0, -0.4, 2.4));
		
		if (Baby)
		{
			Limb[LegR].StepVolume = 0.45;
			Limb[LegL].StepVolume = 0.45;
		}
		
		Limb[ArmR].SetPitch(-90);
		Limb[ArmL].SetPitch(-90);
		
		SpawnArmor();
		SpawnWeapon();
	}
	
	
	
	override void AdjustDifficulty()
	{
		Super.AdjustDifficulty();
		
		double mul = 1.0;
		Switch(TMV_AIDifficulty)
		{
			Case Dif_Easy:		mul = 1.0;	break;
			Case Dif_Normal:	mul = 1.15;	break;
			Case Dif_Hard:		mul = 1.3;	break;
		}
		
		Speed = Default.Speed * mul;
	}
	
	override void SetMeleeAnimation()
	{
		if (bKILLED || bDESTROYED)	return;
		for (int i = 0; i < Limb.Size(); i++)
		if ((i == ArmR || i == ArmL) && Limb[i])
		{
			Limb[i].SetAnimation('ZombieMelee');
		}
	}
	
	// When taking sector damage, try to get out of the sector by fleeing
	// towards the nearest mass of land, if without a target.
	// Otherwise if there is a target, 
	override void DamageReact(Actor inf, Actor src, int damage, int dmg, Name mod, int flags, double angle)
	{
		if (health < 1 || dmg < 1)	return;
		Super.DamageReact(inf, src, damage, dmg, mod, flags, angle);
		
		if (src && src.health > 1 && Targetable(src))
		{
			RemoveGoal();
			bool plr = (src is 'PlayerPawn');
			//int flags = (plr) ? AM_NOPARENT : AM_FORCE|AM_NOPARENT;
			int flags = 0;
			if (!plr || IRandom(1,5) == 1)
				AlertMonsters(MaxTargetRange * 2, target, GetClass(), random[rng](1,5), flags);
		}
		/*
		else if (CurSector.DamageAmount > 0 && !Goal & !ValidateTarget())
		{
			int ang = random(0,359);
		
			for (double i = 0; i < 360; i += 15)
			{
				for (double j = 0; j < 1024; j += radius)
				{
					Vector3 p = pos + Vec3Angle(j, ang + i);
					Sector s = Level.PointInSector(p.xy);
					p.z = floorplane.ZatPoint(p.xy);
					if (!level.IsPointInLevel(p) || 
						s.DamageAmount > 0 ||
						!CheckPosition(p))	continue;
					
					SetGoal(p);
					return;
				}
			}
		}
		*/
	}
	States
	{
	See:
		TNT1 A 1 Chase(_3dmelee: true);
		Wait;
	Melee:
		TNT1 A 1 DoMelee(random[rng](15, 25));
		Goto See;
	}
}

//==============================================================================
// Baby Zombie
// 
// Smaller, agile and dangerous variants of zombies.
//
// The following is in addition to regular zombie strengths/weaknesses.
// + More vulnerable to explosions, lava & Slime
// - Much smaller, harder to hit with bullet weaponry
//==============================================================================

Class TM_ZombieBaby : TM_Zombie
{
	Default
	{
		TM_Monster.Baby true;
		TM_Monster.OverScale 0.5;
		ActiveSound "Minecraft/ZombieBaby/Idle";
		PainSound "Minecraft/ZombieBaby/Pain";
		DeathSound "Minecraft/ZombieBaby/Death";
		Tag "Baby Zombie";
		Speed BabySpeed; // 50% faster.
		
		// Much less to melt.
		DamageFactor "Fire", 2.0;
		DamageFactor "Slime", 2.0;
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (flags & DMG_EXPLOSION)
			damage *= 2;
			
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	// Given their quick speed and small size, they don't spawn with armor or
	// weapons. In addition, the armor offsetting and positions is kinda broken
	// on them anyway.
	override void SpawnWeapon() {}
	override void SpawnArmor() {}
}

//------------------------------------------------------------------------------
// Husks
// 
// 
// 
// - Stronger
// + Slower
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Drowned
// 
// - Can swim
// - Can wield a trident
// - Doesn't burn in daylight
// - Immune to drowning
//------------------------------------------------------------------------------


//==============================================================================
//==============================================================================
// Limbs
//==============================================================================
//==============================================================================


Class TM_ZombieHead : TM_BodyPartHead	{}
Class TM_ZombieHeadBaby : TM_ZombieHead	{}

Class TM_ZombieBody : TM_BodyPartBody
{
}

Class TM_ZombieLegRight : TM_BodyPartLeg
{
	Default
	{
		Radius 0.8;
		Height 2.0;
		TM_BodyPart.SideID TMS_Right;
		TM_BodyPart.StepSound "Minecraft/Zombie/Step";
	}
	
}

Class TM_ZombieLegLeft : TM_ZombieLegRight
{
	Default
	{
		TM_BodyPart.SideID TMS_Left;
		TM_BodyPart.VelSineOffset 180;
	}
}

Class TM_ZombieArmRight : TM_BodyPartArm
{
	Default
	{
		TM_BodyPart.SideID TMS_Right;
		Radius 0.8;
		Height 2.0;
	}
}

Class TM_ZombieArmLeft : TM_ZombieArmRight
{
	Default
	{
		TM_BodyPart.SideID TMS_Left;
		TM_BodyPart.SineOffset 180, 180, 180;
	}
}

//------------------------------------------------------------------------------
// Gibs
//------------------------------------------------------------------------------

Class TM_ZombieHeadGib : TM_BodyPartGib
{	Default	{	TM_BodyPartGib.Offsets 0, 0, 0.8;	}	}

Class TM_ZombieHeadBabyGib : TM_ZombieHeadGib	{}

Class TM_ZombieArmRightGib : TM_BodyPartGib
{	Default	{	TM_BodyPartGib.Offsets 0, 0, -.8;	}	}

Class TM_ZombieArmLeftGib : TM_BodyPartGib	
{	Default	{	TM_BodyPartGib.Offsets 0, 0, -.8;	}	}

Class TM_ZombieLegRightGib : TM_BodyPartGib
{	Default	{	TM_BodyPartGib.Offsets 0, 0, -1.2;	}	}
Class TM_ZombieLegLeftGib : TM_BodyPartGib
{	Default	{	TM_BodyPartGib.Offsets 0, 0, -1.2;	}	}

Class TM_ZombieBodyGib : TM_BodyPartGib	{}

/*
Class TM_ZombieArmRightGib : TM_BodyPartGib
{
	Default	{	TM_BodyPartGib.Offsets 0,  1.2, 3.6;	}
}

Class TM_ZombieArmLeftGib : TM_BodyPartGib
{
	Default	{	TM_BodyPartGib.Offsets 0, -1.2, 3.6;	}
}

Class TM_ZombieLegRightGib : TM_BodyPartGib
{
	Default	{	TM_BodyPartGib.Offsets 0,  0.4, 1.2;	}
}
Class TM_ZombieLegLeftGib : TM_BodyPartGib
{
	Default	{	TM_BodyPartGib.Offsets 0, -0.4, 1.2;		}
}

Class TM_ZombieBodyGib : TM_BodyPartGib
{
	Default	{	TM_BodyPartGib.Offsets 0, 0, 3.6;	}
}
*/

