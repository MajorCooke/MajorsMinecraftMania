/*==============================================================================
Zombie

Undead monsters that are surprisingly aware at knowing what to avoid... mostly.
A common enemy that can spawn in packs.

+ Slow, lumbering
- Rotten flesh reduces damage slightly
- Can call other zombies to fight with it, which can make more spawn.
- Can have armor/weapons in higher AI difficulty
//============================================================================*/

/*

Minecraft/Zombie/Death
Minecraft/Zombie/Idle
Minecraft/Zombie/Pain
Minecraft/Zombie/Step

Head:		0.0,	0.0, 	4.8
(Gib) Body:	0.0,	0.0,	3.6
Arms:		0.0,	+-1.2,	4.4
Legs:		0.0,	+-0.4,	2.4

Gib Head: 	0.0,	0.0,	5.6
Gib Arms: 	0.0,	+-1.2,	3.6
Gib Leg:	0.0,	+-0.4,	1.2
*/

extend class MinecraftMonster
{
	enum EAMFlags
	{
		AM_NOPARENT =		1,
		AM_FORCE =			1 << 1,
		AM_FORCEONLYPLR =	1 << 2,
		
	//	AM_EXCLUDE =	1 << 1,
	};

	virtual void AlertMonsters(double dist, Actor targ = null, Class<Actor> filter = null, int limit = 0, int flags = 0)
	{
		if (dist <= 0.0)	dist = MaxChaseRange;
		if (!targ)
		{
			if (Target)	targ = Target;
			else		return;
		}
		
		if (targ is GetClass())	return;
		
		if (targ.bKILLED || !targ.bSHOOTABLE ||
			targ.bNEVERTARGET || (!bFRIENDLY && targ.bNOTARGET))
			return;
		
		let it = BlockThingsIterator.Create(self, dist);
		Actor mo = null;
		int count = limit;
		while (it.Next())
		{
			mo = it.thing;
			if (!mo || mo.bKILLED)	continue;
			
			if (filter)
			{
				if (((flags & AM_NOPARENT) && mo.GetClass() != filter) ||
					(!(flags & AM_NOPARENT) && !(mo is filter)))
				{
					if (MCC_Debug == 1)
					{
						Name cls = mo.GetClassName();
						name fil = filter.GetClassName();
						Console.Printf("%s doesn't fit filter %s, skipping", cls, fil);
					}
					continue;
				}
			}
			
			bool change = ((flags & AM_FORCE) || !mo.Target || mo.Target is 'PlayerPawn' || 
							mo.Target.Health < 1);
			if (!change)	continue;
			
			mo.bAMBUSH = true;
			mo.CopyFriendliness(self, change, false);
			
			let mon = MinecraftMonster(mo);
			if (mon)	
			{
				mon.Tracer = mo.Target;
				mon.SetActorRelation(Tracer, Rel_Hated);
			}
			if (count > 0 && --count < 1)
				return;
			
		}
	}
}

//==============================================================================
// Baby Zombie
// 
// Smaller, agile and dangerous variants of zombies.
//
// The following is in addition to regular zombie strengths/weaknesses.
// + More vulnerable to explosions, lava & Slime
// - Much smaller, harder to hit with bullet weaponry
//==============================================================================

Class MCZombieBaby : MCZombie
{
	Default
	{
		MinecraftMonster.OverScale 0.5;
		ActiveSound "Minecraft/ZombieBaby/Idle";
		PainSound "Minecraft/ZombieBaby/Pain";
		DeathSound "Minecraft/ZombieBaby/Death";
		Tag "Baby Zombie";
		Speed BabySpeed; // 50% faster.
		
		// Much less to melt.
		DamageFactor "Fire", 2.0;
		DamageFactor "Slime", 2.0;
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (flags & DMG_EXPLOSION)
			damage *= 2;
			
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
}

Class MCZombie : MCUndead
{
	enum EAction
	{
		E_Idle,
		E_Wander,
		E_Chase
	};
	
	const _Radius = 1.6;
	const _Height = 6.4;
	const RealScale = 7.0;
	const RealRadius = RealScale * _Radius;
	const RealHeight = RealScale * _Height;
	const _Speed = 4.0;
	const BabySpeed = _Speed * 1.5;
	
	private int CurrentAction;
	
	mixin NormalLimbCount;

	Default
	{
		
		MinecraftMonster.PeacefulDespawn false; // Remove once testing is complete.
		MinecraftMonster.Passive false;
		Scale RealScale;
		Radius RealRadius;
		Height RealHeight;
		Health 100;
		Speed _Speed;
		MeleeRange RealRadius + 8;
		MinecraftMonster.MaxSightRange 768; //In Minecraft it's 40 blocks (each block is 16). Here it's shorter.
		
		ActiveSound "Minecraft/Zombie/Idle";
		PainSound "Minecraft/Zombie/Pain";
		DeathSound "Minecraft/Zombie/Death";
	//	MinecraftMonster.StepSound "Minecraft/Zombie/Step";
		
		DamageFactor "Normal", 0.92;
		
		BloodColor "Black";
		
		Tag "Zombie";
		Obituary "%o joined the 'breeeyynns' club, courtesy of a zombie's invitation.";
	}
	
	override bool DropItems(Actor src, Actor inf, Name mod)
	{
		if (!Super.DropItems(src, inf, mod))
			return false;
		
		int ch = 0, end = 10;
		for (int i = 0; i < end; i++)
		{
			if (irandom(1, 3) == 1)
				ch++;
		}
		Event.DropItem(self, 'HealthBonus', ch);
		Event.DropItem(self, 'ArmorBonus', ch);
		return true;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Init(LimbCount);
		bool baby = (self is 'MCZombieBaby');
		if (baby)	Limb[Head] = MCBodyPart(Spawn('MCZombieHeadBaby', pos));
		else		Limb[Head] = MCBodyPart(Spawn('MCZombieHead', pos));
		Limb[Body] = MCBodyPart(Spawn('MCZombieBody', pos));
		Limb[ArmR] = MCBodyPart(Spawn('MCZombieArmRight', pos));
		Limb[ArmL] = MCBodyPart(Spawn('MCZombieArmLeft', pos));
		Limb[LegR] = MCBodyPart(Spawn('MCZombieLegRight', pos));
		Limb[LegL] = MCBodyPart(Spawn('MCZombieLegLeft', pos));
		for (int i = 0; i < Limb.Size(); i++)
		{
			let Lim = Limb[i];
			if (Lim)
			{
				if (i <= Body)		Lim.Master = self;
				else				Lim.Master = Limb[Body];
				Lim.Owner = self;
				Lim.Scale = Scale;
			}
		}
		
		Limb[Head].SetPosOffsets((0.0,	0.0, 4.8));
		Limb[Body].SetPosOffsets((0.0,  0.0, 3.6));
		Limb[ArmR].SetPosOffsets((0.0,  1.2, 4.4));
		Limb[ArmL].SetPosOffsets((0.0, -1.2, 4.4));
		Limb[LegR].SetPosOffsets((0.0,  0.4, 2.4));
		Limb[LegL].SetPosOffsets((0.0, -0.4, 2.4));
		
		if (baby)
		{
			Limb[LegR].StepVolume = 0.45;
			Limb[LegL].StepVolume = 0.45;
		}
		
		Limb[ArmR].SetPitch(-90);
		Limb[ArmL].SetPitch(-90);
		UpdateLimbs();
	}
	
	override void AdjustDifficulty()
	{
		Super.AdjustDifficulty();
		
		double mul = 1.0;
		Switch(MCC_AIDifficulty)
		{
			Case Dif_Easy:		mul = 1.0;	break;
			Case Dif_Normal:	mul = 1.15;	break;
			Case Dif_Hard:		mul = 1.3;	break;
		}
		
		Speed = Default.Speed * mul;
	}
	
	override void SetMeleeAnimation()
	{
		if (bKILLED || bDESTROYED)	return;
		for (int i = 0; i < Limb.Size(); i++)
		if ((i == ArmR || i == ArmL) && Limb[i])
		{
			Limb[i].SetAnimation('ZombieMelee');
		}
	}
	
	// When taking sector damage, try to get out of the sector by fleeing
	// towards the nearest mass of land, if without a target.
	// Otherwise if there is a target, 
	override void DamageReact(Actor inf, Actor src, int damage, int dmg, Name mod, int flags, double angle)
	{
		if (health < 1 || dmg < 1)	return;
		Super.DamageReact(inf, src, damage, dmg, mod, flags, angle);
		
		if (src && src.health > 1 && Targetable(src))
		{
			RemoveGoal();
			bool plr = (src is 'PlayerPawn');
			//int flags = (plr) ? AM_NOPARENT : AM_FORCE|AM_NOPARENT;
			int flags = 0;
			if (!plr || IRandom(1,5) == 1)
				AlertMonsters(MaxTargetRange * 2, target, GetClass(), random[rng](1,5), flags);
		}
		/*
		else if (CurSector.DamageAmount > 0 && !Goal & !ValidateTarget())
		{
			int ang = random(0,359);
		
			for (double i = 0; i < 360; i += 15)
			{
				for (double j = 0; j < 1024; j += radius)
				{
					Vector3 p = pos + Vec3Angle(j, ang + i);
					Sector s = Level.PointInSector(p.xy);
					p.z = floorplane.ZatPoint(p.xy);
					if (!level.IsPointInLevel(p) || 
						s.DamageAmount > 0 ||
						!CheckPosition(p))	continue;
					
					SetGoal(p);
					return;
				}
			}
		}
		*/
	}
	States
	{
	Spawn:
		TNT1 AA 35;
		Goto IdleMove;
	Idle:
		TNT1 A 0 
		{
			UpdateLimbs();
			return A_Jump(256, random(1, 4));
		}
		TNT1 AAAAAAAAAA 17 Look();
	IdleMove:
		TNT1 A 0 
		{
			LookTimer = 0;
			return A_Jump(256, random(1, 35*2));
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		Goto Idle;
	See:
		TNT1 A 1 Chase(_3dmelee: true);
		Wait;
	Melee:
		TNT1 A 1 DoMelee(random[rng](15, 25));
		Goto See;
	}
}

//------------------------------------------------------------------------------
// Husks
// 
// 
// 
// - Stronger
// + Slower
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Drowned
// 
// - Can swim
// - Can wield a trident
// - Doesn't burn in daylight
// - Immune to drowning
//------------------------------------------------------------------------------


//==============================================================================
//==============================================================================
// Limbs
//==============================================================================
//==============================================================================


Class MCZombieHead : MCBodyPartHead	{}
Class MCZombieHeadBaby : MCZombieHead	{}

Class MCZombieBody : MCBodyPartBody
{
}

Class MCZombieLegRight : MCBodyPartLeg
{
	Default
	{
		Radius 0.8;
		Height 2.0;
		MCBodyPart.StepSound "Minecraft/Zombie/Step";
	}
}

Class MCZombieLegLeft : MCZombieLegRight
{
	Default
	{
		MCBodyPart.VelSineOffset 180;
	}
}

Class MCZombieArmRight : MCBodyPartArm
{
	Default
	{
		Radius 0.8;
		Height 2.0;
	}
}

Class MCZombieArmLeft : MCZombieArmRight
{
	Default
	{
		MCBodyPart.SineOffset 180, 180, 180;
	}
}

//------------------------------------------------------------------------------
// Gibs
//------------------------------------------------------------------------------

Class MCZombieHeadGib : MCBodyPartGib
{
	Default
	{
		MCBodyPartGib.Offsets 0, 0, 5.6;		//Head
	}
}

Class MCZombieHeadBabyGib : MCZombieHeadGib	{}

Class MCZombieArmRightGib : MCBodyPartGib
{
	Default
	{
		MCBodyPartGib.Offsets 0,  1.2, 3.6;		//Right Arm
	}
}

Class MCZombieArmLeftGib : MCBodyPartGib
{
	Default
	{
		MCBodyPartGib.Offsets 0, -1.2, 3.6;		//Left Arm
	}
}

Class MCZombieLegRightGib : MCBodyPartGib
{
	Default
	{
		MCBodyPartGib.Offsets 0,  0.4, 1.2;		//Right Leg
	}
}
Class MCZombieLegLeftGib : MCBodyPartGib
{
	Default
	{
		MCBodyPartGib.Offsets 0, -0.4, 1.2;		//Left Leg
	}
}

Class MCZombieBodyGib : MCBodyPartGib
{
	Default
	{
		MCBodyPartGib.Offsets 0, 0, 3.6;
	}
}

