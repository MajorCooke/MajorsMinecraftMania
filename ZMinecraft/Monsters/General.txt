
// Contains info about who last damaged this actor. Used for DamageReact.
Struct LastDamaged
{
	Actor i, s;
	int damage, dmg, flags;
	Name mod;
	double angle;
	bool used, secdmg;
}

//==============================================================================
//==============================================================================
// 
//==============================================================================
//==============================================================================

extend class MinecraftMonster
{
	//--------------------------------------------------------------------------
	// A virtual for monsters to adjust various aspects for AI difficulty setting.
	//--------------------------------------------------------------------------
	// private bool Inited, LookAllRound;
	virtual void AdjustDifficulty()
	{
		/*
		if (!Inited)
		{
			LookAllRound = irandom(0,1);
			Inited = true;
		}
		
		Switch (MCC_AIDifficulty)
		{
			Default:
			Case Dif_Easy:
				bLOOKALLAROUND = false;
				break;
			Case Dif_Normal:
				bLOOKALLAROUND = (LookAllRound);
				break;
			Case Dif_Hard:
				bLOOKALLAROUND = true;
				break;
		}
		*/
	}
	
	//--------------------------------------------------------------------------
	// TraceDistance
	//
	// Returns the distance to the edge of another actor.
	//--------------------------------------------------------------------------
	
	transient private GDDTracer Trc;
	bool CheckTrace(Actor mo, double dist = 0, double zz = -1, bool flor = true, bool wall = true, bool ceil = true)
	{
		double ret = TraceDistance(mo, dist, zz);
		return (ret >= 0 && ret <= dist);
	}
	double TraceDistance(Actor mo, double dist = 0, double zz = -1, bool flor = false, bool wall = true, bool ceil = false)
	{
		if (dist <= 0 || !Targetable(mo))	return -1;
		
		// Set the position so its flat if the other's feet is above our
		// own, but not our head.
		if (zz < 0.0)
			zz = Clamp(	mo.pos.z, 
						Max(pos.z, floorz + 1, mo.pos.z), 
						Min(pos.z + height, ceilingz, mo.pos.z));
		
		Vector3 mpos = Vec2OffsetZ(0,0,zz),
				tpos = mo.pos;
		
		Vector3 APR = level.Vec3Diff(mpos, tpos);
		
		if (!Trc)	Trc = new('GDDTracer');
		Trc.trg = mo;
		Trc.SetHittable(flor,wall,ceil);
		Trc.Trace(mpos, cursector, APR, dist + radius, 0);
		
		if (Trc.Results.HitType == TRACE_HitActor)
			return level.Vec3Diff(Trc.Results.HitPos, mpos).Length();
		return -1;
	}
	//--------------------------------------------------------------------------
	// "Respawns" the monster by clearing all inventory and effects, and other
	// stuff.
	
	virtual void PrepareRespawn()
	{
		if (health < 1 || bDORMANT)	return;
		
		Damagers.Clear();
		Array<Powerup> Powers; Powers.Clear();
		Array<Inventory> Items; Items.Clear();
		for (let probe = inv; probe; probe = probe.inv)
		{
			if (probe)	Items.Push(probe);
		}
		
		for (int i = 0; i < Items.Size(); i++)
			if (Items[i])	Items[i].Destroy();
		
		// Mitigate any telefragging by making them pass through actors.
		bTHRUACTORS = true;
		A_Respawn(RSF_TELEFRAG);
		Deactivate(null);
	}
	
	void StoreHealthMul()
	{	if (bDORMANT)	HealthMul = Max(1.0, MCC_HealthMul);	}
	
	double GetHealthMul()
	{	return Max(1.0, HealthMul);	}
	
	

	
	
	// The goal of this function is simply to call Super.DropItems and pass in the
	// source, inflictor and damagetype for the monsters to use. The base class
	// simply checks if a player did the killing. Naturally this can be overridden
	// as needed, such as the creeper and skeleton special drops.
	virtual protected bool DropItems(Actor src, Actor inf, Name mod)
	{
		for (int i = 0; i < Damagers.Size(); i++)
			if (Damagers[i] is 'PlayerPawn')	return true;
		return (src is 'PlayerPawn');
	}
	
	protected void DropItem(Class<Inventory> Cls, int Amount = -1, int Chance = 256)
	{
		if (!Event)	Event = MinecraftHandler.Fetch();
		if (Event)	Event.DropItem(self, Cls, Amount, Chance);
	}
	
	
	
	
	
	
	
	
	
	//--------------------------------------------------------------------------
	// Updates all things related to scale, including height and radius.
	protected void SetOverScale(double s)
	{
		OverScale = s;
		A_SetSize(Default.Radius * OverScale, Default.Height * OverScale);
		UpdateLimbs();
	}
	
	//--------------------------------------------------------------------------
	// Helper function simply to set limbs as well as 
	protected void SetTranslation(Name n)
	{
		A_SetTranslation(n);
		for (int i = 0; i < Limb.Size(); i++)
			if (Limb[i])	Limb[i].A_SetTranslation(n);
		PrevTrans = Translation;
	}
	
	
	
	
	
	
	
	bool CheckFear(Actor mo)
	{
		if (!mo)	
		{
			mo == Target;
			if (!mo)	return false;
		}
		if (CheckRelationTarget(mo) == Rel_Afraid)
			return true;
		
		return (!bNOFEAR && (bFRIGHTENED || mo.bFRIGHTENING));
	}
	
	virtual bool DoMissile()
	{
		return false;
	}
	
	virtual bool DoMelee(int damage = -1)
	{
		if (AttackDelay > 0 || !Targetable(Target) || !CheckTrace(Target, MeleeRange))
			return false;
		
		if (damage < 1)	
		{
			damage = MeleeDamage;
			if (damage < 1)
				return false;
		}
		
		let armor = Target.FindInventory('BasicArmor',true);
		int armbefore = 0, armafter = 0;
		
		if (armor)	armbefore = Armor.Amount;
		
		int dmg = ((Target.bINVULNERABLE && !bFOILINVUL) || Target.bNODAMAGE) 
			? 0 : Target.DamageMobj(null, self, damage, "Melee");
			
		if (armor)	armafter = Armor.Amount;
		
		if (dmg > 0 || armafter != armbefore)
		{
			if (Target && !bNODAMAGETHRUST && !Target.bDONTTHRUST && 
				!(Target is 'MinecraftMonster') && Target.Mass > 0)
			{
				double thrust = clamp((damage * 20.0) / Target.Mass, 0., 32);
				Target.Thrust(thrust, AngleTo(Target));
				Target.Vel.Z += 700 / Target.Mass;
			}
			AttackDelay = AttackDelayMax;
			SetMeleeAnimation();
			ValidateTarget();
		}
		
		return true;
	}
	
	virtual void SetMeleeAnimation()	{	}
	
	//==========================================================================
	// Goal Manipulation
	//==========================================================================
	
	enum EGoalStatus
	{
		GS_None = 0,
		GS_Chasing,
		GS_Reached
	};
	bool CheckGoal(bool istarget = false)
	{
		return ((Goal is "MCGoal") && (!istarget || Target == Goal));
	}
	
	int CheckInGoalRange(double dist = 0.0, StateLabel next = 'Idle')
	{
		if (Goal && Target == Goal)
		{
			if (dist <= 0.0)	dist = radius;
			bool InZ = (pos.z <= Goal.pos.Z + Goal.Height) &&
						(pos.z >= Goal.pos.z);
			if (InZ && Distance2DSquared(Goal) <= (dist ** 2))
			{
				SetOrigin(Goal.pos, true);
				RemoveGoal();
				State s = ResolveState(next);
				if (s)	SetState(s);
				return GS_Reached;
			}
			return GS_Chasing;
		}
		return GS_None;
	}
	
	// Just in case something fucks with the goal pointer prematurely...
	private Actor BackupGoal; 
	virtual void SetGoal(Vector3 gp, double ang = 0, bool relative = false)
	{
	//	Console.Printf("SetGoal called");
		if (ValidateTarget())	return;
		
		if (!Goal)	
		{
			if (!BackupGoal)
			{
				Goal = Spawn('MCGoal', gp);
			}
			else Goal = BackupGoal;
		}
		BackupGoal = Goal;
		
		if (relative)	Goal.Warp(Self, gp.x, gp.y, gp.z, ang, WARPF_NOCHECKPOSITION);
		else			Goal.SetOrigin(gp, false);
	}
	
	void RemoveGoal()
	{
		if (Goal is 'MCGoal' && !Goal.bDESTROYED)
			Goal.Destroy();
		if (BackupGoal && !BackupGoal.bDESTROYED)
			BackupGoal.Destroy();
			
		Goal = BackupGoal = null;
	}
	
}