/*
Minecraft/Creeper/Pain
Minecraft/Creeper/Death

Head:			0.0,	0.0,	3.6
(Gib) Body:		0.0,	0.0,	2.4
Legs F:			0.4,	+-.4,	1.2
Legs B:			-.4,	+-.4,	1.2

Gib Head:		0.0,	0.0,	4.4
Gib Legs F:		0.8,	+-.4,	0.6
Gib Legs B:		-.8,	+-.4,	0.6

*/

Class MCCreeperWeaponSpawner : RandomSpawner
{
	Default
	{
		DropItem 'Shotgun', 		255, 80;
		DropItem 'SuperShotgun',	255, 60;
		DropItem 'Chaingun', 		255, 50;
		DropItem 'RocketLauncher',	255, 30;
		DropItem 'PlasmaRifle',		255, 15;
		DropItem 'BFG9000',			255, 1;
	}
}


// Because someone is going to want to use them against the Creeper Ghoul from
// Ghoul's Forest. I just know it. >:)
Class MCCreeper : MinecraftEnemy
{
	const ExploRange = 256.0;
	const _Radius = 1.6;
	const _Height = 5.2;
	const RealScale = 8.0;
	const RealRadius = RealScale * _Radius;
	const RealHeight = RealScale * _Height;
	
	enum ELimbs
	{
		Head = 0,
		Body,
		LegFL,
		LegFR,
		LegBL,
		LegBR,
		LimbCount,
	};
	
	private MCBodyPart LimbX[LimbCount];
	private bool Exploded;
	protected int HissingRange;
	
	Property HissingRange: HissingRange;
	
	Default
	{
		MCCreeper.HissingRange 350; // Once hissing starts, get this far away to stop.
		MeleeRange 128;
		
		MinecraftEnemy.MaxChaseRange 768;
		MaxTargetRange 512;
		
		Health 100;
		Scale RealScale;
		Radius RealRadius;
		Height RealHeight;
		Speed 5;
		
		+EXTREMEDEATH
		+FORCERADIUSDMG
		+VULNERABLE
		PainSound "Minecraft/Creeper/Pain";
		DeathSound "Minecraft/Creeper/Death";
		
		BloodColor "LightGreen";
		
		Tag "Creeper";
		Obituary "A creeper blasted %o sky high, Team Rocket style.";
	}
	
	override bool DropItems(Actor src, Actor inf, Name mod)
	{
		if (!Super.DropItems(src, inf, mod))
			return false;
		
		A_DropItem('MCCreeperWeaponSpawner',1, 20);
		return true;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Init(LimbCount);
		Limb[Head] = MCBodyPart(Spawn('MCCreeperHead', pos));
		Limb[Body] = MCBodyPart(Spawn('MCCreeperBody', pos));
		Limb[LegFL] = MCBodyPart(Spawn('MCCreeperLegFront', pos));
		Limb[LegFR] = MCBodyPart(Spawn('MCCreeperLegFront', pos));
		Limb[LegBL] = MCBodyPart(Spawn('MCCreeperLegBack', pos));
		Limb[LegBR] = MCBodyPart(Spawn('MCCreeperLegBack', pos));
		
		LimbX[Head] = MCBodyPart(Spawn('MCCreeperHeadW', pos));
		LimbX[Body] = MCBodyPart(Spawn('MCCreeperBodyW', pos));
		LimbX[LegFL] = MCBodyPart(Spawn('MCCreeperLegFrontW', pos));
		LimbX[LegFR] = MCBodyPart(Spawn('MCCreeperLegFrontW', pos));
		LimbX[LegBL] = MCBodyPart(Spawn('MCCreeperLegBackW', pos));
		LimbX[LegBR] = MCBodyPart(Spawn('MCCreeperLegBackW', pos));
				
		for (int i = 0; i < Limb.Size(); i++)
		{
			let Lim = Limb[i];
			if (Lim)
			{
				if (i <= Body)	Lim.Master = self;
				else			Lim.Master = Limb[Body];
				Lim.Owner = self;
			}
			Lim = LimbX[i];
			if (Lim)
			{
				if (i <= Body)	Lim.Master = self;
				else			Lim.Master = Limb[Body];
				Lim.Owner = self;
				Lim.bINVISIBLE = true;
				Lim.A_FadeOut(1.0, 0);
			}
		}
		
		Limb[Head].SetPosOffsets((0.0,0.0,3.6));
		Limb[Body].SetPosOffsets((0.0,0.0,2.4));
		Limb[LegFR].SetPosOffsets((0.4,0.4,1.2));
		Limb[LegFL].SetPosOffsets((0.4,-.4,1.2));
		Limb[LegBR].SetPosOffsets((-.4,0.4,1.2));
		Limb[LegBL].SetPosOffsets((-.4,-.4,1.2));
		
		Limb[LegFL].SetSineOffset((180,180,180));
		Limb[LegBR].SetSineOffset((180,180,180));
		
		LimbX[Head].SetPosOffsets((0.0,0.0,4.0));
		LimbX[Body].SetPosOffsets((0.0,0.0,2.4));
		
		LimbX[LegFR].SetPosOffsets((0.8,0.4,0.6));
		LimbX[LegFL].SetPosOffsets((0.8,-.4,0.6));
		LimbX[LegBR].SetPosOffsets((-.8,0.4,0.6));
		LimbX[LegBL].SetPosOffsets((-.8,-.4,0.6));
		
		LimbX[LegFL].SetSineOffset((180, 0, 0));
		LimbX[LegBR].SetSineOffset((180, 0, 0));
		UpdateLimbs();
	}
	
	private int age;
	
	override void Activate(Actor activator)
	{
		if (health < 1 || bDESTROYED)	return;
		Super.Activate(activator);
		for (int i = 0; i < LimbX.Size(); i++)
			if (LimbX[i])	LimbX[i].Activate(activator);
	}
	
	override void Deactivate(Actor activator)
	{
		if (health < 1 || bDESTROYED)	return;
		Super.Deactivate(activator);
		for (int i = 0; i < LimbX.Size(); i++)
			if (LimbX[i])	LimbX[i].Deactivate(activator);
		
	}
	private int ExplodeTics;
	private Vector3 TempVel;
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		TempVel = Vel;
		DestroyXLimbs();
		bVULNERABLE = true;
		ExplodeTics = 5;
		
		// Death by explosion, cause an explosion if enabled based on the type.
		// If kiiled by another creeper, explode based on if charging or just 
		// make it happen via cvar. Else if not by creeper, blow up if wanted.
		if (MCC_CreeperAlwaysBoom)
			DamageType = 'Creeper';
		else if (dmgflags & DMG_EXPLOSION)
		{
			if (MCC_CreeperChainBoom > 0 && source is 'MCCreeper')
			{
				if (MCC_CreeperChainBoom == 1)
				{
					if (Charging)	DamageType = 'Creeper';
					DamageType = (Charging) ? 'Creeper' : 'None';
				}
				else
					DamageType = 'Creeper'; 
			}
			else if (MCC_CreeperBoomBoom)
				DamageType = 'Creeper'; 
			else if (DamageType == 'Creeper')
				DamageType = 'None';
		}
		Super.Die(source, inflictor, dmgflags, meansofdeath);
		if (DamageType == 'Creeper')	Vel = TempVel;
		else bNOINTERACTION = false;
		
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (health < 1)
		{
			if (ExplodeTics > 0 && damage > 0 && ApplyDamageFactor(mod, damage) > 0)
			{
				if (flags & DMG_EXPLOSION)
				{
					if (MCC_Debug == 3)	
						Console.Printf("Boom.");
					Kaboom();
				}
				else if (MCC_Debug == 3) Console.Printf("Damage not explosive.");
			}
			else
			{				
				if (MCC_Debug == 3)
				{
					if (ExplodeTics < 1)	Console.Printf("ExplodeTics is 0");
					if (damage < 1)			Console.Printf("Damage < 1");
					int d = ApplyDamageFactor(mod, damage);
					if (d < 1)			Console.Printf("D < 1");
				}
			}
		}
		
		
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	
	override void Tick()
	{
		Super.Tick();
		
		if (health < 1 || IsFrozen())	
		{
			if (health < 1 && !IsFrozen())
			{
				if (ExplodeTics > 0)
				{
					ExplodeTics--;
					bVULNERABLE = true;
				}
				else bVULNERABLE = false;
			}
			return;
		}
		
		// Updates the white boxes to flash with visibility.
		for (int i = 0; i < LimbX.Size(); i++)
		{
			if (ChargeTimer > 0)
			{
				
				if (LimbX[i])
				{
					Vector3 NA = Angs;
					
					if (Limb[i])
					{
						LimbX[i].CopyAngles(Limb[i]);
						LimbX[i].UpdatePosition(Limb[i]);
					}
					else
					{
						LimbX[i].UpdatePosition(self);
						LimbX[i].SetNextAngles(Angs);
					}
					LimbX[i].UpdateScales(OverScale + 0.1, Scale);
					LimbX[i].bBRIGHT = true;
					
					if (GetAge() % AlterTics == 0)
						LimbX[i].bINVISIBLE = !LimbX[i].bINVISIBLE;
					LimbX[i].A_FadeTo(MaxChargeFrac * ChargeTimer, 1.0, 0);
				}
				
			}
			else if (LimbX[i])	LimbX[i].bINVISIBLE = true;
		}
		
		if (!Charging && ChargeTimer > 0)
			ChargeTimer--;
		
		if (Targetable(Target) && 
			//ValidateTarget(false, HissingRange) && 
			CheckSight(Target, CSFlags))
		{
		//	if (!OnGround && Vel.Z < -9.0)
		//		SetExplosionCounting(true, true);
		
			// Handle the charging effects.
			if (Charging && ChargeTimer < MaxCharge)
				ChargeTimer++;
			else if (!Charging && ChargeTimer > 0)
				ChargeTimer--;
			
			// Do not call call actual death here. This will cause it to drop ill-gotten
			// gains, so it must behave like Minecraft and drop absolutely nothing.
			// As a result, it will never call WorldThingDied on purpose.
			if (Charging && ChargeTimer >= MaxCharge)
			{
				if (InExploRange(Target))
				{
					Kaboom();
					SetState(ResolveState("Death"));
					return;
				}				
			}
		}
		else SetExplosionCounting(false);
	}
	
	protected void Kaboom(bool ClearLimbs = true)
	{
		if (!bCORPSE)
		{
			bCORPSE = true;
			Health = min(0, Health);
			
			for (let probe = inv; probe; probe = probe.inv)
				if (probe)	probe.OwnerDied();
			
		}
		ExplodeTics = 0;
		A_ChangeLinkFlags(1);
		bNEVERTARGET = bNOINTERACTION = bINVISIBLE = true;
		A_UnsetShootable();
		bVULNERABLE = false;
		if (ClearLimbs)	DestroyLimbs();
		A_Stop();
		A_StopAllSounds();
		
		BlockThingsIterator it = MC_Map.MakeBTIPos(pos, (ExploRange, ExploRange));
		if (it)
		{
			while (it.Next())
			{
				let mo = MinecraftEnemy(it.thing);
				if (mo && mo.health > 1)
					mo.Damagers.Append(Damagers);
			}
		}
		// Deal 256 damage to players and minecraft monsters.
		Explode(true,	 256, ExploRange, 128,-1,-1,-1, XF_NOTMISSILE, 0, false, 'Creeper');
		
		// Deal damage to everything else, making them very useful for clearing
		// out crowds of enemies. The player is given an immunity powerup to stop
		// Creeper damagetype from hurting them.
		Explode(false,	1000, ExploRange, ExploRange, 0, 0, 0, XF_NOTMISSILE, 0, false, 'CreeperBig');
	}
	
	protected void DestroyXLimbs()
	{
		for (int i = 0; i < LimbX.Size(); i++)
		{
			if (LimbX[i])
			{
				LimbX[i].Destroy();
				LimbX[i] = null;
			}
		}
	}
	
	override void DestroyLimbs()
	{
		DestroyXLimbs();
		Super.DestroyLimbs();
	}
	
	override void DamageReact(Actor inf, Actor src, int damage, int dmg, Name mod, int flags, double angle)
	{
		if (Charging && mod == 'Falling' && dmg > 0)
			Kaboom();
	}

	const MaxCharge = Second + 18; // Just above 1.5 seconds.
	const MaxChargeFrac = 1.0 / MaxCharge;
	const AlterTics = 4;
	private int ChargeTimer;
	private int FlashTimer;
	private bool Charging, ChargeFall;
	private bool SuperCharged; // Charged creeper. Ruh roh!
	
	void SetExplosionCounting(bool on, bool fall = false) 
	{
		if (on && !Charging)	
		{
			A_StartSound("Minecraft/Creeper/Hiss",CHAN_BODY,CHANF_OVERLAP);
			for (int i = 0; i < LimbX.Size(); i++)
				if (LimbX[i])	LimbX[i].PostAngSet(true);
		}
		Charging = on;
		
	//	ChargeFall = (on) ? fall : false;
	}
	
	bool InExploRange(Actor mo = null, bool _2d = false, double dist = -1.0)
	{
		if (!mo)	
		{
			ValidateTarget();
			mo = Target;
			if (!mo)	return false;
		}
		
		if (ChargeFall && OnGround)	return true;
		
		if (dist < 0.0)
		{
			if (mo is 'PlayerPawn')
				dist = (Charging) ? HissingRange : ExploRange;
			else
				dist = (ExploRange + HissingRange) * 0.5;
				
			
		}
		dist += max(height, radius);
		return 	(mo && 
			//	((!_2d && CheckTrace(Target, dist, height * 0.5, false, false, false))) ||
			//	(_2d && CheckTrace(Target, dist, Target.pos.z, false, false, false)));
				
				(_2d && Distance2DSquared(mo) <= (dist ** 2)) ||
				(!_2d && Distance3DSquared(mo) <= (dist ** 2)));
	}
	
	override void SpawnRiders()
	{
		if (NoRiders || bDESTROYED || bKILLED)	return;
		
		double hoff = 0;
		
		SpawnRider('MCCreeper', hoff, 128);
		SpawnRider('MCCreeper', hoff, 96);
		SpawnRider('MCCreeper', hoff, 64);
		SpawnRider('MCCreeper', hoff, 48);
		SpawnRider('MCCreeper', hoff, 16);
	}
	
	double ChargeChaseSpeed;
	override void AdjustDifficulty()
	{
		Super.AdjustDifficulty();
		
		double SpeedMul = 0;
		
		Switch(MCC_AIDifficulty)
		{
			Default:
			Case Dif_Easy:		SpeedMul = 0.0; break;
			Case Dif_Normal:	SpeedMul = 0.5; break;
			Case Dif_Hard:		SpeedMul = 1.0; break;
		}
		ChargeChaseSpeed = Speed * SpeedMul;	
	}
	
	States
	{
	Spawn:
		TNT1 AA 35;
		Goto IdleMove;
	Idle:
		TNT1 A 0 
		{
			
			SetExplosionCounting(false);
			return A_Jump(256, IFRandom(1, 4));
		}
		TNT1 AAAAAAAAAA 17 Look();
	IdleMove:
		TNT1 A 0 
		{
			LookTimer = 0;
			return A_Jump(256, IFRandom(1, 35*2));
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 LookWander();
		Goto Idle;
	See:
		TNT1 A 1 
		{
			if (OnGround)
				SetExplosionCounting(false);
			bool drop = bDROPOFF;
			bDROPOFF = (Target && Target.Pos.Z + Target.Height < Pos.Z && InExploRange(Target, true, HissingRange));
			Chase('Melee', null, 0, 30, true);
			bDROPOFF = drop;
		}
		Wait;
	Melee:
		TNT1 A 1
		{
			SetExplosionCounting(true, pos.z > floorz);
		}
		TNT1 A 1
		{
			if (!InExploRange(Target, !OnGround))
			{
				SetExplosionCounting(false);
				return ResolveState("See");
			}
			
			if (ChargeChaseSpeed > 0 && Pos.Z <= FloorZ && VelLen <= Speed)
			{
				bool drop = bDROPOFF;
				bDROPOFF = (Targetable(Target) && Target.Pos.Z + Target.Height < Pos.Z);
				Chase(null, null);
				bDROPOFF = drop;
				/*
				Vel.XY = (0,0);
				Vector2 newpos = Vec2Angle(ChargeChaseSpeed, AngleTo(Target));
				TryMove(newpos, bDROPOFF);
				*/
			}
			
			return ResolveState(null);
		}
		Wait;
	
	Death.Falling:
	Death.Suicide:
		
	// This damagetype is only set in Die(). 
	Death.Creeper:
	Death.CreeperBig:
		TNT1 A 1;
		TNT1 A 15 
		{
			Kaboom();
			A_Stop();
		}
		Stop;
	}
}


Class MCCreeperHead :		MCBodyPartHead {}
Class MCCreeperBody :		MCBodyPartBody {}
Class MCCreeperLeg :		MCBodyPartLeg	{ Default { MCBodyPart.SwingAmp SineWavePerSecond * 3.0;	MCBodyPart.SwingAngleCap 30.0;	} }
Class MCCreeperLegFront :	MCCreeperLeg	{ Default { MCBodyPart.Gib 'MCCreeperLegGib'; } }
Class MCCreeperLegBack :	MCCreeperLeg	{ Default { MCBodyPart.Gib 'MCCreeperLegGib'; } }

//InvertInvis
Class MCCreeperHeadW :		MCCreeperHead { Default { RenderStyle "Stencil"; StencilColor "White"; +BRIGHT }}
Class MCCreeperBodyW :		MCCreeperBody { Default { RenderStyle "Stencil"; StencilColor "White"; +BRIGHT }}
Class MCCreeperLegFrontW :	MCCreeperLegFront { Default { RenderStyle "Stencil"; StencilColor "White"; +BRIGHT }}
Class MCCreeperLegBackW :	MCCreeperLegBack { Default { RenderStyle "Stencil"; StencilColor "White"; +BRIGHT }}

Class MCCreeperHeadGib :	MCBodyPartGib {}
Class MCCreeperBodyGib :	MCBodyPartGib {}
Class MCCreeperLegGib :		MCBodyPartGib {}