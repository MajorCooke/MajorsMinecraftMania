/*==============================================================================
//==============================================================================
//	Body parts
//==============================================================================
//==============================================================================

--------------------------------------------------------------------------------
	LimbSway

	Performs idle swaying, adding onto the current limb's APR (Angle/Pitch/Roll)
--------------------------------------------------------------------------------
NOTICE: Each limb that can 'swing' needs a radius and height defined in order 
to properly scale the swaying. Use the measurement tool and measure from the
bottom of the limb to the pivot point. By 'swing', it's effectively the legs
moving forward and backwards while the monster moves.
*/

Struct LimbSway play
{
	Vector3 SineOff, // Keeps the current sine as it's updated.
			SineDist,
			SineSpeed;
			
	void Init(Vector3 SO, Vector3 SD, Vector3 SS)
	{
		SineOff = (abs(SO.X) % 360, abs(SO.Y) % 360, abs(SO.Z) % 360);
		SineDist = (abs(SD.X), abs(SD.Y), abs(SD.Z));
		SineSpeed = (abs(SS.X), abs(SS.Y), abs(SS.Z));
	}
			
	Vector3 NextSway()
	{
		// Advance the sine wave.
		SineOff.X = (SineOff.X + SineWavePerSecond * SineSpeed.X) % 360.0;
		SineOff.Y = (SineOff.Y + SineWavePerSecond * SineSpeed.Y) % 360.0;
		SineOff.Z = (SineOff.Z + SineWavePerSecond * SineSpeed.Z) % 360.0;
		
		return (Sin(SineOff.X) * SineDist.X, Sin(SineOff.Y) * SineDist.Y, Sin(SineOff.Z) * SineDist.Z);
	}
}

//------------------------------------------------------------------------------
// LimbSwing
// 
// Does active movement for limbs like legs.
//------------------------------------------------------------------------------
Struct LimbSwing play
{
	const GainCap = 8.0;
	double SwingAmp, VelTheta, Scale, VelSpring, CurSpring, AngleCap;
	
	void Init(double off, double s, double amp = 1.0)	
	{	
		VelTheta = abs(off % 360);
		Scale = s;
		SwingAmp = 1.0;
		VelSpring = 0;
	}
	
	double NextSwing(double VelPosLen, bool cosine = false, double off = 0, bool donext = true)
	{
		if (Scale ~== 0.0 || SwingAmp ~== 0.0)	return 0;
		
		VelSpring = TM_kSpring.DampedSpringDouble(CurSpring, VelPosLen, VelSpring, 0.25, 0.1);
		CurSpring += VelSpring;
		
		if (CurSpring ~== 0.0)	return CurSpring;
		
		double len = SwingAmp * (1.0 / Scale);
		
		double mag = Clamp((CurSpring * len), 0, SineWavePerSecond * 4);
		if (donext)
			VelTheta = (VelTheta + mag) % 360;
		double ret = 0;
		if (cosine)	ret = Cos(VelTheta) * Clamp(CurSpring * 10, 0, AngleCap);
		else		ret = Sin(VelTheta) * Clamp(CurSpring * 10, 0, AngleCap);
		
		return ret;
	}
}

mixin Class TM_UpdateLimbs
{
	int CurStyle;
	Array<TM_BodyPart> Limb;
	
	//--------------------------------------------------------------------------
	// Initializes Limb array.
	void Init(int limbs)
	{
		Limb.Clear();
		if (limbs < 1)	return;
		Limb.Reserve(limbs);
		for (int i = 0; i < Limb.Size(); i++)
			Limb[i] = null;
	}
	
	
	// Creates & inserts a limb into a specific index in the Limb array. If the
	// index is < 0, will find a null spot first before attempting to push to
	// the array.
	TM_BodyPart InsertLimb(Class<TM_BodyPart> cls, int i = -1, Vector3 _pos = (0,0,0), bool still = false, bool replace = true)
	{
		if (!cls) return null;
		
		// Find a null spot first.
		if (i < 0 || i >= Limb.Size())
		{
			bool good = false;
			for (int j = 0; j < Limb.Size(); j++)
			{
				if (!Limb[j])
				{
					good = true;
					i = j;
					break;
				}
			}
			
			// No free space, so just perform AddLimb.
			if (!good)	return AddLimb(cls, _pos, still); 
		}
		else if (Limb[i])
		{
			if (replace)	Limb[i].Destroy();	// Replace it.
			else 			return null; 		// Taken slot.
		}
		Limb[i] = AddLimb(cls, _pos, still, false);
		return Limb[i];
	}
	
	TM_BodyPart AddLimb(Class<TM_BodyPart> cls, Vector3 _pos, bool still = false, bool push = true)
	{
		let mo = InitLimb(cls);
		if (!mo)	return null;
		
		mo.IsStill = still;
		if (_pos ~== (0,0,0))
			_pos = (mo.OffX, mo.OffY, mo.OffZ);
		mo.SetPosOffsets(_pos);
		if (push)	Limb.Push(mo);
		return mo;
	}
	
	private TM_BodyPart InitLimb(Class<TM_BodyPart> cls)
	{
		if (!cls)	return null;
		
		let mo = TM_BodyPart(Spawn(cls, pos, ALLOW_REPLACE));
		if (mo)
		{
			let sf = TM_BodyPart(self);
			if (sf)	mo.Owner = sf.Owner;
			else	mo.Owner = TM_Monster(self);
			mo.Master = self;
		}
		return mo;
	}
	
	virtual void UpdateLimbs(Vector3 Angs, bool interp = true)
	{
		if (bDESTROYED || bKILLED)	return;
		for (int i = 0; i < Limb.Size(); i++)
		{
			if (Limb[i])
			{
				bool invis = bINVISIBLE;
				Vector3 NA = Angs;
				if (!(Limb[i] is 'TM_BodyPartHead') && !Limb[i].IsStill)
				//	NA.Y -= Pitch;
					NA.Y = 0;
				
				Switch (Limb[i].CopyFrames)
				{
					Case TM_Frames_FromOwner:
					{
						Limb[i].Frame = Frame;	
						break;
					}
					Case TM_Frames_FromMaster:
					{
						if (Limb[i].Master)	
							Limb[i].Frame = Limb[i].Master.Frame; 
						break;
					}
				}
				
				bool start = (self is "TM_Monster");
				Limb[i].UpdatePosition(self, interp, start);
				Limb[i].UpdateScales(OverScale, Scale);
				
				
				
				if (Limb[i].IsStill)
				{
					Angs = (Angle, Pitch, Roll);
					Limb[i].SetAngles(Angs.X, Angs.Y, Angs.Z);
					Limb[i].UpdateAngles(Angs);
					Limb[i].CopyAngles(self, true);
				}
				else
				{
				//	Limb[i].CopyAngles(self);
					Limb[i].SetNextAngles(NA);
				}
				Limb[i].bADDLIGHTLEVEL = bADDLIGHTLEVEL;
				Limb[i].LightLevel = LightLevel;
				Limb[i].CurStyle = CurStyle;
				Limb[i].A_SetRenderStyle(alpha, CurStyle);
				Limb[i].Translation = Translation;
				if (Limb[i].CopyInvis)
				{
					Limb[i].bINVISIBLE = bINVISIBLE;
					
				}
				Limb[i].bBRIGHT = bBRIGHT;
				if (!start || (invis && !bINVISIBLE))
				{
					bool inter = interp;
					if (invis && !bINVISIBLE)
						inter = false;
					Limb[i].UpdateLimbs(Angs, inter);
				}
			}
		}
	}
}

extend class TM_Monster
{
	mixin TM_UpdateLimbs;
	protected TM_ArmorInv ArmorInv;
	
	// This function determines what the armor/weapons will be upon spawning.
	protected Array<Int> ArmorSlots, WeaponSlots;
	protected virtual void PrepareArmory()
	{
		ArmorSlots.Clear();
		WeaponSlots.Clear();
	}
	
	void SetArmor(int slot, int type)
	{
		
		// Set up the inv item.
		if (!ArmorInv)
		{
			GiveInventory("TM_ArmorInv", 1);
			ArmorInv = TM_ArmorInv(FindInventory('TM_ArmorInv'));	
		}
		
		// Tell the limbs to create the armors.
		Array<TM_Armor> Armors; Armors.Clear();
		for (int i = 0; i < Limb.Size(); i++)
		{
			if (Limb[i])	
			{
				bool a; TM_Armor b;
				[a, b] = Limb[i].SetArmor(slot, type);
				if (a && b)
					Armors.Push(b);
				
			}
		}
		
		if (ArmorInv)
			ArmorInv.UpdateArmor(Armors);
	}
		
	// Returns the head actor, mainly for cosmetic head tilts for actors to
	// look at others properly. Bear in mind that if more than one head is present,
	// the one earliest on the list will be the one returned.
	private int HeadIndex;
	TM_BodyPartHead GetHead() const
	{
		// Quicker lookup. 
		if (HeadIndex > -1 && HeadIndex < Limb.Size() &&
			Limb[HeadIndex] is 'TM_BodyPartHead')
			return TM_BodyPartHead(Limb[HeadIndex]);
			
		for (int i = 0; i < Limb.Size(); i++)
		{
			if (Limb[i] is 'TM_BodyPartHead')
			{
				HeadIndex = i;
				return TM_BodyPartHead(Limb[i]);
			}
		}
		
		HeadIndex = -1;
		return null;
	}
	
	protected virtual void DestroyLimbs()
	{
		for (int i = 0; i < Limb.Size(); i++)
		{
			if (Limb[i])	
			{
				Limb[i].Destroy();
				Limb[i] = null;
			}
		}
	}
	
	//--------------------------------------------------------------------------
	// Causes all the limbs to turn into their gibbed variants and send them
	// flying all around based on velocity.
	protected void Gib(double VelLen)
	{
		Translation = Default.Translation;
		bBRIGHT = false;
		for (int i = 0; i < Limb.Size(); i++)
		{
			if (Limb[i])	
			{
				Limb[i].Translation = Translation;
				Limb[i].bBRIGHT = false;
				Limb[i].SpawnGib(VelLen);
			}
		}
	}
}

Class TM_BodyPart : TM_Entity
{
	mixin TM_UpdateLimbs;
	const StepWait = 8;
	private SpriteID SprID;
	private int SprFrame;
	private bool DestroyMe;
	private int StepDelay;
	bool NoAim;
	protected bool ForceIdleSway;
	protected int CurAction;
	protected double OverScale;
//	protected TM_BodyPartAttachment Attachment[2];
	Vector3 // For the angles, X = Angle, Y = Pitch, Z = Roll
		AbsOff,		// Absolute Offsets
		PosOff,		// Position Offsets to Master
		RelOff,		// Relative position offsets to self
		AngOff,		// Secondary angle offsets (reset every tic to (0,0,0)
		CurAng,		// The current angle, pitch and roll.
		MainAng,	// Primary angle offsets (not reset)
		NextAng,	// For spring dampening. Target angles to reach.
		SwingAngDir,// How much to influence the APR as a scalar.
		VelAng; 	// Current velocity of transition to NextAng.
		
	meta int SideID;
	meta Class<TM_Armor> ArmorType;
	protected TM_QuatTurner Turner;
	protected Class<TM_BodyPartGib> Gib;
	
	bool	CopyInvis,
			IsStill;
	int		CopyFrames;
	double	AbOX, AbOY, AbOZ,		// Absolute position offsets
			OffX, OffY, OffZ,		// Primary offsets on the body
			ROfX, ROfY, ROfZ,		// Relative offsets
			AOffX, AOffY, AOffZ,	// Angle Offsets
			SOX, SOY, SOZ, 			// Sway Sine Offsets
			SDX, SDY, SDZ, 			// Sway Sine Distance
			SSX, SSY, SSZ,			// Sway Sine Speed
			ADX, ADY, ADZ,			// Swing Angle Direction
			VelSineOffset,
			SwingAmp,
			SwingAngleCap,
			SwingSpeed,
			StepVolume;
	Sound	StepSound;
	
	LimbSway Sway;
	LimbSwing Swing;
	TM_Monster Owner;
	
	
	// Don't do any extra processing if static.
	Property IsStill: IsStill;
	
	// For armor identification, used solely for arms/legs.
	Property SideID: SideID;
	
	Property StepSound: 		StepSound;
	Property StepVolume: 		StepVolume;
	
	// Should this copy the master's sprite frame?
	Property CopyFrames: 		CopyFrames;
	// Force idle swaying motion regardless of cvar?
	Property ForceIdleSway: 	ForceIdleSway;
	Property CurAction: 		CurAction;			// See Constants.txt
	// Offset of the limb's sine wave when in motion. I.e. making one leg go back
	// while the other goes forward.
	Property CopyInvis: 		CopyInvis;
	Property SineOffset: 		SOX, SOY, SOZ;
	Property SineDistance: 		SDX, SDY, SDZ;
	Property SineSpeed: 		SSX, SSY, SSZ;
	Property Offsets: 			OffX, OffY, OffZ;
	Property RelOffsets: 		ROfX, ROfY, ROfZ;
	Property AngleOffset: 		AOffX, AOffY, AOffZ;
	Property VelSineOffset: VelSineOffset;
	// Used for adjusting the angle/pitch/roll of the limb. This is a scalar.
	// X = Angle, Y = Pitch, Z = Roll.
	Property SwingAngleDir: 	ADX, ADY, ADZ;
	Property SwingAngleCap: 	SwingAngleCap;
	Property SwingAmp: 			SwingAmp;
	Property SwingSpeed: 		SwingSpeed;
	Property Gib: 				Gib;
	Property NoAim:				NoAim;
	
	Default
	{
		TM_BodyPart.NoAim true;
		TM_BodyPart.SwingSpeed 1.0;
		TM_BodyPart.CopyInvis true;
		TM_BodyPart.SwingAngleDir 0, 1, 0;
		TM_BodyPart.ForceIdleSway false;
		TM_BodyPart.SwingAngleCap 80;
		TM_BodyPart.SwingAmp SineWavePerSecond * 0.3;
		TM_BodyPart.StepVolume 1.0;
		Radius 4;
		Height 8;
		+NOINTERACTION
		+NOBLOCKMAP
		+NOTRIGGER
		+NOTONAUTOMAP
		+SEEINVISIBLE
	//	+NOSECTOR
	}
	
	override void Activate(Actor activator)
	{
		if (bKILLED || Destroyed() || !Master || !bDORMANT)	return;
		
		
		doSpring = false;
		UpdatePosition(Activator);
		NextAng.X = Activator.Angle;
		UpdateAngles(NextAng + MainAng);
		ClearInterpolation();
	//	bINVISIBLE = false;
		bDONTINTERPOLATE = false;
		bDORMANT = false;
		for (int i = 0; i < Limb.Size(); i++)
			if (Limb[i])	Limb[i].Activate(self);
		SetState(ResolveState("Active"));
		// This is changed a tick after in the state to ensure there's no interpolation.
		A_ChangeLinkFlags(FLAG_NO_CHANGE, false); 
	}
	
	override void Deactivate(Actor activator)
	{
		if (bKILLED || Destroyed() || !Master)	return;
		
		for (int i = 0; i < Limb.Size(); i++)
			if (Limb[i])	Limb[i].Deactivate(activator);
		bDONTINTERPOLATE = true;
		bDORMANT = true;
		SetState(ResolveState("Inactive"));
		A_ChangeLinkFlags(FLAG_NO_CHANGE, true);
	}
	
	override void Tick()
	{
		if (!Master || IsFrozen() || bDESTROYED || bDORMANT || bKILLED)	
		{
			Super.Tick();
			return;
		}
		
		if (DestroyMe)
		{
			bINVISIBLE = true;
			Destroy();
			return;
		}
		
		if (IsStill)
		{
			Super.Tick();
			return;
		}
		DoPreMotion();
		Super.Tick();
		DoMotion();
		UpdateLimbs((Angle, Pitch, Roll));
	}
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		Sway.Init((SOX,SOY,SOZ), (SDX, SDY, SDZ), (SSX, SSY, SSZ));
		Swing.Init(VelSineOffset, OverScale, SwingAmp);
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		Turner = TM_QuatTurner.Create();
		
		Swing.SwingAmp = SwingAmp;
		NextAng = (Angle, Pitch, Roll);
		CurAng = NextAng + MainAng;
		SwingAngDir = (ADX, ADY, ADZ);
		
		if (Master)
			bINVISIBLE = Master.bINVISIBLE;			
	}
	
	override void OnDestroy()
	{
		for (int i = 0; i < Limb.Size(); i++)
		{
			if (Limb[i])
				Limb[i].Destroy();
		}
		Super.OnDestroy();
	}
	
	//--------------------------------------------------------------------------
	// Custom functions
	//--------------------------------------------------------------------------
	// TO DO: Rework attachments so multiple can be added and to different limbs.
	
	// Offsets are relative, a la A_SpawnItemEx/A_Warp. TO DO: Replace with Quaternions
	void SpawnGib(double VelPosLen, Vector3 Ofs = (0,0,0))
	{
		if (bKILLED || bDESTROYED)	return;
		bKILLED = true;
		
		bINVISIBLE = true;
		
		for (int i = 0; i < Limb.Size(); i++)
			if (Limb[i])	Limb[i].SpawnGib(VelPosLen, Ofs);
			
		// Note: This must wait a tic before destruction because, for 
		// some reason, GZDoom's "kill monsters" command will break
		// if immediately destroyed. So it requires one tic to destroy.
		DestroyMe = true;
		
		// Don't spawn a gib if DONTGIB is present. Not being used elsewhere anyway
		// since all are +NOINTERACTION.
		if (bDONTGIB)
			return;
		
		// I've named all the gibs after the same with the "gib" affix after
		// so this will suffice, but the Gib property allows for overriding.
		
		if (!Gib)	
		{
			String gname = GetClassName().."Gib";
			Gib = gname;
			
			if (!Gib)	return;
			
		}
		
		let g = TM_BodyPartGib(Spawn(Gib, pos + WorldOffset, ALLOW_REPLACE));
		if (g)
		{
			// TO DO: Rework the spawning to be more appropriate. 
			g.Warp(g, 
				(Ofs.X + g.OffX) * cos(pitch), 
				(Ofs.Y + g.OffY), 
				(Ofs.Z + g.OffZ) * -sin(pitch), 
				0, WARPF_NOCHECKPOSITION);
				
			g.Angle = Angle;
			g.Pitch = Pitch;
			g.Roll = Roll;
			g.Scale = Scale;
			g.Sprite = Sprite;
			g.Frame = Frame;
			
			// Apply a random velocity in the event there's little speed.
			g.Vel3DFromAngle(ffrandom(3.0,6.0), irandom(0,359), irandom(-90, 45));
			if (Owner) g.Vel += Owner.Vel;
		}
		DestroyMe = true;
	}
	bool Destroyed() const { return bDESTROYED || DestroyMe;	} 
	
	void SetPosOffsets(Vector3 Off, bool interp = true, bool update = true)
	{
		if (Destroyed())	return;
		PosOff = Off;
		OffX = Off.X;
		OffY = Off.Y;
		OffZ = Off.Z;
		
		if (update)
		{
			UpdateScales(OverScale, Scale);
			UpdatePosition(Master, interp, false);
		}
	}
	
	void SetRelOffsets(Vector3 Off)
	{
		RelOff = Off;
		ROfX = Off.X;
		ROfY = Off.Y;
		ROfZ = Off.Z;
	}
	
	void SetAbsOffsets(Vector3 Off)
	{
		AbsOff = Off;
		AbOX = Off.X;
		AbOY = Off.Y;
		AbOZ = Off.Z;
		AbsOff.XY = (AbOX, AbOY) * Scale.X;
		AbsOff.Z  = AbOZ * Scale.Y;
	}
	
	//--------------------------------------------------------------------------
	// 
	virtual void UpdatePosition(Actor who, bool interp = true, bool start = true)
	{
		if (!Owner || Destroyed())	return;
		
		if (!who)	
		{
			who = Master;
			if (!who)	who = Owner;
			if (!who)	return;
		}
		
		Vector3 origin, nang, NPos;
		nang = (CurAng + AngOff);
		
		double _p = ((start) ? 0 : who.pitch);
		
		Quat base = Quat.FromAngles(who.angle, _p, who.roll);
		origin = who.pos;
		Vector3 ret = base * PosOff;
		NPos = ret + who.WorldOffset;
		
		if (!(RelOff ~== (0,0,0)))
		{	
			Quat ans = Quat.FromAngles(nang.X, nang.Y, nang.Z);
			ret = ans * RelOff;
			NPos += ret;
		}
		
		NPos += AbsOff;
		if (origin != pos)
			SetOrigin(origin, interp);
			
		WorldOffset = NPos;
	}
	
	// Updates the scale of all vectors based on scale so their limbs grow
	// or shrink with their height changes accordingly.
	
	// TO DO: Fix broken attachments not appearing due to scaling issues on 
	// differently scaled enemies.
	virtual void UpdateScales(double OverScale, Vector2 Scale, bool doOffset = true)
	{
		if (Destroyed())	return;
		
		bool NoResize = (self.Overscale ~== Overscale && self.Scale ~== Scale);
		
		self.OverScale = OverScale;
		Scale = Scale * OverScale;
		self.Scale = Scale;
		if (doOffset)
		{
			PosOff.XY = (OffX, OffY) * Scale.X;
			PosOff.Z  = OffZ * Scale.Y;
			RelOff.XY = (ROfX, ROfY) * Scale.X;
			RelOff.Z  = ROfZ * Scale.Y;
			AbsOff.XY = (AbOX, AbOY) * Scale.X;
			AbsOff.Z  = AbOZ * Scale.Y;
			Swing.Scale = OverScale;
		}
		
		if (!NoResize)
			A_SetSize(Default.Radius * Scale.X, Default.Height * Scale.Y);
	}
	
	virtual void UpdateAngles(Vector3 Next, int turnflags = 0)
	{
		if (Destroyed())	return;
		Next = Next + AngOff;
		if (!IsStill && StepDelay < 1 && StepSound != "" && self is 'TM_BodyPartLeg')
		{
			if (pitch < 0.0 && pitch + Next.Y >= 0.0)
			{
				StepDelay = StepWait;
				A_StartSound(StepSound, CHAN_BODY, CHANF_OVERLAP, StepVolume);
			}
		}
		
		A_SetAngle(Next.X, turnflags);
		A_SetPitch(Next.Y, turnflags);
		A_SetRoll(Next.Z, turnflags);
	}
	
	virtual void SetNextAngles(Vector3 Next)	{	NextAng = Next;	}
	
	void SetAngles(double ang = 0.0, double pit = 0.0, double rol = 0.0, bool ofs = false, bool snap = true)
	{
		if (Destroyed())	return;
		if (ofs)	AngOff = (ang, pit, rol);
		else		MainAng = (ang, pit, rol);
		doSpring = !snap;
	}
	
	void SetAction(int act)
	{
		CurAction = act;
	}
	
	virtual void SetSwingGain(double amt) 	{	Swing.SwingAmp = amt;	}

	// Sets the primary angles, which the offsets are then based on. 
	// Snap = no interpolation & no spring effect.
	void SetYaw(double ang, bool snap = true)			{	MainAng.X = ang;	PostAngSet(snap);	}
	void SetPitch(double pit, bool snap = true)			{	MainAng.Y = pit;	PostAngSet(snap);	}
	void SetRoll(double rol, bool snap = true)			{	MainAng.Z = rol;	PostAngSet(snap);	}
	
	// 
	void SetYawOffset(double ang, bool snap = true, bool persist = false)		{	AngOff.X = ang; if (persist) AOffX = ang;	PostAngSet(snap);	}
	void SetPitchOffset(double pit, bool snap = true, bool persist = false)		{	AngOff.Y = pit;	if (persist) AOffY = pit;	PostAngSet(snap);	}
	void SetRollOffset(double rol, bool snap = true, bool persist = false)		{	AngOff.Z = rol;	if (persist) AOffZ = rol;	PostAngSet(snap);	}
	
	void SetPersistantAPROffset(Vector3 APR, bool snap = true)
	{
		AOffX = APR.X;
		AOffY = APR.Y;
		AOffZ = APR.Z;
		PostAngSet(snap);
	}
	
	// Clears the velocity of the current angle transition.
	void PostAngSet(bool snap)
	{
		VelAng = (0,0,0);
		doSpring = !snap;
	}
	
	// Primarily used for the arms/legs if needed. Also, didn't want to create
	// another subclass for limbs. If 'swinging' is false, it'll modify the sway
	// based on if it's used or not. Arms and legs have their own predetermined
	// functional overrides.
	virtual void SetSineOffset(Vector3 off, bool swinging = false){}
	virtual void SetSineDistance(Vector3 dist, bool swinging = false) {}
	virtual void SetSineSpeed(Vector3 speed, bool swinging = false) {}
	
	bool SetAnimation(StateLabel next)
	{
		if (Destroyed() || next == null)	return false;
		
		State s = ResolveState(next);
		if (s)	SetState(s);
		return (s != null);
	}
	
	// Motion handling virtual.
	virtual void DoPreMotion()	
	{
		if (IsStill || Destroyed())	return;
		if (StepDelay > 0)	StepDelay--;
		// Counteract the MainAng and AngOff. We don't want it part of the
		// calculations or it won't work correctly.
		CurAng = (Angle, Pitch, Roll) - AngOff;
		AngOff = (0,0,0);
	}
	
	protected bool doSpring;
	virtual void DoMotion()		
	{
		if (!Owner || IsStill || Destroyed())	return;
		
		if (CurAction > 0 && !Owner.bDORMANT)
		{
			if ((TMV_IdleSway || ForceIdleSway) && (CurAction & E_Sway))
			{
				if (!Turner)	Turner = TM_QuatTurner.Create();
				AngOff = Turner.GetTurn((0,0,0), Sway.NextSway());
			}
			if (CurAction & E_Swing)
			{
				Swing.AngleCap = SwingAngleCap;
				double NS = Swing.NextSwing(Owner.VelPosLen * SwingSpeed, true);
				double NC = Swing.NextSwing(Owner.VelPosLen * SwingSpeed, donext: false);
				AngOff.X += NS * SwingAngDir.X;
				AngOff.Y += NC * SwingAngDir.Y;				
				AngOff.Z += NS * SwingAngDir.Z;
			}
		}
		if (!doSpring || Owner.bDORMANT)
		{
			CurAng = NextAng + MainAng;
			doSpring = true;
		}
		else
		{
			VelAng = TM_kSpring.FancySpringAngles(CurAng, NextAng + MainAng, VelAng, 0.25, 0.1);
			CurAng += VelAng;
		}
		
		DoMotionAdjustments();
		UpdateAngles(CurAng, SPF_INTERPOLATE);
		
	}
	
	virtual void DoMotionAdjustments()
	{
		AngOff += (AOffX, AOffY, AOffZ);
	}
	
	Vector3, Vector3, Vector3 GetAngles()
	{
		return CurAng, VelAng, NextAng;
	}
	
	void CopyAngles(Actor lim, bool actual = false)
	{
		if (!lim)	return;
		
		let limb = TM_BodyPart(lim);
		if (!limb)	
		{
			angle = lim.angle;
			pitch = lim.pitch;
			roll = lim.roll;			
			return;
		}
		
		[CurAng, VelAng, NextAng] = limb.GetAngles(); 
		if (actual)
		{
			pitch = limb.pitch;
			angle = limb.angle;
			roll = limb.roll;
		}
	}
	
	virtual Class<TM_Armor> GetArmorClass(int slot)	{	return null;	}
	
	// Wrapper function for adding armor as a limb.
	virtual bool, TM_Armor SetArmor(int slot, int type)
	{		
		TM_Armor ret = null;
		let cls = GetArmorClass(slot);
		if (!cls)	return false, null;
		
		bool found = false;
		for (int i = 0; i < Limb.Size(); i++)
		{	
			if (Limb[i].GetClass() == cls)
			{
				if (type == AT_None)
				{
					Limb[i].Destroy();
					found = true;
					continue;
				}
				Limb[i].Frame = type;
				found = true;
			}
			// If there are addition limbs parented to this one, make sure they
			// call it too.
			if (Limb[i])	
			{
				Limb[i].SetArmor(slot, type);
			}
			
		}
		if (!found && type > AT_None && type <= AT_Max)
		{
			let arm = InsertLimb(cls, -1, (0,0,0), true);
			if (arm)
			{
				arm.Frame = type;
				found = true;
			}
			ret = TM_Armor(arm);
		}
		return found, ret;
	}
	
	void DestroyArmor()
	{
		Array<TM_BodyPart> temp; temp.Clear();
		for (int i = 0; i < Limb.Size(); i++)
		{
			let mo = TM_Armor(Limb[i]);
			if (mo)	mo.Destroy();
			else if (Limb[i])	temp.Push(Limb[i]);
		}
		
		Limb.Move(temp);
	}
	
	States
	{
	Inactive:
		TNT1 A -1;
		Stop;
	Active:
		TNT1 A 1;
		TNT1 A 0 
		{
		//	A_ChangeLinkFlags(FLAG_NO_CHANGE, true);
			return ResolveState("Spawn");	
		}
	Spawn:
		ASDF A -1;
		Stop;
	}
}

//------------------------------------------------------------------------------
// Head
//
// TO DO: Allow ViewAngle/Pitch/Roll to affect body parts, acting as an offset.
//------------------------------------------------------------------------------

Class TM_BodyPartHead : TM_BodyPart 
{
	Default
	{
		TM_BodyPart.NoAim false;
		Radius 1.6;
		Height 1.6;
	}

	TM_Monster Trg;
	TM_BodyPartHead TargetHead;
	override void DoMotion()
	{
		if (!Owner)	return;
		
		if (NoAim)
		{
			Super.DoMotion();
			return;
		}
		
		int flag = FAF_TOP;
		double zof = 0.75;
		
		// If the enemy is a player, look at the camera.
		Target = (Owner.Target != Owner.Goal) ? Owner.Target : null;
		if (Target)
		{
			if (Target is 'PlayerPawn')
			{
				flag = FAF_BOTTOM;
				if (Target.Player)
					zof = Target.Player.ViewZ;
				else
					zof = Target.Pos.Z + Target.Height * 0.75;
				
			}
			// Look at the other fellow's head.
			else if (Target is 'TM_Monster')
			{
				Trg = TM_Monster(Target);
				if (Trg)
				{
					TargetHead = Trg.GetHead();
					if (TargetHead)
					{
						Target = TargetHead;
						zof = Target.Pos.Z + Target.WorldOffset.Z + Target.Height * 0.5;
					}
				}
			}
			else zof = Target.Pos.Z + Target.Height * 0.75;
		
		
			Angle = Owner.Angle + Owner.ViewAngle + ViewAngle;
			Pitch = Owner.ViewPitch + ViewPitch;
			
			if (bNOFEAR || (!Owner.bFRIGHTENED && !Target.bFRIGHTENING))
			{
				
				A_Face(Target, 90);
				double _ang = Angle;
				double _rol = Roll;
				TM_Global.FaceVector(self, (Target.Pos.X, Target.Pos.Y, zof));
				NextAng = (_ang, Clamp(Pitch, -55, 55), _rol);
				Angle = CurAng.X;
				Pitch = CurAng.Y;
				Roll =	CurAng.Z;
			}
		}
		Super.DoMotion();
	}
	
	override Class<TM_Armor> GetArmorClass(int slot)
	{
		if (slot == AR_Head) 
			return 'TM_ArmorHead';
		return null;
	}
	
	
}

Class TM_BodyPartBody : TM_BodyPart
{
	override Class<TM_Armor> GetArmorClass(int slot)
	{
		Switch(slot)
		{
			Case AR_Body:	return 'TM_ArmorChest';
			Case AR_Legs:	return 'TM_ArmorPants';
		}
		return null;
	}
}

Class TM_BodyPartArm : TM_BodyPart
{	
	Default
	{
		TM_BodyPart.CurAction E_Sway;
		TM_BodyPart.SineOffset 0, 0, 0;			// Starting offset
		TM_BodyPart.SineDistance 1, 4, 0;		// Wave Size
		TM_BodyPart.SineSpeed 0.1, 0.3, 0;		// Waves Per Second
	}
	
	TM_Monster Trg;
	TM_BodyPartHead TargetHead;
	override void DoMotion()
	{
		if (!Owner)	return;
		
		if (NoAim)
		{
			Super.DoMotion();
			return;
		}
		
		int flag = FAF_TOP;
		double zof = 0.75;
		
		// If the enemy is a player, look at the camera.
		Target = (Owner.Target != Owner.Goal) ? Owner.Target : null;
		if (Target)
		{
			if (Target is 'PlayerPawn')
			{
				flag = FAF_BOTTOM;
				if (Target.Player)
					zof = Target.Player.ViewZ;
				else
					zof = Target.Pos.Z + Target.Height * 0.75;
				
			}
			// Look at the other fellow's head.
			else if (Target is 'TM_Monster')
			{
				Trg = TM_Monster(Target);
				if (Trg)
				{
					TargetHead = Trg.GetHead();
					if (TargetHead)
					{
						Target = TargetHead;
						zof = Target.Pos.Z + Target.Height * 0.5;
					}
				}
			}
			else zof = Target.Pos.Z + Target.Height * 0.75;
		
		
			Angle = Owner.Angle + Owner.ViewAngle + ViewAngle;
			Pitch = Owner.ViewPitch + ViewPitch;
			
			if (bNOFEAR || (!Owner.bFRIGHTENED && !Target.bFRIGHTENING))
			{
				double _ang = Angle;
				double _rol = Roll;
				TM_Global.FaceVector(self, (Target.Pos.X, Target.Pos.Y, zof));
				NextAng = (_ang, Clamp(Pitch, -55, 55), _rol);
				Angle = CurAng.X;
				Pitch = CurAng.Y;
				Roll =	CurAng.Z;
			}
		}
		Super.DoMotion();
	}
	
	override Class<TM_Armor> GetArmorClass(int slot)
	{
		Switch(slot)
		{
			Case AR_Body:	
			{
				if (SideID == TMS_Left)
					return 'TM_ArmorArmL';
				if (SideID == TMS_Right)
					return 'TM_ArmorArmR';
				break;
			}
			Case WR_ArmL:
			{
				if (SideID == TMS_Left)
					return 'TM_Sword';
				break;
			}
			Case WR_ArmR:
			{
				if (SideID == TMS_Right)
					return 'TM_Sword';
				break;
			}
		}
		return null;
	}
	
	override void SetSineOffset(Vector3 off, bool swinging)	
	{	
		if (swinging)	Swing.VelTheta = off.x;
		else			Sway.SineOff = off;	
	}
	override void SetSineDistance(Vector3 dist, bool swing) {	Sway.SineDist = (abs(dist.x), abs(dist.y), abs(dist.z));	}
	override void SetSineSpeed(Vector3 sped, bool swing) 	{	Sway.SineSpeed = sped;	}
	
	States
	{
	ZombieMelee:
		---- A 8 SetPitch(-160, false);
		---- A -1 SetPitch(-90, false);
		Goto Spawn;
	}
}

Class TM_BodyPartLeg : TM_BodyPart
{
	Default
	{
		TM_BodyPart.CurAction E_Swing;
		TM_BodyPart.VelSineOffset 0;
	}
	
	override Class<TM_Armor> GetArmorClass(int slot)
	{
		Switch(slot)
		{
			Case AR_Legs:	
			{
				if (SideID == TMS_Left)
					return 'TM_ArmorLegL';
				if (SideID == TMS_Right)
					return 'TM_ArmorLegR';
			}
			Case AR_Feet:
			{
				if (SideID == TMS_Left)
					return 'TM_ArmorBootL';
				if (SideID == TMS_Right)
					return 'TM_ArmorBootR';
			}
		}
		return null;
	}
	
	override void SetSineOffset(Vector3 off, bool swinging)	
	{	Swing.VelTheta = off.x;	}
}

//==============================================================================
// Gibbed Parts
//
// Flying parts that are affected by how much damage a monster took or how far
// they were flung. Especially hilarious when a monster dies by falling damage
// since it just BOINGS back into the air (intentionally done that way for 
// comedic effect =P).
//==============================================================================

Class TM_BodyPartGib : TM_Entity abstract
{
	const FadeTime = 1.0 / 35.0;
	const TimeCap = 90.0;
	const Timing = TimeCap / 17.5;
	
	double OffX, OffY, OffZ;
	
	Vector3 Turning; // X = Angle, Y = Pitch, Z = Roll
	
	private Vector2 HoldAng;
	private int LifeTime;
	private double Timer, StartPitch, VelPosLen;
	protected double EndPitch, EndRoll;
	private bool DualSideRoll, DualSidePitch;
	
	Property Offsets: OffX, OffY, OffZ;
	Property DualSideRoll: DualSideRoll;
	Property DualSidePitch: DualSidePitch;
	Property LifeTime: LifeTime;
	Property EndPitch: EndPitch;
	Property EndRoll: EndRoll;
	Default
	{
		TM_BodyPartGib.Offsets 0, 0, 0;
		TM_BodyPartGib.LifeTime 350;
		TM_BodyPartGib.EndPitch -90;
		TM_BodyPartGib.EndRoll 0;
		Projectile;
		Radius 2;
		Height 4;
		+NOINTERACTION
		+NOBLOCKMAP
		+NOTONAUTOMAP
		+THRUACTORS
		+CANBOUNCEWATER
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		+BOUNCEAUTOOFFFLOORONLY
		+NOTRIGGER
		-NOGRAVITY
		+CANNOTPUSH
		-ACTIVATEPCROSS
		-ACTIVATEIMPACT
		Mass 9; // Small splashes for these.
		BounceType "Doom";
		BounceFactor 0.4;
		WallBounceFactor 0.8;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		_vv = vel;
		VelPosLen = vel.Length();
		double velo = min(VelPosLen * 0.2, 20.0);
		Turning = (
			ffrandom(-2.0, 2.0) * velo,
			ffrandom(-2.0, 2.0) * velo,
			ffrandom(-2.0, 2.0) * velo);
		oldFloorZ = FloorZ;
	//	vel = (0,0,0);
	}
	
	void Turn()
	{
		if (!(Turning ~== (0,0,0)))
		{
			A_SetAngle(Angle + Turning.X, SPF_INTERPOLATE);
			if (!dragging)
			{
				A_SetPitch(Pitch + Turning.Y, SPF_INTERPOLATE);
				A_SetRoll(Roll + Turning.Z, SPF_INTERPOLATE);
			}
			else
			{
				ResetDirection();
			}
		}
	}
	
	// Gradually turns the limb to a resting position. Since there's no model
	// bouncing via vertices this will suffice well enough.
	void ResetDirection()
	{
//		if (Timer >= Timing * 17.0) return;
		if (Timer <= 0.0)
		{
			Normalize180(pitch);
			Normalize180(roll);
			HoldAng = (Pitch, Roll);
		}
		
		Timer += Timing;
		double sn = abs(cos(90 + Timer));
		
		Vector2 between = TM_VectorUtil.LerpUnclampedVec2(HoldAng, (EndPitch, EndRoll), sn);
		
		A_SetPitch(between.X, SPF_INTERPOLATE);
		A_SetRoll(between.Y, SPF_INTERPOLATE);
	}
		
	// Main code by Marisa Kirisame, modified by me.
	private Vector3 _vv;
	private bool dragging;
	private double oldFloorZ;
	private void TraceNextPos()
	{
		if (bKILLED)	return;
		
		double dist = vel.Length() + 1;
		Vector3 center = level.Vec3Offset(pos, (0,0,1));
		if (dist <= 2.0 && pos.z - floorz <= 2.0)
		{
			Timer = 0.0;
			vel = (0,0,0);
			bKILLED = true;
			bMOVEWITHSECTOR = true;
			SetState(FindState('Death'));
			return;
		}
		
		double grav = GibGrav(true);
		
		let t = new('TM_BounceTracer');
		int HitType = TRACE_HitNone;
		Vector3 normal, end;
		{
			t.Trace(center, CurSector, vel.Unit(), dist, 0);
			HitType = t.Results.HitType;
			normal = -t.Results.HitVector; 
			end = t.Results.HitPos;
			
			if ( HitType == TRACE_HitWall )
			{
				double fac = (WallBounceFactor > 0) ? WallBounceFactor : BounceFactor;
				normal = (t.Results.HitLine.delta.y,-t.Results.HitLine.delta.x,0).unit();
				if ( t.Results.Side ) normal *= -1;
				vel -= 2*normal*(vel dot normal);
				vel.XY *= fac;
			}
			else if ( HitType == TRACE_HitFloor )
			{
				if ( t.Results.ffloor ) normal = -t.Results.ffloor.top.Normal;
				else normal = t.Results.HitSector.floorplane.Normal;
				
				vel -= 2*normal*(vel dot normal);
				vel *= BounceFactor;
			}
			else if ( HitType == TRACE_HitCeiling )
			{
				if ( t.Results.ffloor ) normal = -t.Results.ffloor.bottom.Normal;
				else normal = t.Results.HitSector.ceilingplane.Normal;
				vel -= 2*normal*(vel dot normal);
				vel *= BounceFactor;
			}
			else
			{	//For older versions of GZDoom that don't have the trace fix.
				if (end ~== center) 
				{
					end = level.Vec3Offset(center,vel);
					normal *= 0;
				}
			}
			dist -= level.Vec3Diff(center, end).Length();
		}
		/*
		dragging = 
			(abs(center.z - floorz) <= 2) && 
			(OldFloorZ >= floorz) &&
			(vel.z >= -grav) && (vel.z <= grav);
		
		if (dragging)
		{
			vel.z = 0.0;
			vel *= 0.90625 * GetFriction();
		}
		else vel.Z -= grav;
		*/
		
		
		vel.Z -= grav;
	}
	
	private double GibGrav(bool water = true)
	{
		// Counteract gravity when underwater.
		if (WaterLevel > 0 || 
			((TMV_NoSectorGravity & TM_NSG_GIBMISLS) && 
			!bNOGRAVITY && Gravity > 0.0))
		{
			double t = Gravity;
			
			if (!water || WaterLevel < 1)		return t;
			else								return -(t * 0.3);
		}
		return GetGravity();
	}
	
	override void Tick()
	{
		if (IsFrozen())	return;
		
		if (!bKILLED)
		{	
			oldFloorZ = FloorZ;
			TraceNextPos();
			bDONTSPLASH = (vel.Z >= -3.0);
		}
		
		Super.Tick();
		
		if (!(vel ~== (0,0,0)))
			UpdateWaterLevel(true);
		
		if (pos.z < floorz)	
			SetOrigin((pos.x, pos.y, floorz), true);
			
		if ((bKILLED && ShortLife) || --LifeTime < 1)
			A_FadeOut(FadeTime);
	}
	
	private bool ShortLife;
	States
	{
	Spawn:
		ASDF A 0;
		---- A 1 Turn();
		Wait;
	Death:
		---- AAAAAAAAAAAAAAAAA 1
		{
			bMOVEWITHSECTOR = true;
			A_Stop(); _vv = vel;
			ResetDirection();
		}
		---- A -1 
		{ 
			bKILLED = true;
			ShortLife = TMV_ShortGibLives;
		}
		Stop;
	}
}